// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.6.1
// source: rabbitmq.proto

package amqp

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RabbitMQMessage_Type int32

const (
	RabbitMQMessage_UNKNOWN                       RabbitMQMessage_Type = 0
	RabbitMQMessage_NEWS_RSS                      RabbitMQMessage_Type = 1
	RabbitMQMessage_NEWS_TWITTER                  RabbitMQMessage_Type = 2
	RabbitMQMessage_PORTAL_POSITION_REQUEST       RabbitMQMessage_Type = 3
	RabbitMQMessage_PORTAL_POSITION_ANSWER        RabbitMQMessage_Type = 4
	RabbitMQMessage_CONFIGURATION_DISPLAY_REQUEST RabbitMQMessage_Type = 5
	RabbitMQMessage_CONFIGURATION_DISPLAY_ANSWER  RabbitMQMessage_Type = 6
	RabbitMQMessage_CONFIGURATION_WEBHOOK_REQUEST RabbitMQMessage_Type = 7
	RabbitMQMessage_CONFIGURATION_WEBHOOK_ANSWER  RabbitMQMessage_Type = 8
	RabbitMQMessage_CONFIGURATION_SERVER_REQUEST  RabbitMQMessage_Type = 9
	RabbitMQMessage_CONFIGURATION_SERVER_ANSWER   RabbitMQMessage_Type = 10
)

// Enum value maps for RabbitMQMessage_Type.
var (
	RabbitMQMessage_Type_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "NEWS_RSS",
		2:  "NEWS_TWITTER",
		3:  "PORTAL_POSITION_REQUEST",
		4:  "PORTAL_POSITION_ANSWER",
		5:  "CONFIGURATION_DISPLAY_REQUEST",
		6:  "CONFIGURATION_DISPLAY_ANSWER",
		7:  "CONFIGURATION_WEBHOOK_REQUEST",
		8:  "CONFIGURATION_WEBHOOK_ANSWER",
		9:  "CONFIGURATION_SERVER_REQUEST",
		10: "CONFIGURATION_SERVER_ANSWER",
	}
	RabbitMQMessage_Type_value = map[string]int32{
		"UNKNOWN":                       0,
		"NEWS_RSS":                      1,
		"NEWS_TWITTER":                  2,
		"PORTAL_POSITION_REQUEST":       3,
		"PORTAL_POSITION_ANSWER":        4,
		"CONFIGURATION_DISPLAY_REQUEST": 5,
		"CONFIGURATION_DISPLAY_ANSWER":  6,
		"CONFIGURATION_WEBHOOK_REQUEST": 7,
		"CONFIGURATION_WEBHOOK_ANSWER":  8,
		"CONFIGURATION_SERVER_REQUEST":  9,
		"CONFIGURATION_SERVER_ANSWER":   10,
	}
)

func (x RabbitMQMessage_Type) Enum() *RabbitMQMessage_Type {
	p := new(RabbitMQMessage_Type)
	*p = x
	return p
}

func (x RabbitMQMessage_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RabbitMQMessage_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_rabbitmq_proto_enumTypes[0].Descriptor()
}

func (RabbitMQMessage_Type) Type() protoreflect.EnumType {
	return &file_rabbitmq_proto_enumTypes[0]
}

func (x RabbitMQMessage_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RabbitMQMessage_Type.Descriptor instead.
func (RabbitMQMessage_Type) EnumDescriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{0, 0}
}

type RabbitMQMessage_Language int32

const (
	RabbitMQMessage_ANY RabbitMQMessage_Language = 0
	RabbitMQMessage_FR  RabbitMQMessage_Language = 1
	RabbitMQMessage_EN  RabbitMQMessage_Language = 2
	RabbitMQMessage_ES  RabbitMQMessage_Language = 3
)

// Enum value maps for RabbitMQMessage_Language.
var (
	RabbitMQMessage_Language_name = map[int32]string{
		0: "ANY",
		1: "FR",
		2: "EN",
		3: "ES",
	}
	RabbitMQMessage_Language_value = map[string]int32{
		"ANY": 0,
		"FR":  1,
		"EN":  2,
		"ES":  3,
	}
)

func (x RabbitMQMessage_Language) Enum() *RabbitMQMessage_Language {
	p := new(RabbitMQMessage_Language)
	*p = x
	return p
}

func (x RabbitMQMessage_Language) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RabbitMQMessage_Language) Descriptor() protoreflect.EnumDescriptor {
	return file_rabbitmq_proto_enumTypes[1].Descriptor()
}

func (RabbitMQMessage_Language) Type() protoreflect.EnumType {
	return &file_rabbitmq_proto_enumTypes[1]
}

func (x RabbitMQMessage_Language) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RabbitMQMessage_Language.Descriptor instead.
func (RabbitMQMessage_Language) EnumDescriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{0, 1}
}

type RabbitMQMessage_Status int32

const (
	RabbitMQMessage_SUCCESS RabbitMQMessage_Status = 0
	RabbitMQMessage_FAILED  RabbitMQMessage_Status = 1
)

// Enum value maps for RabbitMQMessage_Status.
var (
	RabbitMQMessage_Status_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILED",
	}
	RabbitMQMessage_Status_value = map[string]int32{
		"SUCCESS": 0,
		"FAILED":  1,
	}
)

func (x RabbitMQMessage_Status) Enum() *RabbitMQMessage_Status {
	p := new(RabbitMQMessage_Status)
	*p = x
	return p
}

func (x RabbitMQMessage_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RabbitMQMessage_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_rabbitmq_proto_enumTypes[2].Descriptor()
}

func (RabbitMQMessage_Status) Type() protoreflect.EnumType {
	return &file_rabbitmq_proto_enumTypes[2]
}

func (x RabbitMQMessage_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RabbitMQMessage_Status.Descriptor instead.
func (RabbitMQMessage_Status) EnumDescriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{0, 2}
}

type ConfigurationWebhookRequest_Provider int32

const (
	ConfigurationWebhookRequest_ALMANAX ConfigurationWebhookRequest_Provider = 0
	ConfigurationWebhookRequest_RSS     ConfigurationWebhookRequest_Provider = 1
	ConfigurationWebhookRequest_TWITTER ConfigurationWebhookRequest_Provider = 2
)

// Enum value maps for ConfigurationWebhookRequest_Provider.
var (
	ConfigurationWebhookRequest_Provider_name = map[int32]string{
		0: "ALMANAX",
		1: "RSS",
		2: "TWITTER",
	}
	ConfigurationWebhookRequest_Provider_value = map[string]int32{
		"ALMANAX": 0,
		"RSS":     1,
		"TWITTER": 2,
	}
)

func (x ConfigurationWebhookRequest_Provider) Enum() *ConfigurationWebhookRequest_Provider {
	p := new(ConfigurationWebhookRequest_Provider)
	*p = x
	return p
}

func (x ConfigurationWebhookRequest_Provider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigurationWebhookRequest_Provider) Descriptor() protoreflect.EnumDescriptor {
	return file_rabbitmq_proto_enumTypes[3].Descriptor()
}

func (ConfigurationWebhookRequest_Provider) Type() protoreflect.EnumType {
	return &file_rabbitmq_proto_enumTypes[3]
}

func (x ConfigurationWebhookRequest_Provider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigurationWebhookRequest_Provider.Descriptor instead.
func (ConfigurationWebhookRequest_Provider) EnumDescriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{7, 0}
}

type RabbitMQMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                        RabbitMQMessage_Type         `protobuf:"varint,1,opt,name=type,proto3,enum=amqp.RabbitMQMessage_Type" json:"type,omitempty"`
	Language                    RabbitMQMessage_Language     `protobuf:"varint,2,opt,name=language,proto3,enum=amqp.RabbitMQMessage_Language" json:"language,omitempty"`
	Status                      RabbitMQMessage_Status       `protobuf:"varint,3,opt,name=status,proto3,enum=amqp.RabbitMQMessage_Status" json:"status,omitempty"`
	NewsTwitterMessage          *NewsTwitterMessage          `protobuf:"bytes,10,opt,name=newsTwitterMessage,proto3" json:"newsTwitterMessage,omitempty"`
	NewsRSSMessage              *NewsRSSMessage              `protobuf:"bytes,11,opt,name=newsRSSMessage,proto3" json:"newsRSSMessage,omitempty"`
	PortalPositionRequest       *PortalPositionRequest       `protobuf:"bytes,12,opt,name=portalPositionRequest,proto3" json:"portalPositionRequest,omitempty"`
	PortalPositionAnswer        *PortalPositionAnswer        `protobuf:"bytes,13,opt,name=portalPositionAnswer,proto3" json:"portalPositionAnswer,omitempty"`
	ConfigurationDisplayRequest *ConfigurationDisplayRequest `protobuf:"bytes,14,opt,name=configurationDisplayRequest,proto3" json:"configurationDisplayRequest,omitempty"`
	ConfigurationDisplayAnswer  *ConfigurationDisplayAnswer  `protobuf:"bytes,15,opt,name=configurationDisplayAnswer,proto3" json:"configurationDisplayAnswer,omitempty"`
	ConfigurationWebhookRequest *ConfigurationWebhookRequest `protobuf:"bytes,16,opt,name=configurationWebhookRequest,proto3" json:"configurationWebhookRequest,omitempty"`
	ConfigurationWebhookAnswer  *ConfigurationWebhookAnswer  `protobuf:"bytes,17,opt,name=configurationWebhookAnswer,proto3" json:"configurationWebhookAnswer,omitempty"`
	ConfigurationServerRequest  *ConfigurationServerRequest  `protobuf:"bytes,18,opt,name=configurationServerRequest,proto3" json:"configurationServerRequest,omitempty"`
	ConfigurationServerAnswer   *ConfigurationServerAnswer   `protobuf:"bytes,19,opt,name=configurationServerAnswer,proto3" json:"configurationServerAnswer,omitempty"`
}

func (x *RabbitMQMessage) Reset() {
	*x = RabbitMQMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RabbitMQMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RabbitMQMessage) ProtoMessage() {}

func (x *RabbitMQMessage) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RabbitMQMessage.ProtoReflect.Descriptor instead.
func (*RabbitMQMessage) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{0}
}

func (x *RabbitMQMessage) GetType() RabbitMQMessage_Type {
	if x != nil {
		return x.Type
	}
	return RabbitMQMessage_UNKNOWN
}

func (x *RabbitMQMessage) GetLanguage() RabbitMQMessage_Language {
	if x != nil {
		return x.Language
	}
	return RabbitMQMessage_ANY
}

func (x *RabbitMQMessage) GetStatus() RabbitMQMessage_Status {
	if x != nil {
		return x.Status
	}
	return RabbitMQMessage_SUCCESS
}

func (x *RabbitMQMessage) GetNewsTwitterMessage() *NewsTwitterMessage {
	if x != nil {
		return x.NewsTwitterMessage
	}
	return nil
}

func (x *RabbitMQMessage) GetNewsRSSMessage() *NewsRSSMessage {
	if x != nil {
		return x.NewsRSSMessage
	}
	return nil
}

func (x *RabbitMQMessage) GetPortalPositionRequest() *PortalPositionRequest {
	if x != nil {
		return x.PortalPositionRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetPortalPositionAnswer() *PortalPositionAnswer {
	if x != nil {
		return x.PortalPositionAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetConfigurationDisplayRequest() *ConfigurationDisplayRequest {
	if x != nil {
		return x.ConfigurationDisplayRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetConfigurationDisplayAnswer() *ConfigurationDisplayAnswer {
	if x != nil {
		return x.ConfigurationDisplayAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetConfigurationWebhookRequest() *ConfigurationWebhookRequest {
	if x != nil {
		return x.ConfigurationWebhookRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetConfigurationWebhookAnswer() *ConfigurationWebhookAnswer {
	if x != nil {
		return x.ConfigurationWebhookAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetConfigurationServerRequest() *ConfigurationServerRequest {
	if x != nil {
		return x.ConfigurationServerRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetConfigurationServerAnswer() *ConfigurationServerAnswer {
	if x != nil {
		return x.ConfigurationServerAnswer
	}
	return nil
}

type NewsTwitterMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title         string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	AuthorName    string `protobuf:"bytes,2,opt,name=authorName,proto3" json:"authorName,omitempty"`
	AuthorUrl     string `protobuf:"bytes,3,opt,name=authorUrl,proto3" json:"authorUrl,omitempty"`
	AuthorIconUrl string `protobuf:"bytes,4,opt,name=authorIconUrl,proto3" json:"authorIconUrl,omitempty"`
	Url           string `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	IconUrl       string `protobuf:"bytes,6,opt,name=iconUrl,proto3" json:"iconUrl,omitempty"`
	Content       string `protobuf:"bytes,7,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *NewsTwitterMessage) Reset() {
	*x = NewsTwitterMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsTwitterMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsTwitterMessage) ProtoMessage() {}

func (x *NewsTwitterMessage) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsTwitterMessage.ProtoReflect.Descriptor instead.
func (*NewsTwitterMessage) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{1}
}

func (x *NewsTwitterMessage) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NewsTwitterMessage) GetAuthorName() string {
	if x != nil {
		return x.AuthorName
	}
	return ""
}

func (x *NewsTwitterMessage) GetAuthorUrl() string {
	if x != nil {
		return x.AuthorUrl
	}
	return ""
}

func (x *NewsTwitterMessage) GetAuthorIconUrl() string {
	if x != nil {
		return x.AuthorIconUrl
	}
	return ""
}

func (x *NewsTwitterMessage) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *NewsTwitterMessage) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *NewsTwitterMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type NewsRSSMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title      string               `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	AuthorName string               `protobuf:"bytes,2,opt,name=authorName,proto3" json:"authorName,omitempty"`
	Url        string               `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	IconUrl    string               `protobuf:"bytes,4,opt,name=iconUrl,proto3" json:"iconUrl,omitempty"`
	Date       *timestamp.Timestamp `protobuf:"bytes,5,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *NewsRSSMessage) Reset() {
	*x = NewsRSSMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsRSSMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsRSSMessage) ProtoMessage() {}

func (x *NewsRSSMessage) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsRSSMessage.ProtoReflect.Descriptor instead.
func (*NewsRSSMessage) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{2}
}

func (x *NewsRSSMessage) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NewsRSSMessage) GetAuthorName() string {
	if x != nil {
		return x.AuthorName
	}
	return ""
}

func (x *NewsRSSMessage) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *NewsRSSMessage) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *NewsRSSMessage) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type PortalPositionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId    string `protobuf:"bytes,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	DimensionId string `protobuf:"bytes,2,opt,name=dimensionId,proto3" json:"dimensionId,omitempty"`
}

func (x *PortalPositionRequest) Reset() {
	*x = PortalPositionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortalPositionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalPositionRequest) ProtoMessage() {}

func (x *PortalPositionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalPositionRequest.ProtoReflect.Descriptor instead.
func (*PortalPositionRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{3}
}

func (x *PortalPositionRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *PortalPositionRequest) GetDimensionId() string {
	if x != nil {
		return x.DimensionId
	}
	return ""
}

type PortalPositionAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Positions []*PortalPositionAnswer_PortalPosition `protobuf:"bytes,1,rep,name=positions,proto3" json:"positions,omitempty"`
}

func (x *PortalPositionAnswer) Reset() {
	*x = PortalPositionAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortalPositionAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalPositionAnswer) ProtoMessage() {}

func (x *PortalPositionAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalPositionAnswer.ProtoReflect.Descriptor instead.
func (*PortalPositionAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{4}
}

func (x *PortalPositionAnswer) GetPositions() []*PortalPositionAnswer_PortalPosition {
	if x != nil {
		return x.Positions
	}
	return nil
}

type ConfigurationDisplayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId string `protobuf:"bytes,1,opt,name=guildId,proto3" json:"guildId,omitempty"`
}

func (x *ConfigurationDisplayRequest) Reset() {
	*x = ConfigurationDisplayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationDisplayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationDisplayRequest) ProtoMessage() {}

func (x *ConfigurationDisplayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationDisplayRequest.ProtoReflect.Descriptor instead.
func (*ConfigurationDisplayRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{5}
}

func (x *ConfigurationDisplayRequest) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

type ConfigurationDisplayAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO
	GuildId string `protobuf:"bytes,1,opt,name=guildId,proto3" json:"guildId,omitempty"`
}

func (x *ConfigurationDisplayAnswer) Reset() {
	*x = ConfigurationDisplayAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationDisplayAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationDisplayAnswer) ProtoMessage() {}

func (x *ConfigurationDisplayAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationDisplayAnswer.ProtoReflect.Descriptor instead.
func (*ConfigurationDisplayAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{6}
}

func (x *ConfigurationDisplayAnswer) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

type ConfigurationWebhookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId   string                               `protobuf:"bytes,1,opt,name=guildId,proto3" json:"guildId,omitempty"`
	ChannelId string                               `protobuf:"bytes,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Enabled   bool                                 `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Provider  ConfigurationWebhookRequest_Provider `protobuf:"varint,4,opt,name=provider,proto3,enum=amqp.ConfigurationWebhookRequest_Provider" json:"provider,omitempty"`
}

func (x *ConfigurationWebhookRequest) Reset() {
	*x = ConfigurationWebhookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationWebhookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationWebhookRequest) ProtoMessage() {}

func (x *ConfigurationWebhookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationWebhookRequest.ProtoReflect.Descriptor instead.
func (*ConfigurationWebhookRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{7}
}

func (x *ConfigurationWebhookRequest) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *ConfigurationWebhookRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ConfigurationWebhookRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ConfigurationWebhookRequest) GetProvider() ConfigurationWebhookRequest_Provider {
	if x != nil {
		return x.Provider
	}
	return ConfigurationWebhookRequest_ALMANAX
}

type ConfigurationWebhookAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfigurationWebhookAnswer) Reset() {
	*x = ConfigurationWebhookAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationWebhookAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationWebhookAnswer) ProtoMessage() {}

func (x *ConfigurationWebhookAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationWebhookAnswer.ProtoReflect.Descriptor instead.
func (*ConfigurationWebhookAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{8}
}

type ConfigurationServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId   string `protobuf:"bytes,1,opt,name=guildId,proto3" json:"guildId,omitempty"`
	ChannelId string `protobuf:"bytes,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	ServerId  string `protobuf:"bytes,3,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *ConfigurationServerRequest) Reset() {
	*x = ConfigurationServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationServerRequest) ProtoMessage() {}

func (x *ConfigurationServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationServerRequest.ProtoReflect.Descriptor instead.
func (*ConfigurationServerRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{9}
}

func (x *ConfigurationServerRequest) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *ConfigurationServerRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ConfigurationServerRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

type ConfigurationServerAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfigurationServerAnswer) Reset() {
	*x = ConfigurationServerAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationServerAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationServerAnswer) ProtoMessage() {}

func (x *ConfigurationServerAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationServerAnswer.ProtoReflect.Descriptor instead.
func (*ConfigurationServerAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{10}
}

type PortalPositionAnswer_PortalPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId      string                                        `protobuf:"bytes,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	DimensionId   string                                        `protobuf:"bytes,2,opt,name=dimensionId,proto3" json:"dimensionId,omitempty"`
	RemainingUses int32                                         `protobuf:"varint,3,opt,name=remainingUses,proto3" json:"remainingUses,omitempty"`
	Position      *PortalPositionAnswer_PortalPosition_Position `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
	CreatedBy     string                                        `protobuf:"bytes,5,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	UpdatedBy     string                                        `protobuf:"bytes,6,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
	CreatedAt     *timestamp.Timestamp                          `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt     *timestamp.Timestamp                          `protobuf:"bytes,8,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Source        *PortalPositionAnswer_PortalPosition_Source   `protobuf:"bytes,9,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *PortalPositionAnswer_PortalPosition) Reset() {
	*x = PortalPositionAnswer_PortalPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortalPositionAnswer_PortalPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalPositionAnswer_PortalPosition) ProtoMessage() {}

func (x *PortalPositionAnswer_PortalPosition) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalPositionAnswer_PortalPosition.ProtoReflect.Descriptor instead.
func (*PortalPositionAnswer_PortalPosition) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{4, 0}
}

func (x *PortalPositionAnswer_PortalPosition) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition) GetDimensionId() string {
	if x != nil {
		return x.DimensionId
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition) GetRemainingUses() int32 {
	if x != nil {
		return x.RemainingUses
	}
	return 0
}

func (x *PortalPositionAnswer_PortalPosition) GetPosition() *PortalPositionAnswer_PortalPosition_Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *PortalPositionAnswer_PortalPosition) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PortalPositionAnswer_PortalPosition) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PortalPositionAnswer_PortalPosition) GetSource() *PortalPositionAnswer_PortalPosition_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

type PortalPositionAnswer_PortalPosition_Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X                    int32                                                   `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y                    int32                                                   `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	IsInCanopy           bool                                                    `protobuf:"varint,3,opt,name=isInCanopy,proto3" json:"isInCanopy,omitempty"`
	Transport            *PortalPositionAnswer_PortalPosition_Position_Transport `protobuf:"bytes,4,opt,name=transport,proto3" json:"transport,omitempty"`
	ConditionalTransport *PortalPositionAnswer_PortalPosition_Position_Transport `protobuf:"bytes,5,opt,name=conditionalTransport,proto3" json:"conditionalTransport,omitempty"`
}

func (x *PortalPositionAnswer_PortalPosition_Position) Reset() {
	*x = PortalPositionAnswer_PortalPosition_Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortalPositionAnswer_PortalPosition_Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalPositionAnswer_PortalPosition_Position) ProtoMessage() {}

func (x *PortalPositionAnswer_PortalPosition_Position) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalPositionAnswer_PortalPosition_Position.ProtoReflect.Descriptor instead.
func (*PortalPositionAnswer_PortalPosition_Position) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{4, 0, 0}
}

func (x *PortalPositionAnswer_PortalPosition_Position) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *PortalPositionAnswer_PortalPosition_Position) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *PortalPositionAnswer_PortalPosition_Position) GetIsInCanopy() bool {
	if x != nil {
		return x.IsInCanopy
	}
	return false
}

func (x *PortalPositionAnswer_PortalPosition_Position) GetTransport() *PortalPositionAnswer_PortalPosition_Position_Transport {
	if x != nil {
		return x.Transport
	}
	return nil
}

func (x *PortalPositionAnswer_PortalPosition_Position) GetConditionalTransport() *PortalPositionAnswer_PortalPosition_Position_Transport {
	if x != nil {
		return x.ConditionalTransport
	}
	return nil
}

type PortalPositionAnswer_PortalPosition_Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Icon string `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	Url  string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *PortalPositionAnswer_PortalPosition_Source) Reset() {
	*x = PortalPositionAnswer_PortalPosition_Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortalPositionAnswer_PortalPosition_Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalPositionAnswer_PortalPosition_Source) ProtoMessage() {}

func (x *PortalPositionAnswer_PortalPosition_Source) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalPositionAnswer_PortalPosition_Source.ProtoReflect.Descriptor instead.
func (*PortalPositionAnswer_PortalPosition_Source) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{4, 0, 1}
}

func (x *PortalPositionAnswer_PortalPosition_Source) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition_Source) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition_Source) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type PortalPositionAnswer_PortalPosition_Position_Transport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaId    string `protobuf:"bytes,1,opt,name=areaId,proto3" json:"areaId,omitempty"`
	SubAreaId string `protobuf:"bytes,2,opt,name=subAreaId,proto3" json:"subAreaId,omitempty"`
	TypeId    string `protobuf:"bytes,3,opt,name=typeId,proto3" json:"typeId,omitempty"`
	X         int32  `protobuf:"varint,4,opt,name=x,proto3" json:"x,omitempty"`
	Y         int32  `protobuf:"varint,5,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) Reset() {
	*x = PortalPositionAnswer_PortalPosition_Position_Transport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalPositionAnswer_PortalPosition_Position_Transport) ProtoMessage() {}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalPositionAnswer_PortalPosition_Position_Transport.ProtoReflect.Descriptor instead.
func (*PortalPositionAnswer_PortalPosition_Position_Transport) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{4, 0, 0, 0}
}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) GetAreaId() string {
	if x != nil {
		return x.AreaId
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) GetSubAreaId() string {
	if x != nil {
		return x.SubAreaId
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) GetTypeId() string {
	if x != nil {
		return x.TypeId
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

var File_rabbitmq_proto protoreflect.FileDescriptor

var file_rabbitmq_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x6d, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x04, 0x61, 0x6d, 0x71, 0x70, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb9, 0x0b, 0x0a, 0x0f, 0x52, 0x61, 0x62, 0x62,
	0x69, 0x74, 0x4d, 0x51, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x6d, 0x71, 0x70,
	0x2e, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x4d, 0x51, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x61, 0x6d, 0x71, 0x70, 0x2e, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x4d, 0x51, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x52,
	0x61, 0x62, 0x62, 0x69, 0x74, 0x4d, 0x51, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a,
	0x12, 0x6e, 0x65, 0x77, 0x73, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6d, 0x71, 0x70,
	0x2e, 0x4e, 0x65, 0x77, 0x73, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x12, 0x6e, 0x65, 0x77, 0x73, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x73, 0x52,
	0x53, 0x53, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x53, 0x53, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x73, 0x52, 0x53, 0x53, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x15, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x15, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x14, 0x70, 0x6f, 0x72, 0x74,
	0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x52, 0x14, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x63, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x6d, 0x71, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x1b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x60, 0x0a,
	0x1a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12,
	0x63, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x60, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6d, 0x71,
	0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1a, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x6d,
	0x71, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x19, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0xb9, 0x02, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x4e, 0x45, 0x57, 0x53, 0x5f, 0x52, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4e,
	0x45, 0x57, 0x53, 0x5f, 0x54, 0x57, 0x49, 0x54, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1b, 0x0a,
	0x17, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x4c, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f,
	0x52, 0x54, 0x41, 0x4c, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e,
	0x53, 0x57, 0x45, 0x52, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c,
	0x41, 0x59, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x45, 0x42,
	0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x07, 0x12, 0x20,
	0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x57, 0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0x08,
	0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0x09, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45,
	0x52, 0x10, 0x0a, 0x22, 0x2b, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x46, 0x52, 0x10, 0x01,
	0x12, 0x06, 0x0a, 0x02, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x53, 0x10, 0x03,
	0x22, 0x21, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x01, 0x22, 0xd4, 0x01, 0x0a, 0x12, 0x4e, 0x65, 0x77, 0x73, 0x54, 0x77, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x24,
	0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x63, 0x6f,
	0x6e, 0x55, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xa2, 0x01, 0x0a, 0x0e, 0x4e,
	0x65, 0x77, 0x73, 0x52, 0x53, 0x53, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12,
	0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22,
	0x55, 0x0a, 0x15, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xf2, 0x07, 0x0a, 0x14, 0x50, 0x6f, 0x72, 0x74, 0x61,
	0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12,
	0x47, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x90, 0x07, 0x0a, 0x0e, 0x50, 0x6f, 0x72,
	0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x73, 0x12,
	0x4e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x48, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x8b, 0x03, 0x0a, 0x08, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x01, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x49, 0x6e, 0x43, 0x61, 0x6e, 0x6f, 0x70, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x49, 0x6e, 0x43, 0x61, 0x6e, 0x6f,
	0x70, 0x79, 0x12, 0x5a, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x70,
	0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61,
	0x6d, 0x71, 0x70, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x1a, 0x75, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x41, 0x72, 0x65, 0x61,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x41, 0x72, 0x65,
	0x61, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x1a, 0x42, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x37, 0x0a, 0x1b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x22, 0xe6, 0x01, 0x0a,
	0x1b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x46,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2a, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x2d, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4c, 0x4d, 0x41, 0x4e, 0x41, 0x58, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x52, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x57, 0x49, 0x54,
	0x54, 0x45, 0x52, 0x10, 0x02, 0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x22, 0x70, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x3b, 0x61, 0x6d, 0x71, 0x70, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rabbitmq_proto_rawDescOnce sync.Once
	file_rabbitmq_proto_rawDescData = file_rabbitmq_proto_rawDesc
)

func file_rabbitmq_proto_rawDescGZIP() []byte {
	file_rabbitmq_proto_rawDescOnce.Do(func() {
		file_rabbitmq_proto_rawDescData = protoimpl.X.CompressGZIP(file_rabbitmq_proto_rawDescData)
	})
	return file_rabbitmq_proto_rawDescData
}

var file_rabbitmq_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_rabbitmq_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_rabbitmq_proto_goTypes = []interface{}{
	(RabbitMQMessage_Type)(0),                                      // 0: amqp.RabbitMQMessage.Type
	(RabbitMQMessage_Language)(0),                                  // 1: amqp.RabbitMQMessage.Language
	(RabbitMQMessage_Status)(0),                                    // 2: amqp.RabbitMQMessage.Status
	(ConfigurationWebhookRequest_Provider)(0),                      // 3: amqp.ConfigurationWebhookRequest.Provider
	(*RabbitMQMessage)(nil),                                        // 4: amqp.RabbitMQMessage
	(*NewsTwitterMessage)(nil),                                     // 5: amqp.NewsTwitterMessage
	(*NewsRSSMessage)(nil),                                         // 6: amqp.NewsRSSMessage
	(*PortalPositionRequest)(nil),                                  // 7: amqp.PortalPositionRequest
	(*PortalPositionAnswer)(nil),                                   // 8: amqp.PortalPositionAnswer
	(*ConfigurationDisplayRequest)(nil),                            // 9: amqp.ConfigurationDisplayRequest
	(*ConfigurationDisplayAnswer)(nil),                             // 10: amqp.ConfigurationDisplayAnswer
	(*ConfigurationWebhookRequest)(nil),                            // 11: amqp.ConfigurationWebhookRequest
	(*ConfigurationWebhookAnswer)(nil),                             // 12: amqp.ConfigurationWebhookAnswer
	(*ConfigurationServerRequest)(nil),                             // 13: amqp.ConfigurationServerRequest
	(*ConfigurationServerAnswer)(nil),                              // 14: amqp.ConfigurationServerAnswer
	(*PortalPositionAnswer_PortalPosition)(nil),                    // 15: amqp.PortalPositionAnswer.PortalPosition
	(*PortalPositionAnswer_PortalPosition_Position)(nil),           // 16: amqp.PortalPositionAnswer.PortalPosition.Position
	(*PortalPositionAnswer_PortalPosition_Source)(nil),             // 17: amqp.PortalPositionAnswer.PortalPosition.Source
	(*PortalPositionAnswer_PortalPosition_Position_Transport)(nil), // 18: amqp.PortalPositionAnswer.PortalPosition.Position.Transport
	(*timestamp.Timestamp)(nil),                                    // 19: google.protobuf.Timestamp
}
var file_rabbitmq_proto_depIdxs = []int32{
	0,  // 0: amqp.RabbitMQMessage.type:type_name -> amqp.RabbitMQMessage.Type
	1,  // 1: amqp.RabbitMQMessage.language:type_name -> amqp.RabbitMQMessage.Language
	2,  // 2: amqp.RabbitMQMessage.status:type_name -> amqp.RabbitMQMessage.Status
	5,  // 3: amqp.RabbitMQMessage.newsTwitterMessage:type_name -> amqp.NewsTwitterMessage
	6,  // 4: amqp.RabbitMQMessage.newsRSSMessage:type_name -> amqp.NewsRSSMessage
	7,  // 5: amqp.RabbitMQMessage.portalPositionRequest:type_name -> amqp.PortalPositionRequest
	8,  // 6: amqp.RabbitMQMessage.portalPositionAnswer:type_name -> amqp.PortalPositionAnswer
	9,  // 7: amqp.RabbitMQMessage.configurationDisplayRequest:type_name -> amqp.ConfigurationDisplayRequest
	10, // 8: amqp.RabbitMQMessage.configurationDisplayAnswer:type_name -> amqp.ConfigurationDisplayAnswer
	11, // 9: amqp.RabbitMQMessage.configurationWebhookRequest:type_name -> amqp.ConfigurationWebhookRequest
	12, // 10: amqp.RabbitMQMessage.configurationWebhookAnswer:type_name -> amqp.ConfigurationWebhookAnswer
	13, // 11: amqp.RabbitMQMessage.configurationServerRequest:type_name -> amqp.ConfigurationServerRequest
	14, // 12: amqp.RabbitMQMessage.configurationServerAnswer:type_name -> amqp.ConfigurationServerAnswer
	19, // 13: amqp.NewsRSSMessage.date:type_name -> google.protobuf.Timestamp
	15, // 14: amqp.PortalPositionAnswer.positions:type_name -> amqp.PortalPositionAnswer.PortalPosition
	3,  // 15: amqp.ConfigurationWebhookRequest.provider:type_name -> amqp.ConfigurationWebhookRequest.Provider
	16, // 16: amqp.PortalPositionAnswer.PortalPosition.position:type_name -> amqp.PortalPositionAnswer.PortalPosition.Position
	19, // 17: amqp.PortalPositionAnswer.PortalPosition.createdAt:type_name -> google.protobuf.Timestamp
	19, // 18: amqp.PortalPositionAnswer.PortalPosition.updatedAt:type_name -> google.protobuf.Timestamp
	17, // 19: amqp.PortalPositionAnswer.PortalPosition.source:type_name -> amqp.PortalPositionAnswer.PortalPosition.Source
	18, // 20: amqp.PortalPositionAnswer.PortalPosition.Position.transport:type_name -> amqp.PortalPositionAnswer.PortalPosition.Position.Transport
	18, // 21: amqp.PortalPositionAnswer.PortalPosition.Position.conditionalTransport:type_name -> amqp.PortalPositionAnswer.PortalPosition.Position.Transport
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_rabbitmq_proto_init() }
func file_rabbitmq_proto_init() {
	if File_rabbitmq_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rabbitmq_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RabbitMQMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsTwitterMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsRSSMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortalPositionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortalPositionAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationDisplayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationDisplayAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationWebhookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationWebhookAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationServerAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortalPositionAnswer_PortalPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortalPositionAnswer_PortalPosition_Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortalPositionAnswer_PortalPosition_Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortalPositionAnswer_PortalPosition_Position_Transport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rabbitmq_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rabbitmq_proto_goTypes,
		DependencyIndexes: file_rabbitmq_proto_depIdxs,
		EnumInfos:         file_rabbitmq_proto_enumTypes,
		MessageInfos:      file_rabbitmq_proto_msgTypes,
	}.Build()
	File_rabbitmq_proto = out.File
	file_rabbitmq_proto_rawDesc = nil
	file_rabbitmq_proto_goTypes = nil
	file_rabbitmq_proto_depIdxs = nil
}
