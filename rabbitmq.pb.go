// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.6.1
// source: rabbitmq.proto

package amqp

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Game int32

const (
	Game_ANY_GAME    Game = 0
	Game_DOFUS_GAME  Game = 1
	Game_DOFUS_TOUCH Game = 2
	Game_DOFUS_RETRO Game = 3
)

// Enum value maps for Game.
var (
	Game_name = map[int32]string{
		0: "ANY_GAME",
		1: "DOFUS_GAME",
		2: "DOFUS_TOUCH",
		3: "DOFUS_RETRO",
	}
	Game_value = map[string]int32{
		"ANY_GAME":    0,
		"DOFUS_GAME":  1,
		"DOFUS_TOUCH": 2,
		"DOFUS_RETRO": 3,
	}
)

func (x Game) Enum() *Game {
	p := new(Game)
	*p = x
	return p
}

func (x Game) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Game) Descriptor() protoreflect.EnumDescriptor {
	return file_rabbitmq_proto_enumTypes[0].Descriptor()
}

func (Game) Type() protoreflect.EnumType {
	return &file_rabbitmq_proto_enumTypes[0]
}

func (x Game) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Game.Descriptor instead.
func (Game) EnumDescriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{0}
}

type Language int32

const (
	Language_ANY Language = 0
	Language_FR  Language = 1
	Language_EN  Language = 2
	Language_ES  Language = 3
	Language_DE  Language = 4
)

// Enum value maps for Language.
var (
	Language_name = map[int32]string{
		0: "ANY",
		1: "FR",
		2: "EN",
		3: "ES",
		4: "DE",
	}
	Language_value = map[string]int32{
		"ANY": 0,
		"FR":  1,
		"EN":  2,
		"ES":  3,
		"DE":  4,
	}
)

func (x Language) Enum() *Language {
	p := new(Language)
	*p = x
	return p
}

func (x Language) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Language) Descriptor() protoreflect.EnumDescriptor {
	return file_rabbitmq_proto_enumTypes[1].Descriptor()
}

func (Language) Type() protoreflect.EnumType {
	return &file_rabbitmq_proto_enumTypes[1]
}

func (x Language) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Language.Descriptor instead.
func (Language) EnumDescriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{1}
}

type EquipmentType int32

const (
	EquipmentType_NONE EquipmentType = 0
	// Equipment
	EquipmentType_AMULET       EquipmentType = 1
	EquipmentType_AXE          EquipmentType = 2
	EquipmentType_BELT         EquipmentType = 3
	EquipmentType_BOOT         EquipmentType = 4
	EquipmentType_BOW          EquipmentType = 5
	EquipmentType_CLOAK        EquipmentType = 6
	EquipmentType_DAGGER       EquipmentType = 7
	EquipmentType_DOFUS        EquipmentType = 8
	EquipmentType_DRAGOTURKEY  EquipmentType = 9
	EquipmentType_HAMMER       EquipmentType = 10
	EquipmentType_HAT          EquipmentType = 11
	EquipmentType_LANCE        EquipmentType = 12
	EquipmentType_PET          EquipmentType = 13
	EquipmentType_PETSMOUNT    EquipmentType = 14
	EquipmentType_PICKAXE      EquipmentType = 15
	EquipmentType_PRYSMARADITE EquipmentType = 16
	EquipmentType_RHINEETLE    EquipmentType = 17
	EquipmentType_RING         EquipmentType = 18
	EquipmentType_SCYTHE       EquipmentType = 19
	EquipmentType_SEEMYOOL     EquipmentType = 20
	EquipmentType_SHIELD       EquipmentType = 21
	EquipmentType_SHOVEL       EquipmentType = 22
	EquipmentType_STAFF        EquipmentType = 23
	EquipmentType_SWORD        EquipmentType = 24
	EquipmentType_TOOL         EquipmentType = 25
	EquipmentType_TROPHY       EquipmentType = 26
	EquipmentType_WAND         EquipmentType = 27
	// Cosmetic
	EquipmentType_COSTUME       EquipmentType = 28
	EquipmentType_LIVING_OBJECT EquipmentType = 29
	EquipmentType_MISC_COSMETIC EquipmentType = 30
	EquipmentType_SHOULDER_PAD  EquipmentType = 31
	EquipmentType_WING          EquipmentType = 32
)

// Enum value maps for EquipmentType.
var (
	EquipmentType_name = map[int32]string{
		0:  "NONE",
		1:  "AMULET",
		2:  "AXE",
		3:  "BELT",
		4:  "BOOT",
		5:  "BOW",
		6:  "CLOAK",
		7:  "DAGGER",
		8:  "DOFUS",
		9:  "DRAGOTURKEY",
		10: "HAMMER",
		11: "HAT",
		12: "LANCE",
		13: "PET",
		14: "PETSMOUNT",
		15: "PICKAXE",
		16: "PRYSMARADITE",
		17: "RHINEETLE",
		18: "RING",
		19: "SCYTHE",
		20: "SEEMYOOL",
		21: "SHIELD",
		22: "SHOVEL",
		23: "STAFF",
		24: "SWORD",
		25: "TOOL",
		26: "TROPHY",
		27: "WAND",
		28: "COSTUME",
		29: "LIVING_OBJECT",
		30: "MISC_COSMETIC",
		31: "SHOULDER_PAD",
		32: "WING",
	}
	EquipmentType_value = map[string]int32{
		"NONE":          0,
		"AMULET":        1,
		"AXE":           2,
		"BELT":          3,
		"BOOT":          4,
		"BOW":           5,
		"CLOAK":         6,
		"DAGGER":        7,
		"DOFUS":         8,
		"DRAGOTURKEY":   9,
		"HAMMER":        10,
		"HAT":           11,
		"LANCE":         12,
		"PET":           13,
		"PETSMOUNT":     14,
		"PICKAXE":       15,
		"PRYSMARADITE":  16,
		"RHINEETLE":     17,
		"RING":          18,
		"SCYTHE":        19,
		"SEEMYOOL":      20,
		"SHIELD":        21,
		"SHOVEL":        22,
		"STAFF":         23,
		"SWORD":         24,
		"TOOL":          25,
		"TROPHY":        26,
		"WAND":          27,
		"COSTUME":       28,
		"LIVING_OBJECT": 29,
		"MISC_COSMETIC": 30,
		"SHOULDER_PAD":  31,
		"WING":          32,
	}
)

func (x EquipmentType) Enum() *EquipmentType {
	p := new(EquipmentType)
	*p = x
	return p
}

func (x EquipmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EquipmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_rabbitmq_proto_enumTypes[2].Descriptor()
}

func (EquipmentType) Type() protoreflect.EnumType {
	return &file_rabbitmq_proto_enumTypes[2]
}

func (x EquipmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EquipmentType.Descriptor instead.
func (EquipmentType) EnumDescriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{2}
}

type ItemType int32

const (
	ItemType_ANY_ITEM_TYPE   ItemType = 0
	ItemType_CONSUMABLE_TYPE ItemType = 1
	ItemType_COSMETIC_TYPE   ItemType = 2
	ItemType_EQUIPMENT_TYPE  ItemType = 3
	ItemType_MOUNT_TYPE      ItemType = 4
	ItemType_QUEST_ITEM_TYPE ItemType = 5
	ItemType_RESOURCE_TYPE   ItemType = 6
	ItemType_SET_TYPE        ItemType = 7
)

// Enum value maps for ItemType.
var (
	ItemType_name = map[int32]string{
		0: "ANY_ITEM_TYPE",
		1: "CONSUMABLE_TYPE",
		2: "COSMETIC_TYPE",
		3: "EQUIPMENT_TYPE",
		4: "MOUNT_TYPE",
		5: "QUEST_ITEM_TYPE",
		6: "RESOURCE_TYPE",
		7: "SET_TYPE",
	}
	ItemType_value = map[string]int32{
		"ANY_ITEM_TYPE":   0,
		"CONSUMABLE_TYPE": 1,
		"COSMETIC_TYPE":   2,
		"EQUIPMENT_TYPE":  3,
		"MOUNT_TYPE":      4,
		"QUEST_ITEM_TYPE": 5,
		"RESOURCE_TYPE":   6,
		"SET_TYPE":        7,
	}
)

func (x ItemType) Enum() *ItemType {
	p := new(ItemType)
	*p = x
	return p
}

func (x ItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_rabbitmq_proto_enumTypes[3].Descriptor()
}

func (ItemType) Type() protoreflect.EnumType {
	return &file_rabbitmq_proto_enumTypes[3]
}

func (x ItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ItemType.Descriptor instead.
func (ItemType) EnumDescriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{3}
}

type RabbitMQMessage_Type int32

const (
	RabbitMQMessage_UNKNOWN                                   RabbitMQMessage_Type = 0
	RabbitMQMessage_ABOUT_REQUEST                             RabbitMQMessage_Type = 100
	RabbitMQMessage_ALIGN_GET_BOOK_REQUEST                    RabbitMQMessage_Type = 200
	RabbitMQMessage_ALIGN_GET_BOOK_ANSWER                     RabbitMQMessage_Type = 201
	RabbitMQMessage_ALIGN_GET_USER_REQUEST                    RabbitMQMessage_Type = 202
	RabbitMQMessage_ALIGN_GET_USER_ANSWER                     RabbitMQMessage_Type = 203
	RabbitMQMessage_ALIGN_SET_REQUEST                         RabbitMQMessage_Type = 204
	RabbitMQMessage_ALIGN_SET_ANSWER                          RabbitMQMessage_Type = 205
	RabbitMQMessage_COMPETITION_MAP_REQUEST                   RabbitMQMessage_Type = 300
	RabbitMQMessage_COMPETITION_MAP_ANSWER                    RabbitMQMessage_Type = 301
	RabbitMQMessage_CONFIGURATION_GET_REQUEST                 RabbitMQMessage_Type = 400
	RabbitMQMessage_CONFIGURATION_GET_ANSWER                  RabbitMQMessage_Type = 401
	RabbitMQMessage_CONFIGURATION_SET_SERVER_REQUEST          RabbitMQMessage_Type = 402
	RabbitMQMessage_CONFIGURATION_SET_ALMANAX_WEBHOOK_REQUEST RabbitMQMessage_Type = 403
	RabbitMQMessage_CONFIGURATION_SET_RSS_WEBHOOK_REQUEST     RabbitMQMessage_Type = 404
	RabbitMQMessage_CONFIGURATION_SET_TWITCH_WEBHOOK_REQUEST  RabbitMQMessage_Type = 405
	RabbitMQMessage_CONFIGURATION_SET_TWITTER_WEBHOOK_REQUEST RabbitMQMessage_Type = 406
	RabbitMQMessage_CONFIGURATION_SET_YOUTUBE_WEBHOOK_REQUEST RabbitMQMessage_Type = 407
	RabbitMQMessage_CONFIGURATION_SET_ANSWER                  RabbitMQMessage_Type = 450
	RabbitMQMessage_ENCYCLOPEDIA_ALMANAX_REQUEST              RabbitMQMessage_Type = 500
	RabbitMQMessage_ENCYCLOPEDIA_ALMANAX_ANSWER               RabbitMQMessage_Type = 501
	RabbitMQMessage_ENCYCLOPEDIA_ALMANAX_RESOURCE_REQUEST     RabbitMQMessage_Type = 502
	RabbitMQMessage_ENCYCLOPEDIA_ALMANAX_RESOURCE_ANSWER      RabbitMQMessage_Type = 503
	RabbitMQMessage_ENCYCLOPEDIA_ALMANAX_EFFECT_REQUEST       RabbitMQMessage_Type = 504
	RabbitMQMessage_ENCYCLOPEDIA_ALMANAX_EFFECT_ANSWER        RabbitMQMessage_Type = 505
	RabbitMQMessage_ENCYCLOPEDIA_LIST_REQUEST                 RabbitMQMessage_Type = 506
	RabbitMQMessage_ENCYCLOPEDIA_LIST_ANSWER                  RabbitMQMessage_Type = 507
	RabbitMQMessage_ENCYCLOPEDIA_ITEM_REQUEST                 RabbitMQMessage_Type = 508
	RabbitMQMessage_ENCYCLOPEDIA_ITEM_ANSWER                  RabbitMQMessage_Type = 509
	RabbitMQMessage_HELP_REQUEST                              RabbitMQMessage_Type = 600
	RabbitMQMessage_JOB_GET_BOOK_REQUEST                      RabbitMQMessage_Type = 700
	RabbitMQMessage_JOB_GET_BOOK_ANSWER                       RabbitMQMessage_Type = 701
	RabbitMQMessage_JOB_GET_USER_REQUEST                      RabbitMQMessage_Type = 702
	RabbitMQMessage_JOB_GET_USER_ANSWER                       RabbitMQMessage_Type = 703
	RabbitMQMessage_JOB_SET_REQUEST                           RabbitMQMessage_Type = 704
	RabbitMQMessage_JOB_SET_ANSWER                            RabbitMQMessage_Type = 705
	RabbitMQMessage_NEWS_RSS                                  RabbitMQMessage_Type = 800
	RabbitMQMessage_NEWS_TWITTER                              RabbitMQMessage_Type = 801
	RabbitMQMessage_PORTAL_POSITION_REQUEST                   RabbitMQMessage_Type = 900
	RabbitMQMessage_PORTAL_POSITION_ANSWER                    RabbitMQMessage_Type = 901
)

// Enum value maps for RabbitMQMessage_Type.
var (
	RabbitMQMessage_Type_name = map[int32]string{
		0:   "UNKNOWN",
		100: "ABOUT_REQUEST",
		200: "ALIGN_GET_BOOK_REQUEST",
		201: "ALIGN_GET_BOOK_ANSWER",
		202: "ALIGN_GET_USER_REQUEST",
		203: "ALIGN_GET_USER_ANSWER",
		204: "ALIGN_SET_REQUEST",
		205: "ALIGN_SET_ANSWER",
		300: "COMPETITION_MAP_REQUEST",
		301: "COMPETITION_MAP_ANSWER",
		400: "CONFIGURATION_GET_REQUEST",
		401: "CONFIGURATION_GET_ANSWER",
		402: "CONFIGURATION_SET_SERVER_REQUEST",
		403: "CONFIGURATION_SET_ALMANAX_WEBHOOK_REQUEST",
		404: "CONFIGURATION_SET_RSS_WEBHOOK_REQUEST",
		405: "CONFIGURATION_SET_TWITCH_WEBHOOK_REQUEST",
		406: "CONFIGURATION_SET_TWITTER_WEBHOOK_REQUEST",
		407: "CONFIGURATION_SET_YOUTUBE_WEBHOOK_REQUEST",
		450: "CONFIGURATION_SET_ANSWER",
		500: "ENCYCLOPEDIA_ALMANAX_REQUEST",
		501: "ENCYCLOPEDIA_ALMANAX_ANSWER",
		502: "ENCYCLOPEDIA_ALMANAX_RESOURCE_REQUEST",
		503: "ENCYCLOPEDIA_ALMANAX_RESOURCE_ANSWER",
		504: "ENCYCLOPEDIA_ALMANAX_EFFECT_REQUEST",
		505: "ENCYCLOPEDIA_ALMANAX_EFFECT_ANSWER",
		506: "ENCYCLOPEDIA_LIST_REQUEST",
		507: "ENCYCLOPEDIA_LIST_ANSWER",
		508: "ENCYCLOPEDIA_ITEM_REQUEST",
		509: "ENCYCLOPEDIA_ITEM_ANSWER",
		600: "HELP_REQUEST",
		700: "JOB_GET_BOOK_REQUEST",
		701: "JOB_GET_BOOK_ANSWER",
		702: "JOB_GET_USER_REQUEST",
		703: "JOB_GET_USER_ANSWER",
		704: "JOB_SET_REQUEST",
		705: "JOB_SET_ANSWER",
		800: "NEWS_RSS",
		801: "NEWS_TWITTER",
		900: "PORTAL_POSITION_REQUEST",
		901: "PORTAL_POSITION_ANSWER",
	}
	RabbitMQMessage_Type_value = map[string]int32{
		"UNKNOWN":                                   0,
		"ABOUT_REQUEST":                             100,
		"ALIGN_GET_BOOK_REQUEST":                    200,
		"ALIGN_GET_BOOK_ANSWER":                     201,
		"ALIGN_GET_USER_REQUEST":                    202,
		"ALIGN_GET_USER_ANSWER":                     203,
		"ALIGN_SET_REQUEST":                         204,
		"ALIGN_SET_ANSWER":                          205,
		"COMPETITION_MAP_REQUEST":                   300,
		"COMPETITION_MAP_ANSWER":                    301,
		"CONFIGURATION_GET_REQUEST":                 400,
		"CONFIGURATION_GET_ANSWER":                  401,
		"CONFIGURATION_SET_SERVER_REQUEST":          402,
		"CONFIGURATION_SET_ALMANAX_WEBHOOK_REQUEST": 403,
		"CONFIGURATION_SET_RSS_WEBHOOK_REQUEST":     404,
		"CONFIGURATION_SET_TWITCH_WEBHOOK_REQUEST":  405,
		"CONFIGURATION_SET_TWITTER_WEBHOOK_REQUEST": 406,
		"CONFIGURATION_SET_YOUTUBE_WEBHOOK_REQUEST": 407,
		"CONFIGURATION_SET_ANSWER":                  450,
		"ENCYCLOPEDIA_ALMANAX_REQUEST":              500,
		"ENCYCLOPEDIA_ALMANAX_ANSWER":               501,
		"ENCYCLOPEDIA_ALMANAX_RESOURCE_REQUEST":     502,
		"ENCYCLOPEDIA_ALMANAX_RESOURCE_ANSWER":      503,
		"ENCYCLOPEDIA_ALMANAX_EFFECT_REQUEST":       504,
		"ENCYCLOPEDIA_ALMANAX_EFFECT_ANSWER":        505,
		"ENCYCLOPEDIA_LIST_REQUEST":                 506,
		"ENCYCLOPEDIA_LIST_ANSWER":                  507,
		"ENCYCLOPEDIA_ITEM_REQUEST":                 508,
		"ENCYCLOPEDIA_ITEM_ANSWER":                  509,
		"HELP_REQUEST":                              600,
		"JOB_GET_BOOK_REQUEST":                      700,
		"JOB_GET_BOOK_ANSWER":                       701,
		"JOB_GET_USER_REQUEST":                      702,
		"JOB_GET_USER_ANSWER":                       703,
		"JOB_SET_REQUEST":                           704,
		"JOB_SET_ANSWER":                            705,
		"NEWS_RSS":                                  800,
		"NEWS_TWITTER":                              801,
		"PORTAL_POSITION_REQUEST":                   900,
		"PORTAL_POSITION_ANSWER":                    901,
	}
)

func (x RabbitMQMessage_Type) Enum() *RabbitMQMessage_Type {
	p := new(RabbitMQMessage_Type)
	*p = x
	return p
}

func (x RabbitMQMessage_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RabbitMQMessage_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_rabbitmq_proto_enumTypes[4].Descriptor()
}

func (RabbitMQMessage_Type) Type() protoreflect.EnumType {
	return &file_rabbitmq_proto_enumTypes[4]
}

func (x RabbitMQMessage_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RabbitMQMessage_Type.Descriptor instead.
func (RabbitMQMessage_Type) EnumDescriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{0, 0}
}

type RabbitMQMessage_Status int32

const (
	RabbitMQMessage_SUCCESS RabbitMQMessage_Status = 0
	RabbitMQMessage_FAILED  RabbitMQMessage_Status = 1
)

// Enum value maps for RabbitMQMessage_Status.
var (
	RabbitMQMessage_Status_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILED",
	}
	RabbitMQMessage_Status_value = map[string]int32{
		"SUCCESS": 0,
		"FAILED":  1,
	}
)

func (x RabbitMQMessage_Status) Enum() *RabbitMQMessage_Status {
	p := new(RabbitMQMessage_Status)
	*p = x
	return p
}

func (x RabbitMQMessage_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RabbitMQMessage_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_rabbitmq_proto_enumTypes[5].Descriptor()
}

func (RabbitMQMessage_Status) Type() protoreflect.EnumType {
	return &file_rabbitmq_proto_enumTypes[5]
}

func (x RabbitMQMessage_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RabbitMQMessage_Status.Descriptor instead.
func (RabbitMQMessage_Status) EnumDescriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{0, 1}
}

type EncyclopediaAlmanaxEffectRequest_RequestType int32

const (
	EncyclopediaAlmanaxEffectRequest_QUERY EncyclopediaAlmanaxEffectRequest_RequestType = 0
	EncyclopediaAlmanaxEffectRequest_DATE  EncyclopediaAlmanaxEffectRequest_RequestType = 1
)

// Enum value maps for EncyclopediaAlmanaxEffectRequest_RequestType.
var (
	EncyclopediaAlmanaxEffectRequest_RequestType_name = map[int32]string{
		0: "QUERY",
		1: "DATE",
	}
	EncyclopediaAlmanaxEffectRequest_RequestType_value = map[string]int32{
		"QUERY": 0,
		"DATE":  1,
	}
)

func (x EncyclopediaAlmanaxEffectRequest_RequestType) Enum() *EncyclopediaAlmanaxEffectRequest_RequestType {
	p := new(EncyclopediaAlmanaxEffectRequest_RequestType)
	*p = x
	return p
}

func (x EncyclopediaAlmanaxEffectRequest_RequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncyclopediaAlmanaxEffectRequest_RequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_rabbitmq_proto_enumTypes[6].Descriptor()
}

func (EncyclopediaAlmanaxEffectRequest_RequestType) Type() protoreflect.EnumType {
	return &file_rabbitmq_proto_enumTypes[6]
}

func (x EncyclopediaAlmanaxEffectRequest_RequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncyclopediaAlmanaxEffectRequest_RequestType.Descriptor instead.
func (EncyclopediaAlmanaxEffectRequest_RequestType) EnumDescriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{22, 0}
}

type EncyclopediaListRequest_Type int32

const (
	EncyclopediaListRequest_UNKNOWN        EncyclopediaListRequest_Type = 0
	EncyclopediaListRequest_ITEM           EncyclopediaListRequest_Type = 1
	EncyclopediaListRequest_SET            EncyclopediaListRequest_Type = 2
	EncyclopediaListRequest_ALMANAX_EFFECT EncyclopediaListRequest_Type = 3
)

// Enum value maps for EncyclopediaListRequest_Type.
var (
	EncyclopediaListRequest_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "ITEM",
		2: "SET",
		3: "ALMANAX_EFFECT",
	}
	EncyclopediaListRequest_Type_value = map[string]int32{
		"UNKNOWN":        0,
		"ITEM":           1,
		"SET":            2,
		"ALMANAX_EFFECT": 3,
	}
)

func (x EncyclopediaListRequest_Type) Enum() *EncyclopediaListRequest_Type {
	p := new(EncyclopediaListRequest_Type)
	*p = x
	return p
}

func (x EncyclopediaListRequest_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncyclopediaListRequest_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_rabbitmq_proto_enumTypes[7].Descriptor()
}

func (EncyclopediaListRequest_Type) Type() protoreflect.EnumType {
	return &file_rabbitmq_proto_enumTypes[7]
}

func (x EncyclopediaListRequest_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncyclopediaListRequest_Type.Descriptor instead.
func (EncyclopediaListRequest_Type) EnumDescriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{26, 0}
}

type EncyclopediaItemAnswer_Conditions_Relation int32

const (
	EncyclopediaItemAnswer_Conditions_NONE EncyclopediaItemAnswer_Conditions_Relation = 0
	EncyclopediaItemAnswer_Conditions_AND  EncyclopediaItemAnswer_Conditions_Relation = 1
	EncyclopediaItemAnswer_Conditions_OR   EncyclopediaItemAnswer_Conditions_Relation = 2
)

// Enum value maps for EncyclopediaItemAnswer_Conditions_Relation.
var (
	EncyclopediaItemAnswer_Conditions_Relation_name = map[int32]string{
		0: "NONE",
		1: "AND",
		2: "OR",
	}
	EncyclopediaItemAnswer_Conditions_Relation_value = map[string]int32{
		"NONE": 0,
		"AND":  1,
		"OR":   2,
	}
)

func (x EncyclopediaItemAnswer_Conditions_Relation) Enum() *EncyclopediaItemAnswer_Conditions_Relation {
	p := new(EncyclopediaItemAnswer_Conditions_Relation)
	*p = x
	return p
}

func (x EncyclopediaItemAnswer_Conditions_Relation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncyclopediaItemAnswer_Conditions_Relation) Descriptor() protoreflect.EnumDescriptor {
	return file_rabbitmq_proto_enumTypes[8].Descriptor()
}

func (EncyclopediaItemAnswer_Conditions_Relation) Type() protoreflect.EnumType {
	return &file_rabbitmq_proto_enumTypes[8]
}

func (x EncyclopediaItemAnswer_Conditions_Relation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncyclopediaItemAnswer_Conditions_Relation.Descriptor instead.
func (EncyclopediaItemAnswer_Conditions_Relation) EnumDescriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{29, 3, 0}
}

type RabbitMQMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                                  RabbitMQMessage_Type                   `protobuf:"varint,1,opt,name=type,proto3,enum=amqp.RabbitMQMessage_Type" json:"type,omitempty"`
	Language                              Language                               `protobuf:"varint,2,opt,name=language,proto3,enum=amqp.Language" json:"language,omitempty"`
	Status                                RabbitMQMessage_Status                 `protobuf:"varint,3,opt,name=status,proto3,enum=amqp.RabbitMQMessage_Status" json:"status,omitempty"`
	Game                                  Game                                   `protobuf:"varint,4,opt,name=game,proto3,enum=amqp.Game" json:"game,omitempty"`
	UserID                                string                                 `protobuf:"bytes,5,opt,name=userID,proto3" json:"userID,omitempty"`
	AlignGetBookRequest                   *AlignGetBookRequest                   `protobuf:"bytes,100,opt,name=alignGetBookRequest,proto3" json:"alignGetBookRequest,omitempty"`
	AlignGetBookAnswer                    *AlignGetBookAnswer                    `protobuf:"bytes,101,opt,name=alignGetBookAnswer,proto3" json:"alignGetBookAnswer,omitempty"`
	AlignGetUserRequest                   *AlignGetUserRequest                   `protobuf:"bytes,102,opt,name=alignGetUserRequest,proto3" json:"alignGetUserRequest,omitempty"`
	AlignGetUserAnswer                    *AlignGetUserAnswer                    `protobuf:"bytes,103,opt,name=alignGetUserAnswer,proto3" json:"alignGetUserAnswer,omitempty"`
	AlignSetRequest                       *AlignSetRequest                       `protobuf:"bytes,104,opt,name=alignSetRequest,proto3" json:"alignSetRequest,omitempty"`
	AlignSetAnswer                        *AlignSetAnswer                        `protobuf:"bytes,105,opt,name=alignSetAnswer,proto3" json:"alignSetAnswer,omitempty"`
	CompetitionMapRequest                 *CompetitionMapRequest                 `protobuf:"bytes,200,opt,name=competitionMapRequest,proto3" json:"competitionMapRequest,omitempty"`
	CompetitionMapAnswer                  *CompetitionMapAnswer                  `protobuf:"bytes,201,opt,name=competitionMapAnswer,proto3" json:"competitionMapAnswer,omitempty"`
	ConfigurationGetRequest               *ConfigurationGetRequest               `protobuf:"bytes,300,opt,name=configurationGetRequest,proto3" json:"configurationGetRequest,omitempty"`
	ConfigurationGetAnswer                *ConfigurationGetAnswer                `protobuf:"bytes,301,opt,name=configurationGetAnswer,proto3" json:"configurationGetAnswer,omitempty"`
	ConfigurationSetServerRequest         *ConfigurationSetServerRequest         `protobuf:"bytes,302,opt,name=configurationSetServerRequest,proto3" json:"configurationSetServerRequest,omitempty"`
	ConfigurationSetAlmanaxWebhookRequest *ConfigurationSetAlmanaxWebhookRequest `protobuf:"bytes,303,opt,name=configurationSetAlmanaxWebhookRequest,proto3" json:"configurationSetAlmanaxWebhookRequest,omitempty"`
	ConfigurationSetRssWebhookRequest     *ConfigurationSetRssWebhookRequest     `protobuf:"bytes,304,opt,name=configurationSetRssWebhookRequest,proto3" json:"configurationSetRssWebhookRequest,omitempty"`
	ConfigurationSetTwitchWebhookRequest  *ConfigurationSetTwitchWebhookRequest  `protobuf:"bytes,305,opt,name=configurationSetTwitchWebhookRequest,proto3" json:"configurationSetTwitchWebhookRequest,omitempty"`
	ConfigurationSetTwitterWebhookRequest *ConfigurationSetTwitterWebhookRequest `protobuf:"bytes,306,opt,name=configurationSetTwitterWebhookRequest,proto3" json:"configurationSetTwitterWebhookRequest,omitempty"`
	ConfigurationSetYoutubeWebhookRequest *ConfigurationSetYoutubeWebhookRequest `protobuf:"bytes,307,opt,name=configurationSetYoutubeWebhookRequest,proto3" json:"configurationSetYoutubeWebhookRequest,omitempty"`
	ConfigurationSetAnswer                *ConfigurationSetAnswer                `protobuf:"bytes,350,opt,name=configurationSetAnswer,proto3" json:"configurationSetAnswer,omitempty"`
	EncyclopediaAlmanaxRequest            *EncyclopediaAlmanaxRequest            `protobuf:"bytes,400,opt,name=encyclopediaAlmanaxRequest,proto3" json:"encyclopediaAlmanaxRequest,omitempty"`
	EncyclopediaAlmanaxAnswer             *EncyclopediaAlmanaxAnswer             `protobuf:"bytes,401,opt,name=encyclopediaAlmanaxAnswer,proto3" json:"encyclopediaAlmanaxAnswer,omitempty"`
	EncyclopediaAlmanaxResourceRequest    *EncyclopediaAlmanaxResourceRequest    `protobuf:"bytes,402,opt,name=encyclopediaAlmanaxResourceRequest,proto3" json:"encyclopediaAlmanaxResourceRequest,omitempty"`
	EncyclopediaAlmanaxResourceAnswer     *EncyclopediaAlmanaxResourceAnswer     `protobuf:"bytes,403,opt,name=encyclopediaAlmanaxResourceAnswer,proto3" json:"encyclopediaAlmanaxResourceAnswer,omitempty"`
	EncyclopediaAlmanaxEffectRequest      *EncyclopediaAlmanaxEffectRequest      `protobuf:"bytes,404,opt,name=encyclopediaAlmanaxEffectRequest,proto3" json:"encyclopediaAlmanaxEffectRequest,omitempty"`
	EncyclopediaAlmanaxEffectAnswer       *EncyclopediaAlmanaxEffectAnswer       `protobuf:"bytes,405,opt,name=encyclopediaAlmanaxEffectAnswer,proto3" json:"encyclopediaAlmanaxEffectAnswer,omitempty"`
	EncyclopediaListRequest               *EncyclopediaListRequest               `protobuf:"bytes,406,opt,name=encyclopediaListRequest,proto3" json:"encyclopediaListRequest,omitempty"`
	EncyclopediaListAnswer                *EncyclopediaListAnswer                `protobuf:"bytes,407,opt,name=encyclopediaListAnswer,proto3" json:"encyclopediaListAnswer,omitempty"`
	EncyclopediaItemRequest               *EncyclopediaItemRequest               `protobuf:"bytes,408,opt,name=encyclopediaItemRequest,proto3" json:"encyclopediaItemRequest,omitempty"`
	EncyclopediaItemAnswer                *EncyclopediaItemAnswer                `protobuf:"bytes,409,opt,name=encyclopediaItemAnswer,proto3" json:"encyclopediaItemAnswer,omitempty"`
	JobGetBookRequest                     *JobGetBookRequest                     `protobuf:"bytes,500,opt,name=jobGetBookRequest,proto3" json:"jobGetBookRequest,omitempty"`
	JobGetBookAnswer                      *JobGetBookAnswer                      `protobuf:"bytes,501,opt,name=jobGetBookAnswer,proto3" json:"jobGetBookAnswer,omitempty"`
	JobGetUserRequest                     *JobGetUserRequest                     `protobuf:"bytes,502,opt,name=jobGetUserRequest,proto3" json:"jobGetUserRequest,omitempty"`
	JobGetUserAnswer                      *JobGetUserAnswer                      `protobuf:"bytes,503,opt,name=jobGetUserAnswer,proto3" json:"jobGetUserAnswer,omitempty"`
	JobSetRequest                         *JobSetRequest                         `protobuf:"bytes,504,opt,name=jobSetRequest,proto3" json:"jobSetRequest,omitempty"`
	JobSetAnswer                          *JobSetAnswer                          `protobuf:"bytes,505,opt,name=jobSetAnswer,proto3" json:"jobSetAnswer,omitempty"`
	NewsAlmanaxMessage                    *NewsAlmanaxMessage                    `protobuf:"bytes,600,opt,name=newsAlmanaxMessage,proto3" json:"newsAlmanaxMessage,omitempty"`
	NewsTwitterMessage                    *NewsTwitterMessage                    `protobuf:"bytes,601,opt,name=newsTwitterMessage,proto3" json:"newsTwitterMessage,omitempty"`
	NewsRSSMessage                        *NewsRSSMessage                        `protobuf:"bytes,602,opt,name=newsRSSMessage,proto3" json:"newsRSSMessage,omitempty"`
	NewsGameMessage                       *NewsGameMessage                       `protobuf:"bytes,603,opt,name=newsGameMessage,proto3" json:"newsGameMessage,omitempty"`
	NewsSetMessage                        *NewsSetMessage                        `protobuf:"bytes,604,opt,name=newsSetMessage,proto3" json:"newsSetMessage,omitempty"`
	PortalPositionRequest                 *PortalPositionRequest                 `protobuf:"bytes,700,opt,name=portalPositionRequest,proto3" json:"portalPositionRequest,omitempty"`
	PortalPositionAnswer                  *PortalPositionAnswer                  `protobuf:"bytes,701,opt,name=portalPositionAnswer,proto3" json:"portalPositionAnswer,omitempty"`
}

func (x *RabbitMQMessage) Reset() {
	*x = RabbitMQMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RabbitMQMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RabbitMQMessage) ProtoMessage() {}

func (x *RabbitMQMessage) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RabbitMQMessage.ProtoReflect.Descriptor instead.
func (*RabbitMQMessage) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{0}
}

func (x *RabbitMQMessage) GetType() RabbitMQMessage_Type {
	if x != nil {
		return x.Type
	}
	return RabbitMQMessage_UNKNOWN
}

func (x *RabbitMQMessage) GetLanguage() Language {
	if x != nil {
		return x.Language
	}
	return Language_ANY
}

func (x *RabbitMQMessage) GetStatus() RabbitMQMessage_Status {
	if x != nil {
		return x.Status
	}
	return RabbitMQMessage_SUCCESS
}

func (x *RabbitMQMessage) GetGame() Game {
	if x != nil {
		return x.Game
	}
	return Game_ANY_GAME
}

func (x *RabbitMQMessage) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *RabbitMQMessage) GetAlignGetBookRequest() *AlignGetBookRequest {
	if x != nil {
		return x.AlignGetBookRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetAlignGetBookAnswer() *AlignGetBookAnswer {
	if x != nil {
		return x.AlignGetBookAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetAlignGetUserRequest() *AlignGetUserRequest {
	if x != nil {
		return x.AlignGetUserRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetAlignGetUserAnswer() *AlignGetUserAnswer {
	if x != nil {
		return x.AlignGetUserAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetAlignSetRequest() *AlignSetRequest {
	if x != nil {
		return x.AlignSetRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetAlignSetAnswer() *AlignSetAnswer {
	if x != nil {
		return x.AlignSetAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetCompetitionMapRequest() *CompetitionMapRequest {
	if x != nil {
		return x.CompetitionMapRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetCompetitionMapAnswer() *CompetitionMapAnswer {
	if x != nil {
		return x.CompetitionMapAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetConfigurationGetRequest() *ConfigurationGetRequest {
	if x != nil {
		return x.ConfigurationGetRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetConfigurationGetAnswer() *ConfigurationGetAnswer {
	if x != nil {
		return x.ConfigurationGetAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetConfigurationSetServerRequest() *ConfigurationSetServerRequest {
	if x != nil {
		return x.ConfigurationSetServerRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetConfigurationSetAlmanaxWebhookRequest() *ConfigurationSetAlmanaxWebhookRequest {
	if x != nil {
		return x.ConfigurationSetAlmanaxWebhookRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetConfigurationSetRssWebhookRequest() *ConfigurationSetRssWebhookRequest {
	if x != nil {
		return x.ConfigurationSetRssWebhookRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetConfigurationSetTwitchWebhookRequest() *ConfigurationSetTwitchWebhookRequest {
	if x != nil {
		return x.ConfigurationSetTwitchWebhookRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetConfigurationSetTwitterWebhookRequest() *ConfigurationSetTwitterWebhookRequest {
	if x != nil {
		return x.ConfigurationSetTwitterWebhookRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetConfigurationSetYoutubeWebhookRequest() *ConfigurationSetYoutubeWebhookRequest {
	if x != nil {
		return x.ConfigurationSetYoutubeWebhookRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetConfigurationSetAnswer() *ConfigurationSetAnswer {
	if x != nil {
		return x.ConfigurationSetAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetEncyclopediaAlmanaxRequest() *EncyclopediaAlmanaxRequest {
	if x != nil {
		return x.EncyclopediaAlmanaxRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetEncyclopediaAlmanaxAnswer() *EncyclopediaAlmanaxAnswer {
	if x != nil {
		return x.EncyclopediaAlmanaxAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetEncyclopediaAlmanaxResourceRequest() *EncyclopediaAlmanaxResourceRequest {
	if x != nil {
		return x.EncyclopediaAlmanaxResourceRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetEncyclopediaAlmanaxResourceAnswer() *EncyclopediaAlmanaxResourceAnswer {
	if x != nil {
		return x.EncyclopediaAlmanaxResourceAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetEncyclopediaAlmanaxEffectRequest() *EncyclopediaAlmanaxEffectRequest {
	if x != nil {
		return x.EncyclopediaAlmanaxEffectRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetEncyclopediaAlmanaxEffectAnswer() *EncyclopediaAlmanaxEffectAnswer {
	if x != nil {
		return x.EncyclopediaAlmanaxEffectAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetEncyclopediaListRequest() *EncyclopediaListRequest {
	if x != nil {
		return x.EncyclopediaListRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetEncyclopediaListAnswer() *EncyclopediaListAnswer {
	if x != nil {
		return x.EncyclopediaListAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetEncyclopediaItemRequest() *EncyclopediaItemRequest {
	if x != nil {
		return x.EncyclopediaItemRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetEncyclopediaItemAnswer() *EncyclopediaItemAnswer {
	if x != nil {
		return x.EncyclopediaItemAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetJobGetBookRequest() *JobGetBookRequest {
	if x != nil {
		return x.JobGetBookRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetJobGetBookAnswer() *JobGetBookAnswer {
	if x != nil {
		return x.JobGetBookAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetJobGetUserRequest() *JobGetUserRequest {
	if x != nil {
		return x.JobGetUserRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetJobGetUserAnswer() *JobGetUserAnswer {
	if x != nil {
		return x.JobGetUserAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetJobSetRequest() *JobSetRequest {
	if x != nil {
		return x.JobSetRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetJobSetAnswer() *JobSetAnswer {
	if x != nil {
		return x.JobSetAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetNewsAlmanaxMessage() *NewsAlmanaxMessage {
	if x != nil {
		return x.NewsAlmanaxMessage
	}
	return nil
}

func (x *RabbitMQMessage) GetNewsTwitterMessage() *NewsTwitterMessage {
	if x != nil {
		return x.NewsTwitterMessage
	}
	return nil
}

func (x *RabbitMQMessage) GetNewsRSSMessage() *NewsRSSMessage {
	if x != nil {
		return x.NewsRSSMessage
	}
	return nil
}

func (x *RabbitMQMessage) GetNewsGameMessage() *NewsGameMessage {
	if x != nil {
		return x.NewsGameMessage
	}
	return nil
}

func (x *RabbitMQMessage) GetNewsSetMessage() *NewsSetMessage {
	if x != nil {
		return x.NewsSetMessage
	}
	return nil
}

func (x *RabbitMQMessage) GetPortalPositionRequest() *PortalPositionRequest {
	if x != nil {
		return x.PortalPositionRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetPortalPositionAnswer() *PortalPositionAnswer {
	if x != nil {
		return x.PortalPositionAnswer
	}
	return nil
}

type Almanax struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bonus   string               `protobuf:"bytes,1,opt,name=bonus,proto3" json:"bonus,omitempty"`
	Tribute *Almanax_Tribute     `protobuf:"bytes,2,opt,name=tribute,proto3" json:"tribute,omitempty"`
	Reward  int64                `protobuf:"varint,3,opt,name=reward,proto3" json:"reward,omitempty"`
	Date    *timestamp.Timestamp `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *Almanax) Reset() {
	*x = Almanax{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Almanax) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Almanax) ProtoMessage() {}

func (x *Almanax) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Almanax.ProtoReflect.Descriptor instead.
func (*Almanax) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{1}
}

func (x *Almanax) GetBonus() string {
	if x != nil {
		return x.Bonus
	}
	return ""
}

func (x *Almanax) GetTribute() *Almanax_Tribute {
	if x != nil {
		return x.Tribute
	}
	return nil
}

func (x *Almanax) GetReward() int64 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *Almanax) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Icon string `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	Url  string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Source) Reset() {
	*x = Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{2}
}

func (x *Source) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Source) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Source) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type AlignGetBookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds  []string `protobuf:"bytes,1,rep,name=userIds,proto3" json:"userIds,omitempty"`
	CityId   string   `protobuf:"bytes,2,opt,name=cityId,proto3" json:"cityId,omitempty"`
	OrderId  string   `protobuf:"bytes,3,opt,name=orderId,proto3" json:"orderId,omitempty"`
	ServerId string   `protobuf:"bytes,4,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Offset   int32    `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Size     int32    `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *AlignGetBookRequest) Reset() {
	*x = AlignGetBookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlignGetBookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlignGetBookRequest) ProtoMessage() {}

func (x *AlignGetBookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlignGetBookRequest.ProtoReflect.Descriptor instead.
func (*AlignGetBookRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{3}
}

func (x *AlignGetBookRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *AlignGetBookRequest) GetCityId() string {
	if x != nil {
		return x.CityId
	}
	return ""
}

func (x *AlignGetBookRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *AlignGetBookRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *AlignGetBookRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *AlignGetBookRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type AlignGetBookAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CityId    string                         `protobuf:"bytes,1,opt,name=cityId,proto3" json:"cityId,omitempty"`
	OrderId   string                         `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`
	ServerId  string                         `protobuf:"bytes,3,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Page      int32                          `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Pages     int32                          `protobuf:"varint,5,opt,name=pages,proto3" json:"pages,omitempty"`
	Total     int32                          `protobuf:"varint,6,opt,name=total,proto3" json:"total,omitempty"`
	Believers []*AlignGetBookAnswer_Believer `protobuf:"bytes,7,rep,name=believers,proto3" json:"believers,omitempty"`
}

func (x *AlignGetBookAnswer) Reset() {
	*x = AlignGetBookAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlignGetBookAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlignGetBookAnswer) ProtoMessage() {}

func (x *AlignGetBookAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlignGetBookAnswer.ProtoReflect.Descriptor instead.
func (*AlignGetBookAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{4}
}

func (x *AlignGetBookAnswer) GetCityId() string {
	if x != nil {
		return x.CityId
	}
	return ""
}

func (x *AlignGetBookAnswer) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *AlignGetBookAnswer) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *AlignGetBookAnswer) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *AlignGetBookAnswer) GetPages() int32 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *AlignGetBookAnswer) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *AlignGetBookAnswer) GetBelievers() []*AlignGetBookAnswer_Believer {
	if x != nil {
		return x.Believers
	}
	return nil
}

type AlignGetUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	ServerId string `protobuf:"bytes,2,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *AlignGetUserRequest) Reset() {
	*x = AlignGetUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlignGetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlignGetUserRequest) ProtoMessage() {}

func (x *AlignGetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlignGetUserRequest.ProtoReflect.Descriptor instead.
func (*AlignGetUserRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{5}
}

func (x *AlignGetUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AlignGetUserRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

type AlignGetUserAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId string                                `protobuf:"bytes,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Beliefs  []*AlignGetUserAnswer_AlignExperience `protobuf:"bytes,2,rep,name=beliefs,proto3" json:"beliefs,omitempty"`
}

func (x *AlignGetUserAnswer) Reset() {
	*x = AlignGetUserAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlignGetUserAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlignGetUserAnswer) ProtoMessage() {}

func (x *AlignGetUserAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlignGetUserAnswer.ProtoReflect.Descriptor instead.
func (*AlignGetUserAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{6}
}

func (x *AlignGetUserAnswer) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *AlignGetUserAnswer) GetBeliefs() []*AlignGetUserAnswer_AlignExperience {
	if x != nil {
		return x.Beliefs
	}
	return nil
}

type AlignSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	CityId   string `protobuf:"bytes,2,opt,name=cityId,proto3" json:"cityId,omitempty"`
	OrderId  string `protobuf:"bytes,3,opt,name=orderId,proto3" json:"orderId,omitempty"`
	ServerId string `protobuf:"bytes,4,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Level    int64  `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *AlignSetRequest) Reset() {
	*x = AlignSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlignSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlignSetRequest) ProtoMessage() {}

func (x *AlignSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlignSetRequest.ProtoReflect.Descriptor instead.
func (*AlignSetRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{7}
}

func (x *AlignSetRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AlignSetRequest) GetCityId() string {
	if x != nil {
		return x.CityId
	}
	return ""
}

func (x *AlignSetRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *AlignSetRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *AlignSetRequest) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

type AlignSetAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AlignSetAnswer) Reset() {
	*x = AlignSetAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlignSetAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlignSetAnswer) ProtoMessage() {}

func (x *AlignSetAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlignSetAnswer.ProtoReflect.Descriptor instead.
func (*AlignSetAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{8}
}

type CompetitionMapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 0    = random
	// 1-50 = selected map
	MapNumber int64 `protobuf:"varint,1,opt,name=mapNumber,proto3" json:"mapNumber,omitempty"`
}

func (x *CompetitionMapRequest) Reset() {
	*x = CompetitionMapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompetitionMapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompetitionMapRequest) ProtoMessage() {}

func (x *CompetitionMapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompetitionMapRequest.ProtoReflect.Descriptor instead.
func (*CompetitionMapRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{9}
}

func (x *CompetitionMapRequest) GetMapNumber() int64 {
	if x != nil {
		return x.MapNumber
	}
	return 0
}

type CompetitionMapAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapNumber      int64   `protobuf:"varint,1,opt,name=mapNumber,proto3" json:"mapNumber,omitempty"`
	MapNormalURL   string  `protobuf:"bytes,2,opt,name=mapNormalURL,proto3" json:"mapNormalURL,omitempty"`
	MapTacticalURL string  `protobuf:"bytes,3,opt,name=mapTacticalURL,proto3" json:"mapTacticalURL,omitempty"`
	Source         *Source `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *CompetitionMapAnswer) Reset() {
	*x = CompetitionMapAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompetitionMapAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompetitionMapAnswer) ProtoMessage() {}

func (x *CompetitionMapAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompetitionMapAnswer.ProtoReflect.Descriptor instead.
func (*CompetitionMapAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{10}
}

func (x *CompetitionMapAnswer) GetMapNumber() int64 {
	if x != nil {
		return x.MapNumber
	}
	return 0
}

func (x *CompetitionMapAnswer) GetMapNormalURL() string {
	if x != nil {
		return x.MapNormalURL
	}
	return ""
}

func (x *CompetitionMapAnswer) GetMapTacticalURL() string {
	if x != nil {
		return x.MapTacticalURL
	}
	return ""
}

func (x *CompetitionMapAnswer) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

type ConfigurationGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId string `protobuf:"bytes,1,opt,name=guildId,proto3" json:"guildId,omitempty"`
}

func (x *ConfigurationGetRequest) Reset() {
	*x = ConfigurationGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationGetRequest) ProtoMessage() {}

func (x *ConfigurationGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationGetRequest.ProtoReflect.Descriptor instead.
func (*ConfigurationGetRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{11}
}

func (x *ConfigurationGetRequest) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

type ConfigurationGetAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId         string                                   `protobuf:"bytes,1,opt,name=guildId,proto3" json:"guildId,omitempty"`
	ServerId        string                                   `protobuf:"bytes,2,opt,name=serverId,proto3" json:"serverId,omitempty"`
	ChannelServers  []*ConfigurationGetAnswer_ChannelServer  `protobuf:"bytes,3,rep,name=channelServers,proto3" json:"channelServers,omitempty"`
	AlmanaxWebhooks []*ConfigurationGetAnswer_AlmanaxWebhook `protobuf:"bytes,4,rep,name=almanaxWebhooks,proto3" json:"almanaxWebhooks,omitempty"`
	RssWebhooks     []*ConfigurationGetAnswer_RssWebhook     `protobuf:"bytes,5,rep,name=rssWebhooks,proto3" json:"rssWebhooks,omitempty"`
	TwitchWebhooks  []*ConfigurationGetAnswer_TwitchWebhook  `protobuf:"bytes,6,rep,name=twitchWebhooks,proto3" json:"twitchWebhooks,omitempty"`
	TwitterWebhooks []*ConfigurationGetAnswer_TwitterWebhook `protobuf:"bytes,7,rep,name=twitterWebhooks,proto3" json:"twitterWebhooks,omitempty"`
	YoutubeWebhooks []*ConfigurationGetAnswer_YoutubeWebhook `protobuf:"bytes,8,rep,name=youtubeWebhooks,proto3" json:"youtubeWebhooks,omitempty"`
}

func (x *ConfigurationGetAnswer) Reset() {
	*x = ConfigurationGetAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationGetAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationGetAnswer) ProtoMessage() {}

func (x *ConfigurationGetAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationGetAnswer.ProtoReflect.Descriptor instead.
func (*ConfigurationGetAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{12}
}

func (x *ConfigurationGetAnswer) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *ConfigurationGetAnswer) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *ConfigurationGetAnswer) GetChannelServers() []*ConfigurationGetAnswer_ChannelServer {
	if x != nil {
		return x.ChannelServers
	}
	return nil
}

func (x *ConfigurationGetAnswer) GetAlmanaxWebhooks() []*ConfigurationGetAnswer_AlmanaxWebhook {
	if x != nil {
		return x.AlmanaxWebhooks
	}
	return nil
}

func (x *ConfigurationGetAnswer) GetRssWebhooks() []*ConfigurationGetAnswer_RssWebhook {
	if x != nil {
		return x.RssWebhooks
	}
	return nil
}

func (x *ConfigurationGetAnswer) GetTwitchWebhooks() []*ConfigurationGetAnswer_TwitchWebhook {
	if x != nil {
		return x.TwitchWebhooks
	}
	return nil
}

func (x *ConfigurationGetAnswer) GetTwitterWebhooks() []*ConfigurationGetAnswer_TwitterWebhook {
	if x != nil {
		return x.TwitterWebhooks
	}
	return nil
}

func (x *ConfigurationGetAnswer) GetYoutubeWebhooks() []*ConfigurationGetAnswer_YoutubeWebhook {
	if x != nil {
		return x.YoutubeWebhooks
	}
	return nil
}

type ConfigurationSetServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId   string `protobuf:"bytes,1,opt,name=guildId,proto3" json:"guildId,omitempty"`
	ChannelId string `protobuf:"bytes,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	ServerId  string `protobuf:"bytes,3,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *ConfigurationSetServerRequest) Reset() {
	*x = ConfigurationSetServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationSetServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationSetServerRequest) ProtoMessage() {}

func (x *ConfigurationSetServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationSetServerRequest.ProtoReflect.Descriptor instead.
func (*ConfigurationSetServerRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{13}
}

func (x *ConfigurationSetServerRequest) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *ConfigurationSetServerRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ConfigurationSetServerRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

type ConfigurationSetAlmanaxWebhookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId      string `protobuf:"bytes,1,opt,name=guildId,proto3" json:"guildId,omitempty"`
	ChannelId    string `protobuf:"bytes,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	WebhookId    string `protobuf:"bytes,3,opt,name=webhookId,proto3" json:"webhookId,omitempty"`
	WebhookToken string `protobuf:"bytes,4,opt,name=webhookToken,proto3" json:"webhookToken,omitempty"`
	Enabled      bool   `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *ConfigurationSetAlmanaxWebhookRequest) Reset() {
	*x = ConfigurationSetAlmanaxWebhookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationSetAlmanaxWebhookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationSetAlmanaxWebhookRequest) ProtoMessage() {}

func (x *ConfigurationSetAlmanaxWebhookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationSetAlmanaxWebhookRequest.ProtoReflect.Descriptor instead.
func (*ConfigurationSetAlmanaxWebhookRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{14}
}

func (x *ConfigurationSetAlmanaxWebhookRequest) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *ConfigurationSetAlmanaxWebhookRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ConfigurationSetAlmanaxWebhookRequest) GetWebhookId() string {
	if x != nil {
		return x.WebhookId
	}
	return ""
}

func (x *ConfigurationSetAlmanaxWebhookRequest) GetWebhookToken() string {
	if x != nil {
		return x.WebhookToken
	}
	return ""
}

func (x *ConfigurationSetAlmanaxWebhookRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type ConfigurationSetRssWebhookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId      string `protobuf:"bytes,1,opt,name=guildId,proto3" json:"guildId,omitempty"`
	ChannelId    string `protobuf:"bytes,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	FeedId       string `protobuf:"bytes,3,opt,name=feedId,proto3" json:"feedId,omitempty"`
	WebhookId    string `protobuf:"bytes,4,opt,name=webhookId,proto3" json:"webhookId,omitempty"`
	WebhookToken string `protobuf:"bytes,5,opt,name=webhookToken,proto3" json:"webhookToken,omitempty"`
	Enabled      bool   `protobuf:"varint,6,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *ConfigurationSetRssWebhookRequest) Reset() {
	*x = ConfigurationSetRssWebhookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationSetRssWebhookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationSetRssWebhookRequest) ProtoMessage() {}

func (x *ConfigurationSetRssWebhookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationSetRssWebhookRequest.ProtoReflect.Descriptor instead.
func (*ConfigurationSetRssWebhookRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{15}
}

func (x *ConfigurationSetRssWebhookRequest) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *ConfigurationSetRssWebhookRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ConfigurationSetRssWebhookRequest) GetFeedId() string {
	if x != nil {
		return x.FeedId
	}
	return ""
}

func (x *ConfigurationSetRssWebhookRequest) GetWebhookId() string {
	if x != nil {
		return x.WebhookId
	}
	return ""
}

func (x *ConfigurationSetRssWebhookRequest) GetWebhookToken() string {
	if x != nil {
		return x.WebhookToken
	}
	return ""
}

func (x *ConfigurationSetRssWebhookRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type ConfigurationSetTwitchWebhookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId      string `protobuf:"bytes,1,opt,name=guildId,proto3" json:"guildId,omitempty"`
	ChannelId    string `protobuf:"bytes,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	StreamerId   string `protobuf:"bytes,3,opt,name=streamerId,proto3" json:"streamerId,omitempty"`
	WebhookId    string `protobuf:"bytes,4,opt,name=webhookId,proto3" json:"webhookId,omitempty"`
	WebhookToken string `protobuf:"bytes,5,opt,name=webhookToken,proto3" json:"webhookToken,omitempty"`
	Enabled      bool   `protobuf:"varint,6,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *ConfigurationSetTwitchWebhookRequest) Reset() {
	*x = ConfigurationSetTwitchWebhookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationSetTwitchWebhookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationSetTwitchWebhookRequest) ProtoMessage() {}

func (x *ConfigurationSetTwitchWebhookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationSetTwitchWebhookRequest.ProtoReflect.Descriptor instead.
func (*ConfigurationSetTwitchWebhookRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{16}
}

func (x *ConfigurationSetTwitchWebhookRequest) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *ConfigurationSetTwitchWebhookRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ConfigurationSetTwitchWebhookRequest) GetStreamerId() string {
	if x != nil {
		return x.StreamerId
	}
	return ""
}

func (x *ConfigurationSetTwitchWebhookRequest) GetWebhookId() string {
	if x != nil {
		return x.WebhookId
	}
	return ""
}

func (x *ConfigurationSetTwitchWebhookRequest) GetWebhookToken() string {
	if x != nil {
		return x.WebhookToken
	}
	return ""
}

func (x *ConfigurationSetTwitchWebhookRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type ConfigurationSetTwitterWebhookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId      string `protobuf:"bytes,1,opt,name=guildId,proto3" json:"guildId,omitempty"`
	ChannelId    string `protobuf:"bytes,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	TwitterId    string `protobuf:"bytes,3,opt,name=twitterId,proto3" json:"twitterId,omitempty"`
	WebhookId    string `protobuf:"bytes,4,opt,name=webhookId,proto3" json:"webhookId,omitempty"`
	WebhookToken string `protobuf:"bytes,5,opt,name=webhookToken,proto3" json:"webhookToken,omitempty"`
	Enabled      bool   `protobuf:"varint,6,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *ConfigurationSetTwitterWebhookRequest) Reset() {
	*x = ConfigurationSetTwitterWebhookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationSetTwitterWebhookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationSetTwitterWebhookRequest) ProtoMessage() {}

func (x *ConfigurationSetTwitterWebhookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationSetTwitterWebhookRequest.ProtoReflect.Descriptor instead.
func (*ConfigurationSetTwitterWebhookRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{17}
}

func (x *ConfigurationSetTwitterWebhookRequest) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *ConfigurationSetTwitterWebhookRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ConfigurationSetTwitterWebhookRequest) GetTwitterId() string {
	if x != nil {
		return x.TwitterId
	}
	return ""
}

func (x *ConfigurationSetTwitterWebhookRequest) GetWebhookId() string {
	if x != nil {
		return x.WebhookId
	}
	return ""
}

func (x *ConfigurationSetTwitterWebhookRequest) GetWebhookToken() string {
	if x != nil {
		return x.WebhookToken
	}
	return ""
}

func (x *ConfigurationSetTwitterWebhookRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type ConfigurationSetYoutubeWebhookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId      string `protobuf:"bytes,1,opt,name=guildId,proto3" json:"guildId,omitempty"`
	ChannelId    string `protobuf:"bytes,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	VideastId    string `protobuf:"bytes,3,opt,name=videastId,proto3" json:"videastId,omitempty"`
	WebhookId    string `protobuf:"bytes,4,opt,name=webhookId,proto3" json:"webhookId,omitempty"`
	WebhookToken string `protobuf:"bytes,5,opt,name=webhookToken,proto3" json:"webhookToken,omitempty"`
	Enabled      bool   `protobuf:"varint,6,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *ConfigurationSetYoutubeWebhookRequest) Reset() {
	*x = ConfigurationSetYoutubeWebhookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationSetYoutubeWebhookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationSetYoutubeWebhookRequest) ProtoMessage() {}

func (x *ConfigurationSetYoutubeWebhookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationSetYoutubeWebhookRequest.ProtoReflect.Descriptor instead.
func (*ConfigurationSetYoutubeWebhookRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{18}
}

func (x *ConfigurationSetYoutubeWebhookRequest) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *ConfigurationSetYoutubeWebhookRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ConfigurationSetYoutubeWebhookRequest) GetVideastId() string {
	if x != nil {
		return x.VideastId
	}
	return ""
}

func (x *ConfigurationSetYoutubeWebhookRequest) GetWebhookId() string {
	if x != nil {
		return x.WebhookId
	}
	return ""
}

func (x *ConfigurationSetYoutubeWebhookRequest) GetWebhookToken() string {
	if x != nil {
		return x.WebhookToken
	}
	return ""
}

func (x *ConfigurationSetYoutubeWebhookRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type ConfigurationSetAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebhookId     string `protobuf:"bytes,1,opt,name=webhookId,proto3" json:"webhookId,omitempty"`
	RemoveWebhook bool   `protobuf:"varint,2,opt,name=removeWebhook,proto3" json:"removeWebhook,omitempty"`
}

func (x *ConfigurationSetAnswer) Reset() {
	*x = ConfigurationSetAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationSetAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationSetAnswer) ProtoMessage() {}

func (x *ConfigurationSetAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationSetAnswer.ProtoReflect.Descriptor instead.
func (*ConfigurationSetAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{19}
}

func (x *ConfigurationSetAnswer) GetWebhookId() string {
	if x != nil {
		return x.WebhookId
	}
	return ""
}

func (x *ConfigurationSetAnswer) GetRemoveWebhook() bool {
	if x != nil {
		return x.RemoveWebhook
	}
	return false
}

type EncyclopediaAlmanaxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date *timestamp.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *EncyclopediaAlmanaxRequest) Reset() {
	*x = EncyclopediaAlmanaxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaAlmanaxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaAlmanaxRequest) ProtoMessage() {}

func (x *EncyclopediaAlmanaxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaAlmanaxRequest.ProtoReflect.Descriptor instead.
func (*EncyclopediaAlmanaxRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{20}
}

func (x *EncyclopediaAlmanaxRequest) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type EncyclopediaAlmanaxAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Almanax *Almanax `protobuf:"bytes,1,opt,name=almanax,proto3" json:"almanax,omitempty"`
	Source  *Source  `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *EncyclopediaAlmanaxAnswer) Reset() {
	*x = EncyclopediaAlmanaxAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaAlmanaxAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaAlmanaxAnswer) ProtoMessage() {}

func (x *EncyclopediaAlmanaxAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaAlmanaxAnswer.ProtoReflect.Descriptor instead.
func (*EncyclopediaAlmanaxAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{21}
}

func (x *EncyclopediaAlmanaxAnswer) GetAlmanax() *Almanax {
	if x != nil {
		return x.Almanax
	}
	return nil
}

func (x *EncyclopediaAlmanaxAnswer) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

type EncyclopediaAlmanaxEffectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query  string                                       `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Date   *timestamp.Timestamp                         `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	Type   EncyclopediaAlmanaxEffectRequest_RequestType `protobuf:"varint,3,opt,name=type,proto3,enum=amqp.EncyclopediaAlmanaxEffectRequest_RequestType" json:"type,omitempty"`
	Offset int32                                        `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Size   int32                                        `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *EncyclopediaAlmanaxEffectRequest) Reset() {
	*x = EncyclopediaAlmanaxEffectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaAlmanaxEffectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaAlmanaxEffectRequest) ProtoMessage() {}

func (x *EncyclopediaAlmanaxEffectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaAlmanaxEffectRequest.ProtoReflect.Descriptor instead.
func (*EncyclopediaAlmanaxEffectRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{22}
}

func (x *EncyclopediaAlmanaxEffectRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *EncyclopediaAlmanaxEffectRequest) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *EncyclopediaAlmanaxEffectRequest) GetType() EncyclopediaAlmanaxEffectRequest_RequestType {
	if x != nil {
		return x.Type
	}
	return EncyclopediaAlmanaxEffectRequest_QUERY
}

func (x *EncyclopediaAlmanaxEffectRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *EncyclopediaAlmanaxEffectRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type EncyclopediaAlmanaxEffectAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query     string     `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Page      int32      `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Pages     int32      `protobuf:"varint,3,opt,name=pages,proto3" json:"pages,omitempty"`
	Total     int32      `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
	Almanaxes []*Almanax `protobuf:"bytes,5,rep,name=almanaxes,proto3" json:"almanaxes,omitempty"`
	Source    *Source    `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *EncyclopediaAlmanaxEffectAnswer) Reset() {
	*x = EncyclopediaAlmanaxEffectAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaAlmanaxEffectAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaAlmanaxEffectAnswer) ProtoMessage() {}

func (x *EncyclopediaAlmanaxEffectAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaAlmanaxEffectAnswer.ProtoReflect.Descriptor instead.
func (*EncyclopediaAlmanaxEffectAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{23}
}

func (x *EncyclopediaAlmanaxEffectAnswer) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *EncyclopediaAlmanaxEffectAnswer) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *EncyclopediaAlmanaxEffectAnswer) GetPages() int32 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *EncyclopediaAlmanaxEffectAnswer) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *EncyclopediaAlmanaxEffectAnswer) GetAlmanaxes() []*Almanax {
	if x != nil {
		return x.Almanaxes
	}
	return nil
}

func (x *EncyclopediaAlmanaxEffectAnswer) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

type EncyclopediaAlmanaxResourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration int32 `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *EncyclopediaAlmanaxResourceRequest) Reset() {
	*x = EncyclopediaAlmanaxResourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaAlmanaxResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaAlmanaxResourceRequest) ProtoMessage() {}

func (x *EncyclopediaAlmanaxResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaAlmanaxResourceRequest.ProtoReflect.Descriptor instead.
func (*EncyclopediaAlmanaxResourceRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{24}
}

func (x *EncyclopediaAlmanaxResourceRequest) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type EncyclopediaAlmanaxResourceAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tributes []*EncyclopediaAlmanaxResourceAnswer_Tribute `protobuf:"bytes,1,rep,name=tributes,proto3" json:"tributes,omitempty"`
	Duration int32                                        `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	Source   *Source                                      `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *EncyclopediaAlmanaxResourceAnswer) Reset() {
	*x = EncyclopediaAlmanaxResourceAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaAlmanaxResourceAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaAlmanaxResourceAnswer) ProtoMessage() {}

func (x *EncyclopediaAlmanaxResourceAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaAlmanaxResourceAnswer.ProtoReflect.Descriptor instead.
func (*EncyclopediaAlmanaxResourceAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{25}
}

func (x *EncyclopediaAlmanaxResourceAnswer) GetTributes() []*EncyclopediaAlmanaxResourceAnswer_Tribute {
	if x != nil {
		return x.Tributes
	}
	return nil
}

func (x *EncyclopediaAlmanaxResourceAnswer) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *EncyclopediaAlmanaxResourceAnswer) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

type EncyclopediaListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query string                       `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Type  EncyclopediaListRequest_Type `protobuf:"varint,2,opt,name=type,proto3,enum=amqp.EncyclopediaListRequest_Type" json:"type,omitempty"`
}

func (x *EncyclopediaListRequest) Reset() {
	*x = EncyclopediaListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaListRequest) ProtoMessage() {}

func (x *EncyclopediaListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaListRequest.ProtoReflect.Descriptor instead.
func (*EncyclopediaListRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{26}
}

func (x *EncyclopediaListRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *EncyclopediaListRequest) GetType() EncyclopediaListRequest_Type {
	if x != nil {
		return x.Type
	}
	return EncyclopediaListRequest_UNKNOWN
}

type EncyclopediaListAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*EncyclopediaListAnswer_Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *EncyclopediaListAnswer) Reset() {
	*x = EncyclopediaListAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaListAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaListAnswer) ProtoMessage() {}

func (x *EncyclopediaListAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaListAnswer.ProtoReflect.Descriptor instead.
func (*EncyclopediaListAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{27}
}

func (x *EncyclopediaListAnswer) GetItems() []*EncyclopediaListAnswer_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type EncyclopediaItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query string   `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	IsID  bool     `protobuf:"varint,2,opt,name=isID,proto3" json:"isID,omitempty"`
	Type  ItemType `protobuf:"varint,3,opt,name=type,proto3,enum=amqp.ItemType" json:"type,omitempty"`
}

func (x *EncyclopediaItemRequest) Reset() {
	*x = EncyclopediaItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaItemRequest) ProtoMessage() {}

func (x *EncyclopediaItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaItemRequest.ProtoReflect.Descriptor instead.
func (*EncyclopediaItemRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{28}
}

func (x *EncyclopediaItemRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *EncyclopediaItemRequest) GetIsID() bool {
	if x != nil {
		return x.IsID
	}
	return false
}

func (x *EncyclopediaItemRequest) GetType() ItemType {
	if x != nil {
		return x.Type
	}
	return ItemType_ANY_ITEM_TYPE
}

type EncyclopediaItemAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      ItemType                          `protobuf:"varint,1,opt,name=type,proto3,enum=amqp.ItemType" json:"type,omitempty"`
	Equipment *EncyclopediaItemAnswer_Equipment `protobuf:"bytes,2,opt,name=equipment,proto3" json:"equipment,omitempty"`
	Set       *EncyclopediaItemAnswer_Set       `protobuf:"bytes,3,opt,name=set,proto3" json:"set,omitempty"`
	Source    *Source                           `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *EncyclopediaItemAnswer) Reset() {
	*x = EncyclopediaItemAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaItemAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaItemAnswer) ProtoMessage() {}

func (x *EncyclopediaItemAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaItemAnswer.ProtoReflect.Descriptor instead.
func (*EncyclopediaItemAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{29}
}

func (x *EncyclopediaItemAnswer) GetType() ItemType {
	if x != nil {
		return x.Type
	}
	return ItemType_ANY_ITEM_TYPE
}

func (x *EncyclopediaItemAnswer) GetEquipment() *EncyclopediaItemAnswer_Equipment {
	if x != nil {
		return x.Equipment
	}
	return nil
}

func (x *EncyclopediaItemAnswer) GetSet() *EncyclopediaItemAnswer_Set {
	if x != nil {
		return x.Set
	}
	return nil
}

func (x *EncyclopediaItemAnswer) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

type JobGetBookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds  []string `protobuf:"bytes,1,rep,name=userIds,proto3" json:"userIds,omitempty"`
	JobId    string   `protobuf:"bytes,2,opt,name=jobId,proto3" json:"jobId,omitempty"`
	ServerId string   `protobuf:"bytes,3,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Offset   int32    `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Size     int32    `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *JobGetBookRequest) Reset() {
	*x = JobGetBookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobGetBookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobGetBookRequest) ProtoMessage() {}

func (x *JobGetBookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobGetBookRequest.ProtoReflect.Descriptor instead.
func (*JobGetBookRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{30}
}

func (x *JobGetBookRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *JobGetBookRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobGetBookRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *JobGetBookRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *JobGetBookRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type JobGetBookAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId     string                        `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	ServerId  string                        `protobuf:"bytes,2,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Page      int32                         `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Pages     int32                         `protobuf:"varint,4,opt,name=pages,proto3" json:"pages,omitempty"`
	Total     int32                         `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`
	Craftsmen []*JobGetBookAnswer_Craftsman `protobuf:"bytes,6,rep,name=craftsmen,proto3" json:"craftsmen,omitempty"`
}

func (x *JobGetBookAnswer) Reset() {
	*x = JobGetBookAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobGetBookAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobGetBookAnswer) ProtoMessage() {}

func (x *JobGetBookAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobGetBookAnswer.ProtoReflect.Descriptor instead.
func (*JobGetBookAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{31}
}

func (x *JobGetBookAnswer) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobGetBookAnswer) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *JobGetBookAnswer) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *JobGetBookAnswer) GetPages() int32 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *JobGetBookAnswer) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *JobGetBookAnswer) GetCraftsmen() []*JobGetBookAnswer_Craftsman {
	if x != nil {
		return x.Craftsmen
	}
	return nil
}

type JobGetUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	ServerId string `protobuf:"bytes,2,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *JobGetUserRequest) Reset() {
	*x = JobGetUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobGetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobGetUserRequest) ProtoMessage() {}

func (x *JobGetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobGetUserRequest.ProtoReflect.Descriptor instead.
func (*JobGetUserRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{32}
}

func (x *JobGetUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *JobGetUserRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

type JobGetUserAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId string                            `protobuf:"bytes,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Jobs     []*JobGetUserAnswer_JobExperience `protobuf:"bytes,2,rep,name=jobs,proto3" json:"jobs,omitempty"`
}

func (x *JobGetUserAnswer) Reset() {
	*x = JobGetUserAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobGetUserAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobGetUserAnswer) ProtoMessage() {}

func (x *JobGetUserAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobGetUserAnswer.ProtoReflect.Descriptor instead.
func (*JobGetUserAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{33}
}

func (x *JobGetUserAnswer) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *JobGetUserAnswer) GetJobs() []*JobGetUserAnswer_JobExperience {
	if x != nil {
		return x.Jobs
	}
	return nil
}

type JobSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	JobId    string `protobuf:"bytes,2,opt,name=jobId,proto3" json:"jobId,omitempty"`
	ServerId string `protobuf:"bytes,3,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Level    int64  `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *JobSetRequest) Reset() {
	*x = JobSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSetRequest) ProtoMessage() {}

func (x *JobSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSetRequest.ProtoReflect.Descriptor instead.
func (*JobSetRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{34}
}

func (x *JobSetRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *JobSetRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobSetRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *JobSetRequest) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

type JobSetAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *JobSetAnswer) Reset() {
	*x = JobSetAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobSetAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSetAnswer) ProtoMessage() {}

func (x *JobSetAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSetAnswer.ProtoReflect.Descriptor instead.
func (*JobSetAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{35}
}

type NewsAlmanaxMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Almanaxes []*NewsAlmanaxMessage_I18NAlmanax `protobuf:"bytes,1,rep,name=almanaxes,proto3" json:"almanaxes,omitempty"`
	Source    *Source                           `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *NewsAlmanaxMessage) Reset() {
	*x = NewsAlmanaxMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsAlmanaxMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsAlmanaxMessage) ProtoMessage() {}

func (x *NewsAlmanaxMessage) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsAlmanaxMessage.ProtoReflect.Descriptor instead.
func (*NewsAlmanaxMessage) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{36}
}

func (x *NewsAlmanaxMessage) GetAlmanaxes() []*NewsAlmanaxMessage_I18NAlmanax {
	if x != nil {
		return x.Almanaxes
	}
	return nil
}

func (x *NewsAlmanaxMessage) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

type NewsTwitterMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url  string               `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Date *timestamp.Timestamp `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *NewsTwitterMessage) Reset() {
	*x = NewsTwitterMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsTwitterMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsTwitterMessage) ProtoMessage() {}

func (x *NewsTwitterMessage) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsTwitterMessage.ProtoReflect.Descriptor instead.
func (*NewsTwitterMessage) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{37}
}

func (x *NewsTwitterMessage) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *NewsTwitterMessage) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type NewsRSSMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title      string               `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	AuthorName string               `protobuf:"bytes,2,opt,name=authorName,proto3" json:"authorName,omitempty"`
	Url        string               `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	IconUrl    string               `protobuf:"bytes,4,opt,name=iconUrl,proto3" json:"iconUrl,omitempty"`
	Date       *timestamp.Timestamp `protobuf:"bytes,5,opt,name=date,proto3" json:"date,omitempty"`
	Type       string               `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *NewsRSSMessage) Reset() {
	*x = NewsRSSMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsRSSMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsRSSMessage) ProtoMessage() {}

func (x *NewsRSSMessage) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsRSSMessage.ProtoReflect.Descriptor instead.
func (*NewsRSSMessage) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{38}
}

func (x *NewsRSSMessage) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NewsRSSMessage) GetAuthorName() string {
	if x != nil {
		return x.AuthorName
	}
	return ""
}

func (x *NewsRSSMessage) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *NewsRSSMessage) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *NewsRSSMessage) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *NewsRSSMessage) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type NewsGameMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *NewsGameMessage) Reset() {
	*x = NewsGameMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsGameMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsGameMessage) ProtoMessage() {}

func (x *NewsGameMessage) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsGameMessage.ProtoReflect.Descriptor instead.
func (*NewsGameMessage) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{39}
}

func (x *NewsGameMessage) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type NewsSetMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *NewsSetMessage) Reset() {
	*x = NewsSetMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsSetMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsSetMessage) ProtoMessage() {}

func (x *NewsSetMessage) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsSetMessage.ProtoReflect.Descriptor instead.
func (*NewsSetMessage) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{40}
}

func (x *NewsSetMessage) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

type PortalPositionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId    string `protobuf:"bytes,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	DimensionId string `protobuf:"bytes,2,opt,name=dimensionId,proto3" json:"dimensionId,omitempty"`
}

func (x *PortalPositionRequest) Reset() {
	*x = PortalPositionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortalPositionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalPositionRequest) ProtoMessage() {}

func (x *PortalPositionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalPositionRequest.ProtoReflect.Descriptor instead.
func (*PortalPositionRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{41}
}

func (x *PortalPositionRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *PortalPositionRequest) GetDimensionId() string {
	if x != nil {
		return x.DimensionId
	}
	return ""
}

type PortalPositionAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Positions []*PortalPositionAnswer_PortalPosition `protobuf:"bytes,1,rep,name=positions,proto3" json:"positions,omitempty"`
}

func (x *PortalPositionAnswer) Reset() {
	*x = PortalPositionAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortalPositionAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalPositionAnswer) ProtoMessage() {}

func (x *PortalPositionAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalPositionAnswer.ProtoReflect.Descriptor instead.
func (*PortalPositionAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{42}
}

func (x *PortalPositionAnswer) GetPositions() []*PortalPositionAnswer_PortalPosition {
	if x != nil {
		return x.Positions
	}
	return nil
}

type Almanax_Tribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item     *Almanax_Tribute_Item `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Quantity int32                 `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *Almanax_Tribute) Reset() {
	*x = Almanax_Tribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Almanax_Tribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Almanax_Tribute) ProtoMessage() {}

func (x *Almanax_Tribute) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Almanax_Tribute.ProtoReflect.Descriptor instead.
func (*Almanax_Tribute) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Almanax_Tribute) GetItem() *Almanax_Tribute_Item {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *Almanax_Tribute) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type Almanax_Tribute_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Icon string   `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	Type ItemType `protobuf:"varint,3,opt,name=type,proto3,enum=amqp.ItemType" json:"type,omitempty"`
}

func (x *Almanax_Tribute_Item) Reset() {
	*x = Almanax_Tribute_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Almanax_Tribute_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Almanax_Tribute_Item) ProtoMessage() {}

func (x *Almanax_Tribute_Item) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Almanax_Tribute_Item.ProtoReflect.Descriptor instead.
func (*Almanax_Tribute_Item) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *Almanax_Tribute_Item) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Almanax_Tribute_Item) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Almanax_Tribute_Item) GetType() ItemType {
	if x != nil {
		return x.Type
	}
	return ItemType_ANY_ITEM_TYPE
}

type AlignGetBookAnswer_Believer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CityId  string `protobuf:"bytes,1,opt,name=cityId,proto3" json:"cityId,omitempty"`
	OrderId string `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`
	UserId  string `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"`
	Level   int64  `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *AlignGetBookAnswer_Believer) Reset() {
	*x = AlignGetBookAnswer_Believer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlignGetBookAnswer_Believer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlignGetBookAnswer_Believer) ProtoMessage() {}

func (x *AlignGetBookAnswer_Believer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlignGetBookAnswer_Believer.ProtoReflect.Descriptor instead.
func (*AlignGetBookAnswer_Believer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{4, 0}
}

func (x *AlignGetBookAnswer_Believer) GetCityId() string {
	if x != nil {
		return x.CityId
	}
	return ""
}

func (x *AlignGetBookAnswer_Believer) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *AlignGetBookAnswer_Believer) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AlignGetBookAnswer_Believer) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

type AlignGetUserAnswer_AlignExperience struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CityId  string `protobuf:"bytes,1,opt,name=cityId,proto3" json:"cityId,omitempty"`
	OrderId string `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`
	Level   int64  `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *AlignGetUserAnswer_AlignExperience) Reset() {
	*x = AlignGetUserAnswer_AlignExperience{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlignGetUserAnswer_AlignExperience) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlignGetUserAnswer_AlignExperience) ProtoMessage() {}

func (x *AlignGetUserAnswer_AlignExperience) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlignGetUserAnswer_AlignExperience.ProtoReflect.Descriptor instead.
func (*AlignGetUserAnswer_AlignExperience) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{6, 0}
}

func (x *AlignGetUserAnswer_AlignExperience) GetCityId() string {
	if x != nil {
		return x.CityId
	}
	return ""
}

func (x *AlignGetUserAnswer_AlignExperience) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *AlignGetUserAnswer_AlignExperience) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

type ConfigurationGetAnswer_ChannelServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string `protobuf:"bytes,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	ServerId  string `protobuf:"bytes,2,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *ConfigurationGetAnswer_ChannelServer) Reset() {
	*x = ConfigurationGetAnswer_ChannelServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationGetAnswer_ChannelServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationGetAnswer_ChannelServer) ProtoMessage() {}

func (x *ConfigurationGetAnswer_ChannelServer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationGetAnswer_ChannelServer.ProtoReflect.Descriptor instead.
func (*ConfigurationGetAnswer_ChannelServer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{12, 0}
}

func (x *ConfigurationGetAnswer_ChannelServer) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ConfigurationGetAnswer_ChannelServer) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

type ConfigurationGetAnswer_AlmanaxWebhook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string `protobuf:"bytes,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	WebhookId string `protobuf:"bytes,2,opt,name=webhookId,proto3" json:"webhookId,omitempty"`
}

func (x *ConfigurationGetAnswer_AlmanaxWebhook) Reset() {
	*x = ConfigurationGetAnswer_AlmanaxWebhook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationGetAnswer_AlmanaxWebhook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationGetAnswer_AlmanaxWebhook) ProtoMessage() {}

func (x *ConfigurationGetAnswer_AlmanaxWebhook) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationGetAnswer_AlmanaxWebhook.ProtoReflect.Descriptor instead.
func (*ConfigurationGetAnswer_AlmanaxWebhook) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{12, 1}
}

func (x *ConfigurationGetAnswer_AlmanaxWebhook) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ConfigurationGetAnswer_AlmanaxWebhook) GetWebhookId() string {
	if x != nil {
		return x.WebhookId
	}
	return ""
}

type ConfigurationGetAnswer_RssWebhook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string `protobuf:"bytes,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	FeedId    string `protobuf:"bytes,2,opt,name=feedId,proto3" json:"feedId,omitempty"`
	WebhookId string `protobuf:"bytes,3,opt,name=webhookId,proto3" json:"webhookId,omitempty"`
}

func (x *ConfigurationGetAnswer_RssWebhook) Reset() {
	*x = ConfigurationGetAnswer_RssWebhook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationGetAnswer_RssWebhook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationGetAnswer_RssWebhook) ProtoMessage() {}

func (x *ConfigurationGetAnswer_RssWebhook) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationGetAnswer_RssWebhook.ProtoReflect.Descriptor instead.
func (*ConfigurationGetAnswer_RssWebhook) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{12, 2}
}

func (x *ConfigurationGetAnswer_RssWebhook) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ConfigurationGetAnswer_RssWebhook) GetFeedId() string {
	if x != nil {
		return x.FeedId
	}
	return ""
}

func (x *ConfigurationGetAnswer_RssWebhook) GetWebhookId() string {
	if x != nil {
		return x.WebhookId
	}
	return ""
}

type ConfigurationGetAnswer_TwitchWebhook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  string `protobuf:"bytes,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	StreamerId string `protobuf:"bytes,2,opt,name=streamerId,proto3" json:"streamerId,omitempty"`
	WebhookId  string `protobuf:"bytes,3,opt,name=webhookId,proto3" json:"webhookId,omitempty"`
}

func (x *ConfigurationGetAnswer_TwitchWebhook) Reset() {
	*x = ConfigurationGetAnswer_TwitchWebhook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationGetAnswer_TwitchWebhook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationGetAnswer_TwitchWebhook) ProtoMessage() {}

func (x *ConfigurationGetAnswer_TwitchWebhook) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationGetAnswer_TwitchWebhook.ProtoReflect.Descriptor instead.
func (*ConfigurationGetAnswer_TwitchWebhook) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{12, 3}
}

func (x *ConfigurationGetAnswer_TwitchWebhook) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ConfigurationGetAnswer_TwitchWebhook) GetStreamerId() string {
	if x != nil {
		return x.StreamerId
	}
	return ""
}

func (x *ConfigurationGetAnswer_TwitchWebhook) GetWebhookId() string {
	if x != nil {
		return x.WebhookId
	}
	return ""
}

type ConfigurationGetAnswer_TwitterWebhook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string `protobuf:"bytes,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	TwitterId string `protobuf:"bytes,2,opt,name=twitterId,proto3" json:"twitterId,omitempty"`
	WebhookId string `protobuf:"bytes,3,opt,name=webhookId,proto3" json:"webhookId,omitempty"`
}

func (x *ConfigurationGetAnswer_TwitterWebhook) Reset() {
	*x = ConfigurationGetAnswer_TwitterWebhook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationGetAnswer_TwitterWebhook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationGetAnswer_TwitterWebhook) ProtoMessage() {}

func (x *ConfigurationGetAnswer_TwitterWebhook) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationGetAnswer_TwitterWebhook.ProtoReflect.Descriptor instead.
func (*ConfigurationGetAnswer_TwitterWebhook) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{12, 4}
}

func (x *ConfigurationGetAnswer_TwitterWebhook) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ConfigurationGetAnswer_TwitterWebhook) GetTwitterId() string {
	if x != nil {
		return x.TwitterId
	}
	return ""
}

func (x *ConfigurationGetAnswer_TwitterWebhook) GetWebhookId() string {
	if x != nil {
		return x.WebhookId
	}
	return ""
}

type ConfigurationGetAnswer_YoutubeWebhook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string `protobuf:"bytes,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	VideastId string `protobuf:"bytes,2,opt,name=videastId,proto3" json:"videastId,omitempty"`
	WebhookId string `protobuf:"bytes,3,opt,name=webhookId,proto3" json:"webhookId,omitempty"`
}

func (x *ConfigurationGetAnswer_YoutubeWebhook) Reset() {
	*x = ConfigurationGetAnswer_YoutubeWebhook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationGetAnswer_YoutubeWebhook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationGetAnswer_YoutubeWebhook) ProtoMessage() {}

func (x *ConfigurationGetAnswer_YoutubeWebhook) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationGetAnswer_YoutubeWebhook.ProtoReflect.Descriptor instead.
func (*ConfigurationGetAnswer_YoutubeWebhook) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{12, 5}
}

func (x *ConfigurationGetAnswer_YoutubeWebhook) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ConfigurationGetAnswer_YoutubeWebhook) GetVideastId() string {
	if x != nil {
		return x.VideastId
	}
	return ""
}

func (x *ConfigurationGetAnswer_YoutubeWebhook) GetWebhookId() string {
	if x != nil {
		return x.WebhookId
	}
	return ""
}

type EncyclopediaAlmanaxResourceAnswer_Tribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemName string   `protobuf:"bytes,1,opt,name=itemName,proto3" json:"itemName,omitempty"`
	ItemType ItemType `protobuf:"varint,2,opt,name=itemType,proto3,enum=amqp.ItemType" json:"itemType,omitempty"`
	Quantity int32    `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *EncyclopediaAlmanaxResourceAnswer_Tribute) Reset() {
	*x = EncyclopediaAlmanaxResourceAnswer_Tribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaAlmanaxResourceAnswer_Tribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaAlmanaxResourceAnswer_Tribute) ProtoMessage() {}

func (x *EncyclopediaAlmanaxResourceAnswer_Tribute) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaAlmanaxResourceAnswer_Tribute.ProtoReflect.Descriptor instead.
func (*EncyclopediaAlmanaxResourceAnswer_Tribute) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{25, 0}
}

func (x *EncyclopediaAlmanaxResourceAnswer_Tribute) GetItemName() string {
	if x != nil {
		return x.ItemName
	}
	return ""
}

func (x *EncyclopediaAlmanaxResourceAnswer_Tribute) GetItemType() ItemType {
	if x != nil {
		return x.ItemType
	}
	return ItemType_ANY_ITEM_TYPE
}

func (x *EncyclopediaAlmanaxResourceAnswer_Tribute) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type EncyclopediaListAnswer_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *EncyclopediaListAnswer_Item) Reset() {
	*x = EncyclopediaListAnswer_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaListAnswer_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaListAnswer_Item) ProtoMessage() {}

func (x *EncyclopediaListAnswer_Item) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaListAnswer_Item.ProtoReflect.Descriptor instead.
func (*EncyclopediaListAnswer_Item) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{27, 0}
}

func (x *EncyclopediaListAnswer_Item) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EncyclopediaListAnswer_Item) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type EncyclopediaItemAnswer_Equipment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                                            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string                                            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description     string                                            `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Type            *EncyclopediaItemAnswer_Equipment_Type            `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Icon            string                                            `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`
	Level           int64                                             `protobuf:"varint,6,opt,name=level,proto3" json:"level,omitempty"`
	Pods            int64                                             `protobuf:"varint,7,opt,name=pods,proto3" json:"pods,omitempty"`
	Set             *EncyclopediaItemAnswer_Equipment_SetFamily       `protobuf:"bytes,8,opt,name=set,proto3" json:"set,omitempty"`
	Characteristics *EncyclopediaItemAnswer_Equipment_Characteristics `protobuf:"bytes,9,opt,name=characteristics,proto3" json:"characteristics,omitempty"`
	WeaponEffects   []*EncyclopediaItemAnswer_Effect                  `protobuf:"bytes,10,rep,name=weaponEffects,proto3" json:"weaponEffects,omitempty"`
	Effects         []*EncyclopediaItemAnswer_Effect                  `protobuf:"bytes,11,rep,name=effects,proto3" json:"effects,omitempty"`
	Conditions      *EncyclopediaItemAnswer_Conditions                `protobuf:"bytes,12,opt,name=conditions,proto3" json:"conditions,omitempty"`
	Recipe          *EncyclopediaItemAnswer_Recipe                    `protobuf:"bytes,13,opt,name=recipe,proto3" json:"recipe,omitempty"`
}

func (x *EncyclopediaItemAnswer_Equipment) Reset() {
	*x = EncyclopediaItemAnswer_Equipment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaItemAnswer_Equipment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaItemAnswer_Equipment) ProtoMessage() {}

func (x *EncyclopediaItemAnswer_Equipment) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaItemAnswer_Equipment.ProtoReflect.Descriptor instead.
func (*EncyclopediaItemAnswer_Equipment) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{29, 0}
}

func (x *EncyclopediaItemAnswer_Equipment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EncyclopediaItemAnswer_Equipment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EncyclopediaItemAnswer_Equipment) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EncyclopediaItemAnswer_Equipment) GetType() *EncyclopediaItemAnswer_Equipment_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *EncyclopediaItemAnswer_Equipment) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *EncyclopediaItemAnswer_Equipment) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *EncyclopediaItemAnswer_Equipment) GetPods() int64 {
	if x != nil {
		return x.Pods
	}
	return 0
}

func (x *EncyclopediaItemAnswer_Equipment) GetSet() *EncyclopediaItemAnswer_Equipment_SetFamily {
	if x != nil {
		return x.Set
	}
	return nil
}

func (x *EncyclopediaItemAnswer_Equipment) GetCharacteristics() *EncyclopediaItemAnswer_Equipment_Characteristics {
	if x != nil {
		return x.Characteristics
	}
	return nil
}

func (x *EncyclopediaItemAnswer_Equipment) GetWeaponEffects() []*EncyclopediaItemAnswer_Effect {
	if x != nil {
		return x.WeaponEffects
	}
	return nil
}

func (x *EncyclopediaItemAnswer_Equipment) GetEffects() []*EncyclopediaItemAnswer_Effect {
	if x != nil {
		return x.Effects
	}
	return nil
}

func (x *EncyclopediaItemAnswer_Equipment) GetConditions() *EncyclopediaItemAnswer_Conditions {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *EncyclopediaItemAnswer_Equipment) GetRecipe() *EncyclopediaItemAnswer_Recipe {
	if x != nil {
		return x.Recipe
	}
	return nil
}

type EncyclopediaItemAnswer_Set struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string                                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Icon       string                                  `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	Level      int64                                   `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	IsCosmetic bool                                    `protobuf:"varint,5,opt,name=isCosmetic,proto3" json:"isCosmetic,omitempty"`
	Equipments []*EncyclopediaItemAnswer_Set_Equipment `protobuf:"bytes,6,rep,name=equipments,proto3" json:"equipments,omitempty"`
	Bonuses    []*EncyclopediaItemAnswer_Set_Bonus     `protobuf:"bytes,7,rep,name=bonuses,proto3" json:"bonuses,omitempty"`
}

func (x *EncyclopediaItemAnswer_Set) Reset() {
	*x = EncyclopediaItemAnswer_Set{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaItemAnswer_Set) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaItemAnswer_Set) ProtoMessage() {}

func (x *EncyclopediaItemAnswer_Set) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaItemAnswer_Set.ProtoReflect.Descriptor instead.
func (*EncyclopediaItemAnswer_Set) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{29, 1}
}

func (x *EncyclopediaItemAnswer_Set) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EncyclopediaItemAnswer_Set) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EncyclopediaItemAnswer_Set) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *EncyclopediaItemAnswer_Set) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *EncyclopediaItemAnswer_Set) GetIsCosmetic() bool {
	if x != nil {
		return x.IsCosmetic
	}
	return false
}

func (x *EncyclopediaItemAnswer_Set) GetEquipments() []*EncyclopediaItemAnswer_Set_Equipment {
	if x != nil {
		return x.Equipments
	}
	return nil
}

func (x *EncyclopediaItemAnswer_Set) GetBonuses() []*EncyclopediaItemAnswer_Set_Bonus {
	if x != nil {
		return x.Bonuses
	}
	return nil
}

type EncyclopediaItemAnswer_Effect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *EncyclopediaItemAnswer_Effect) Reset() {
	*x = EncyclopediaItemAnswer_Effect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaItemAnswer_Effect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaItemAnswer_Effect) ProtoMessage() {}

func (x *EncyclopediaItemAnswer_Effect) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaItemAnswer_Effect.ProtoReflect.Descriptor instead.
func (*EncyclopediaItemAnswer_Effect) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{29, 2}
}

func (x *EncyclopediaItemAnswer_Effect) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EncyclopediaItemAnswer_Effect) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type EncyclopediaItemAnswer_Conditions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relation  EncyclopediaItemAnswer_Conditions_Relation   `protobuf:"varint,1,opt,name=relation,proto3,enum=amqp.EncyclopediaItemAnswer_Conditions_Relation" json:"relation,omitempty"`
	Children  []*EncyclopediaItemAnswer_Conditions         `protobuf:"bytes,2,rep,name=children,proto3" json:"children,omitempty"`
	Condition *EncyclopediaItemAnswer_Conditions_Condition `protobuf:"bytes,3,opt,name=condition,proto3" json:"condition,omitempty"`
}

func (x *EncyclopediaItemAnswer_Conditions) Reset() {
	*x = EncyclopediaItemAnswer_Conditions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaItemAnswer_Conditions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaItemAnswer_Conditions) ProtoMessage() {}

func (x *EncyclopediaItemAnswer_Conditions) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaItemAnswer_Conditions.ProtoReflect.Descriptor instead.
func (*EncyclopediaItemAnswer_Conditions) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{29, 3}
}

func (x *EncyclopediaItemAnswer_Conditions) GetRelation() EncyclopediaItemAnswer_Conditions_Relation {
	if x != nil {
		return x.Relation
	}
	return EncyclopediaItemAnswer_Conditions_NONE
}

func (x *EncyclopediaItemAnswer_Conditions) GetChildren() []*EncyclopediaItemAnswer_Conditions {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *EncyclopediaItemAnswer_Conditions) GetCondition() *EncyclopediaItemAnswer_Conditions_Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

type EncyclopediaItemAnswer_Recipe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ingredients []*EncyclopediaItemAnswer_Recipe_Ingredient `protobuf:"bytes,1,rep,name=ingredients,proto3" json:"ingredients,omitempty"`
}

func (x *EncyclopediaItemAnswer_Recipe) Reset() {
	*x = EncyclopediaItemAnswer_Recipe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaItemAnswer_Recipe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaItemAnswer_Recipe) ProtoMessage() {}

func (x *EncyclopediaItemAnswer_Recipe) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaItemAnswer_Recipe.ProtoReflect.Descriptor instead.
func (*EncyclopediaItemAnswer_Recipe) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{29, 4}
}

func (x *EncyclopediaItemAnswer_Recipe) GetIngredients() []*EncyclopediaItemAnswer_Recipe_Ingredient {
	if x != nil {
		return x.Ingredients
	}
	return nil
}

type EncyclopediaItemAnswer_Equipment_Characteristics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cost           int64    `protobuf:"varint,1,opt,name=cost,proto3" json:"cost,omitempty"`
	MinRange       int64    `protobuf:"varint,2,opt,name=minRange,proto3" json:"minRange,omitempty"`
	MaxRange       int64    `protobuf:"varint,3,opt,name=maxRange,proto3" json:"maxRange,omitempty"`
	MaxCastPerTurn int64    `protobuf:"varint,4,opt,name=maxCastPerTurn,proto3" json:"maxCastPerTurn,omitempty"`
	CriticalRate   int64    `protobuf:"varint,5,opt,name=criticalRate,proto3" json:"criticalRate,omitempty"`
	CriticalBonus  int64    `protobuf:"varint,6,opt,name=criticalBonus,proto3" json:"criticalBonus,omitempty"`
	Areas          []string `protobuf:"bytes,7,rep,name=areas,proto3" json:"areas,omitempty"` //TODO
}

func (x *EncyclopediaItemAnswer_Equipment_Characteristics) Reset() {
	*x = EncyclopediaItemAnswer_Equipment_Characteristics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaItemAnswer_Equipment_Characteristics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaItemAnswer_Equipment_Characteristics) ProtoMessage() {}

func (x *EncyclopediaItemAnswer_Equipment_Characteristics) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaItemAnswer_Equipment_Characteristics.ProtoReflect.Descriptor instead.
func (*EncyclopediaItemAnswer_Equipment_Characteristics) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{29, 0, 0}
}

func (x *EncyclopediaItemAnswer_Equipment_Characteristics) GetCost() int64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *EncyclopediaItemAnswer_Equipment_Characteristics) GetMinRange() int64 {
	if x != nil {
		return x.MinRange
	}
	return 0
}

func (x *EncyclopediaItemAnswer_Equipment_Characteristics) GetMaxRange() int64 {
	if x != nil {
		return x.MaxRange
	}
	return 0
}

func (x *EncyclopediaItemAnswer_Equipment_Characteristics) GetMaxCastPerTurn() int64 {
	if x != nil {
		return x.MaxCastPerTurn
	}
	return 0
}

func (x *EncyclopediaItemAnswer_Equipment_Characteristics) GetCriticalRate() int64 {
	if x != nil {
		return x.CriticalRate
	}
	return 0
}

func (x *EncyclopediaItemAnswer_Equipment_Characteristics) GetCriticalBonus() int64 {
	if x != nil {
		return x.CriticalBonus
	}
	return 0
}

func (x *EncyclopediaItemAnswer_Equipment_Characteristics) GetAreas() []string {
	if x != nil {
		return x.Areas
	}
	return nil
}

type EncyclopediaItemAnswer_Equipment_Type struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemType       ItemType      `protobuf:"varint,1,opt,name=itemType,proto3,enum=amqp.ItemType" json:"itemType,omitempty"`
	EquipmentType  EquipmentType `protobuf:"varint,2,opt,name=equipmentType,proto3,enum=amqp.EquipmentType" json:"equipmentType,omitempty"`
	EquipmentLabel string        `protobuf:"bytes,3,opt,name=equipmentLabel,proto3" json:"equipmentLabel,omitempty"`
}

func (x *EncyclopediaItemAnswer_Equipment_Type) Reset() {
	*x = EncyclopediaItemAnswer_Equipment_Type{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaItemAnswer_Equipment_Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaItemAnswer_Equipment_Type) ProtoMessage() {}

func (x *EncyclopediaItemAnswer_Equipment_Type) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaItemAnswer_Equipment_Type.ProtoReflect.Descriptor instead.
func (*EncyclopediaItemAnswer_Equipment_Type) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{29, 0, 1}
}

func (x *EncyclopediaItemAnswer_Equipment_Type) GetItemType() ItemType {
	if x != nil {
		return x.ItemType
	}
	return ItemType_ANY_ITEM_TYPE
}

func (x *EncyclopediaItemAnswer_Equipment_Type) GetEquipmentType() EquipmentType {
	if x != nil {
		return x.EquipmentType
	}
	return EquipmentType_NONE
}

func (x *EncyclopediaItemAnswer_Equipment_Type) GetEquipmentLabel() string {
	if x != nil {
		return x.EquipmentLabel
	}
	return ""
}

type EncyclopediaItemAnswer_Equipment_SetFamily struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *EncyclopediaItemAnswer_Equipment_SetFamily) Reset() {
	*x = EncyclopediaItemAnswer_Equipment_SetFamily{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaItemAnswer_Equipment_SetFamily) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaItemAnswer_Equipment_SetFamily) ProtoMessage() {}

func (x *EncyclopediaItemAnswer_Equipment_SetFamily) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaItemAnswer_Equipment_SetFamily.ProtoReflect.Descriptor instead.
func (*EncyclopediaItemAnswer_Equipment_SetFamily) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{29, 0, 2}
}

func (x *EncyclopediaItemAnswer_Equipment_SetFamily) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EncyclopediaItemAnswer_Equipment_SetFamily) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type EncyclopediaItemAnswer_Set_Equipment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type  EquipmentType `protobuf:"varint,3,opt,name=type,proto3,enum=amqp.EquipmentType" json:"type,omitempty"`
	Level int64         `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *EncyclopediaItemAnswer_Set_Equipment) Reset() {
	*x = EncyclopediaItemAnswer_Set_Equipment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaItemAnswer_Set_Equipment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaItemAnswer_Set_Equipment) ProtoMessage() {}

func (x *EncyclopediaItemAnswer_Set_Equipment) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaItemAnswer_Set_Equipment.ProtoReflect.Descriptor instead.
func (*EncyclopediaItemAnswer_Set_Equipment) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{29, 1, 0}
}

func (x *EncyclopediaItemAnswer_Set_Equipment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EncyclopediaItemAnswer_Set_Equipment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EncyclopediaItemAnswer_Set_Equipment) GetType() EquipmentType {
	if x != nil {
		return x.Type
	}
	return EquipmentType_NONE
}

func (x *EncyclopediaItemAnswer_Set_Equipment) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

type EncyclopediaItemAnswer_Set_Bonus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemNumber int64                            `protobuf:"varint,1,opt,name=itemNumber,proto3" json:"itemNumber,omitempty"`
	Effects    []*EncyclopediaItemAnswer_Effect `protobuf:"bytes,2,rep,name=effects,proto3" json:"effects,omitempty"`
}

func (x *EncyclopediaItemAnswer_Set_Bonus) Reset() {
	*x = EncyclopediaItemAnswer_Set_Bonus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaItemAnswer_Set_Bonus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaItemAnswer_Set_Bonus) ProtoMessage() {}

func (x *EncyclopediaItemAnswer_Set_Bonus) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaItemAnswer_Set_Bonus.ProtoReflect.Descriptor instead.
func (*EncyclopediaItemAnswer_Set_Bonus) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{29, 1, 1}
}

func (x *EncyclopediaItemAnswer_Set_Bonus) GetItemNumber() int64 {
	if x != nil {
		return x.ItemNumber
	}
	return 0
}

func (x *EncyclopediaItemAnswer_Set_Bonus) GetEffects() []*EncyclopediaItemAnswer_Effect {
	if x != nil {
		return x.Effects
	}
	return nil
}

type EncyclopediaItemAnswer_Conditions_Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator string                                               `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	Value    int64                                                `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	Element  *EncyclopediaItemAnswer_Conditions_Condition_Element `protobuf:"bytes,3,opt,name=element,proto3" json:"element,omitempty"`
}

func (x *EncyclopediaItemAnswer_Conditions_Condition) Reset() {
	*x = EncyclopediaItemAnswer_Conditions_Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaItemAnswer_Conditions_Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaItemAnswer_Conditions_Condition) ProtoMessage() {}

func (x *EncyclopediaItemAnswer_Conditions_Condition) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaItemAnswer_Conditions_Condition.ProtoReflect.Descriptor instead.
func (*EncyclopediaItemAnswer_Conditions_Condition) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{29, 3, 0}
}

func (x *EncyclopediaItemAnswer_Conditions_Condition) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *EncyclopediaItemAnswer_Conditions_Condition) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *EncyclopediaItemAnswer_Conditions_Condition) GetElement() *EncyclopediaItemAnswer_Conditions_Condition_Element {
	if x != nil {
		return x.Element
	}
	return nil
}

type EncyclopediaItemAnswer_Conditions_Condition_Element struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *EncyclopediaItemAnswer_Conditions_Condition_Element) Reset() {
	*x = EncyclopediaItemAnswer_Conditions_Condition_Element{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaItemAnswer_Conditions_Condition_Element) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaItemAnswer_Conditions_Condition_Element) ProtoMessage() {}

func (x *EncyclopediaItemAnswer_Conditions_Condition_Element) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaItemAnswer_Conditions_Condition_Element.ProtoReflect.Descriptor instead.
func (*EncyclopediaItemAnswer_Conditions_Condition_Element) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{29, 3, 0, 0}
}

func (x *EncyclopediaItemAnswer_Conditions_Condition_Element) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EncyclopediaItemAnswer_Conditions_Condition_Element) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type EncyclopediaItemAnswer_Recipe_Ingredient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Quantity int64    `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Type     ItemType `protobuf:"varint,4,opt,name=type,proto3,enum=amqp.ItemType" json:"type,omitempty"`
}

func (x *EncyclopediaItemAnswer_Recipe_Ingredient) Reset() {
	*x = EncyclopediaItemAnswer_Recipe_Ingredient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaItemAnswer_Recipe_Ingredient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaItemAnswer_Recipe_Ingredient) ProtoMessage() {}

func (x *EncyclopediaItemAnswer_Recipe_Ingredient) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaItemAnswer_Recipe_Ingredient.ProtoReflect.Descriptor instead.
func (*EncyclopediaItemAnswer_Recipe_Ingredient) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{29, 4, 0}
}

func (x *EncyclopediaItemAnswer_Recipe_Ingredient) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EncyclopediaItemAnswer_Recipe_Ingredient) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EncyclopediaItemAnswer_Recipe_Ingredient) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *EncyclopediaItemAnswer_Recipe_Ingredient) GetType() ItemType {
	if x != nil {
		return x.Type
	}
	return ItemType_ANY_ITEM_TYPE
}

type JobGetBookAnswer_Craftsman struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Level  int64  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *JobGetBookAnswer_Craftsman) Reset() {
	*x = JobGetBookAnswer_Craftsman{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobGetBookAnswer_Craftsman) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobGetBookAnswer_Craftsman) ProtoMessage() {}

func (x *JobGetBookAnswer_Craftsman) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobGetBookAnswer_Craftsman.ProtoReflect.Descriptor instead.
func (*JobGetBookAnswer_Craftsman) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{31, 0}
}

func (x *JobGetBookAnswer_Craftsman) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *JobGetBookAnswer_Craftsman) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

type JobGetUserAnswer_JobExperience struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId string `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	Level int64  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *JobGetUserAnswer_JobExperience) Reset() {
	*x = JobGetUserAnswer_JobExperience{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobGetUserAnswer_JobExperience) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobGetUserAnswer_JobExperience) ProtoMessage() {}

func (x *JobGetUserAnswer_JobExperience) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobGetUserAnswer_JobExperience.ProtoReflect.Descriptor instead.
func (*JobGetUserAnswer_JobExperience) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{33, 0}
}

func (x *JobGetUserAnswer_JobExperience) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobGetUserAnswer_JobExperience) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

type NewsAlmanaxMessage_I18NAlmanax struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Almanax *Almanax `protobuf:"bytes,1,opt,name=almanax,proto3" json:"almanax,omitempty"`
	Locale  Language `protobuf:"varint,2,opt,name=locale,proto3,enum=amqp.Language" json:"locale,omitempty"`
}

func (x *NewsAlmanaxMessage_I18NAlmanax) Reset() {
	*x = NewsAlmanaxMessage_I18NAlmanax{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsAlmanaxMessage_I18NAlmanax) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsAlmanaxMessage_I18NAlmanax) ProtoMessage() {}

func (x *NewsAlmanaxMessage_I18NAlmanax) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsAlmanaxMessage_I18NAlmanax.ProtoReflect.Descriptor instead.
func (*NewsAlmanaxMessage_I18NAlmanax) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{36, 0}
}

func (x *NewsAlmanaxMessage_I18NAlmanax) GetAlmanax() *Almanax {
	if x != nil {
		return x.Almanax
	}
	return nil
}

func (x *NewsAlmanaxMessage_I18NAlmanax) GetLocale() Language {
	if x != nil {
		return x.Locale
	}
	return Language_ANY
}

type PortalPositionAnswer_PortalPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId      string                                        `protobuf:"bytes,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	DimensionId   string                                        `protobuf:"bytes,2,opt,name=dimensionId,proto3" json:"dimensionId,omitempty"`
	RemainingUses int32                                         `protobuf:"varint,3,opt,name=remainingUses,proto3" json:"remainingUses,omitempty"`
	Position      *PortalPositionAnswer_PortalPosition_Position `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
	CreatedBy     string                                        `protobuf:"bytes,5,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	UpdatedBy     string                                        `protobuf:"bytes,6,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
	CreatedAt     *timestamp.Timestamp                          `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt     *timestamp.Timestamp                          `protobuf:"bytes,8,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Source        *Source                                       `protobuf:"bytes,9,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *PortalPositionAnswer_PortalPosition) Reset() {
	*x = PortalPositionAnswer_PortalPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortalPositionAnswer_PortalPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalPositionAnswer_PortalPosition) ProtoMessage() {}

func (x *PortalPositionAnswer_PortalPosition) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalPositionAnswer_PortalPosition.ProtoReflect.Descriptor instead.
func (*PortalPositionAnswer_PortalPosition) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{42, 0}
}

func (x *PortalPositionAnswer_PortalPosition) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition) GetDimensionId() string {
	if x != nil {
		return x.DimensionId
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition) GetRemainingUses() int32 {
	if x != nil {
		return x.RemainingUses
	}
	return 0
}

func (x *PortalPositionAnswer_PortalPosition) GetPosition() *PortalPositionAnswer_PortalPosition_Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *PortalPositionAnswer_PortalPosition) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PortalPositionAnswer_PortalPosition) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PortalPositionAnswer_PortalPosition) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

type PortalPositionAnswer_PortalPosition_Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X                    int32                                                   `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y                    int32                                                   `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	IsInCanopy           bool                                                    `protobuf:"varint,3,opt,name=isInCanopy,proto3" json:"isInCanopy,omitempty"`
	Transport            *PortalPositionAnswer_PortalPosition_Position_Transport `protobuf:"bytes,4,opt,name=transport,proto3" json:"transport,omitempty"`
	ConditionalTransport *PortalPositionAnswer_PortalPosition_Position_Transport `protobuf:"bytes,5,opt,name=conditionalTransport,proto3" json:"conditionalTransport,omitempty"`
}

func (x *PortalPositionAnswer_PortalPosition_Position) Reset() {
	*x = PortalPositionAnswer_PortalPosition_Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortalPositionAnswer_PortalPosition_Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalPositionAnswer_PortalPosition_Position) ProtoMessage() {}

func (x *PortalPositionAnswer_PortalPosition_Position) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalPositionAnswer_PortalPosition_Position.ProtoReflect.Descriptor instead.
func (*PortalPositionAnswer_PortalPosition_Position) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{42, 0, 0}
}

func (x *PortalPositionAnswer_PortalPosition_Position) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *PortalPositionAnswer_PortalPosition_Position) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *PortalPositionAnswer_PortalPosition_Position) GetIsInCanopy() bool {
	if x != nil {
		return x.IsInCanopy
	}
	return false
}

func (x *PortalPositionAnswer_PortalPosition_Position) GetTransport() *PortalPositionAnswer_PortalPosition_Position_Transport {
	if x != nil {
		return x.Transport
	}
	return nil
}

func (x *PortalPositionAnswer_PortalPosition_Position) GetConditionalTransport() *PortalPositionAnswer_PortalPosition_Position_Transport {
	if x != nil {
		return x.ConditionalTransport
	}
	return nil
}

type PortalPositionAnswer_PortalPosition_Position_Transport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaId    string `protobuf:"bytes,1,opt,name=areaId,proto3" json:"areaId,omitempty"`
	SubAreaId string `protobuf:"bytes,2,opt,name=subAreaId,proto3" json:"subAreaId,omitempty"`
	TypeId    string `protobuf:"bytes,3,opt,name=typeId,proto3" json:"typeId,omitempty"`
	X         int32  `protobuf:"varint,4,opt,name=x,proto3" json:"x,omitempty"`
	Y         int32  `protobuf:"varint,5,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) Reset() {
	*x = PortalPositionAnswer_PortalPosition_Position_Transport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalPositionAnswer_PortalPosition_Position_Transport) ProtoMessage() {}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalPositionAnswer_PortalPosition_Position_Transport.ProtoReflect.Descriptor instead.
func (*PortalPositionAnswer_PortalPosition_Position_Transport) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{42, 0, 0, 0}
}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) GetAreaId() string {
	if x != nil {
		return x.AreaId
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) GetSubAreaId() string {
	if x != nil {
		return x.SubAreaId
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) GetTypeId() string {
	if x != nil {
		return x.TypeId
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

var File_rabbitmq_proto protoreflect.FileDescriptor

var file_rabbitmq_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x6d, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x04, 0x61, 0x6d, 0x71, 0x70, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbc, 0x27, 0x0a, 0x0f, 0x52, 0x61, 0x62, 0x62,
	0x69, 0x74, 0x4d, 0x51, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x6d, 0x71, 0x70,
	0x2e, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x4d, 0x51, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x61, 0x6d, 0x71, 0x70, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x52,
	0x61, 0x62, 0x62, 0x69, 0x74, 0x4d, 0x51, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a,
	0x04, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x61, 0x6d,
	0x71, 0x70, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x4b, 0x0a, 0x13, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x47, 0x65,
	0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x47,
	0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x13, 0x61,
	0x6c, 0x69, 0x67, 0x6e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x48, 0x0a, 0x12, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x47, 0x65, 0x74, 0x42, 0x6f,
	0x6f, 0x6b, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x47, 0x65, 0x74, 0x42, 0x6f,
	0x6f, 0x6b, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x12, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x47,
	0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x13,
	0x61, 0x6c, 0x69, 0x67, 0x6e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6d, 0x71, 0x70,
	0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x13, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x12, 0x61, 0x6c, 0x69,
	0x67, 0x6e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18,
	0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x41, 0x6c, 0x69,
	0x67, 0x6e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52,
	0x12, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61,
	0x6d, 0x71, 0x70, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0e, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x74,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61,
	0x6d, 0x71, 0x70, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x52, 0x0e, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x12, 0x52, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xc8, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x15, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0xc9,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61,
	0x70, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6d, 0x71, 0x70,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x55, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0xad, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x52, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x6a, 0x0a, 0x1d, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xae, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x25, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xaf,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x6d,
	0x61, 0x6e, 0x61, 0x78, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x25, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x76, 0x0a, 0x21, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x73, 0x73,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xb0,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x73, 0x73,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x21,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x52, 0x73, 0x73, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x7f, 0x0a, 0x24, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x54, 0x77, 0x69, 0x74, 0x63, 0x68, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xb1, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x54, 0x77, 0x69, 0x74, 0x63, 0x68, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x24, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x54, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x25, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xb2, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x54, 0x77, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x25, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x25, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x59, 0x6f, 0x75, 0x74,
	0x75, 0x62, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0xb3, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x59, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x25, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x59, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x16,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0xde, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x61, 0x6d, 0x71, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x16, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x1a, 0x65, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65,
	0x64, 0x69, 0x61, 0x41, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e,
	0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x41, 0x6c, 0x6d, 0x61,
	0x6e, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1a, 0x65, 0x6e, 0x63, 0x79,
	0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x41, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x19, 0x65, 0x6e, 0x63, 0x79, 0x63, 0x6c,
	0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x41, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x18, 0x91, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x6d, 0x71,
	0x70, 0x2e, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x41, 0x6c,
	0x6d, 0x61, 0x6e, 0x61, 0x78, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x19, 0x65, 0x6e, 0x63,
	0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x41, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x79, 0x0a, 0x22, 0x65, 0x6e, 0x63, 0x79, 0x63, 0x6c,
	0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x41, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x92, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45, 0x6e, 0x63, 0x79, 0x63,
	0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x41, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x22, 0x65,
	0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x41, 0x6c, 0x6d, 0x61, 0x6e,
	0x61, 0x78, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x76, 0x0a, 0x21, 0x65, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69,
	0x61, 0x41, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x93, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69,
	0x61, 0x41, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x21, 0x65, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70,
	0x65, 0x64, 0x69, 0x61, 0x41, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x73, 0x0a, 0x20, 0x65, 0x6e, 0x63,
	0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x41, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x94, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45, 0x6e, 0x63, 0x79,
	0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x41, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x20, 0x65, 0x6e,
	0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x41, 0x6c, 0x6d, 0x61, 0x6e, 0x61,
	0x78, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x70,
	0x0a, 0x1f, 0x65, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x41, 0x6c,
	0x6d, 0x61, 0x6e, 0x61, 0x78, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x18, 0x95, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e,
	0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x41, 0x6c, 0x6d, 0x61,
	0x6e, 0x61, 0x78, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52,
	0x1f, 0x65, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x41, 0x6c, 0x6d,
	0x61, 0x6e, 0x61, 0x78, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x12, 0x58, 0x0a, 0x17, 0x65, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x96, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c,
	0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x17, 0x65, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x16, 0x65, 0x6e,
	0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x18, 0x97, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6d,
	0x71, 0x70, 0x2e, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x16, 0x65, 0x6e, 0x63, 0x79, 0x63,
	0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x12, 0x58, 0x0a, 0x17, 0x65, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69,
	0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x98, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45, 0x6e, 0x63, 0x79, 0x63,
	0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x17, 0x65, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x16, 0x65,
	0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x99, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61,
	0x6d, 0x71, 0x70, 0x2e, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61,
	0x49, 0x74, 0x65, 0x6d, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x16, 0x65, 0x6e, 0x63, 0x79,
	0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x12, 0x46, 0x0a, 0x11, 0x6a, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xf4, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x4a, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x6a, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x42,
	0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x10, 0x6a, 0x6f,
	0x62, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0xf5,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x4a, 0x6f, 0x62,
	0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x10, 0x6a,
	0x6f, 0x62, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12,
	0x46, 0x0a, 0x11, 0x6a, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0xf6, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6d,
	0x71, 0x70, 0x2e, 0x4a, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x6a, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x10, 0x6a, 0x6f, 0x62, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0xf7, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x4a, 0x6f, 0x62, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x10, 0x6a, 0x6f, 0x62, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0d,
	0x6a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xf8, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x4a, 0x6f, 0x62, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x6a, 0x6f, 0x62, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0c, 0x6a, 0x6f, 0x62, 0x53,
	0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0xf9, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x52, 0x0c, 0x6a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x12, 0x49, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x73, 0x41, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xd8, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x41, 0x6c, 0x6d, 0x61, 0x6e, 0x61,
	0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x12, 0x6e, 0x65, 0x77, 0x73, 0x41, 0x6c,
	0x6d, 0x61, 0x6e, 0x61, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x12,
	0x6e, 0x65, 0x77, 0x73, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0xd9, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6d, 0x71, 0x70,
	0x2e, 0x4e, 0x65, 0x77, 0x73, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x12, 0x6e, 0x65, 0x77, 0x73, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x73, 0x52,
	0x53, 0x53, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xda, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x53, 0x53, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x73, 0x52, 0x53, 0x53, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x73, 0x47, 0x61,
	0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xdb, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x47, 0x61, 0x6d, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x73, 0x47, 0x61, 0x6d,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x73,
	0x53, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xdc, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x53, 0x65, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x73, 0x53, 0x65, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x52, 0x0a, 0x15, 0x70, 0x6f, 0x72, 0x74, 0x61,
	0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0xbc, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x15, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x14, 0x70,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x18, 0xbd, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6d, 0x71,
	0x70, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x14, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0xe4, 0x09, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x42, 0x4f, 0x55, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x10, 0x64, 0x12, 0x1b, 0x0a, 0x16, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x5f, 0x47,
	0x45, 0x54, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10,
	0xc8, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x5f, 0x47, 0x45, 0x54, 0x5f,
	0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0xc9, 0x01, 0x12, 0x1b,
	0x0a, 0x16, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xca, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x41,
	0x4c, 0x49, 0x47, 0x4e, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x4e,
	0x53, 0x57, 0x45, 0x52, 0x10, 0xcb, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x41, 0x4c, 0x49, 0x47, 0x4e,
	0x5f, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xcc, 0x01, 0x12,
	0x15, 0x0a, 0x10, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x41, 0x4e, 0x53,
	0x57, 0x45, 0x52, 0x10, 0xcd, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x43, 0x4f, 0x4d, 0x50, 0x45, 0x54,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x10, 0xac, 0x02, 0x12, 0x1b, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x50, 0x45, 0x54, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0xad,
	0x02, 0x12, 0x1e, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x90,
	0x03, 0x12, 0x1d, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0x91, 0x03,
	0x12, 0x25, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x10, 0x92, 0x03, 0x12, 0x2e, 0x0a, 0x29, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x41, 0x4c, 0x4d,
	0x41, 0x4e, 0x41, 0x58, 0x5f, 0x57, 0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x10, 0x93, 0x03, 0x12, 0x2a, 0x0a, 0x25, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x53, 0x53,
	0x5f, 0x57, 0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0x94, 0x03, 0x12, 0x2d, 0x0a, 0x28, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f,
	0x57, 0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10,
	0x95, 0x03, 0x12, 0x2e, 0x0a, 0x29, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x57, 0x49, 0x54, 0x54, 0x45, 0x52, 0x5f,
	0x57, 0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10,
	0x96, 0x03, 0x12, 0x2e, 0x0a, 0x29, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x59, 0x4f, 0x55, 0x54, 0x55, 0x42, 0x45, 0x5f,
	0x57, 0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10,
	0x97, 0x03, 0x12, 0x1d, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0xc2,
	0x03, 0x12, 0x21, 0x0a, 0x1c, 0x45, 0x4e, 0x43, 0x59, 0x43, 0x4c, 0x4f, 0x50, 0x45, 0x44, 0x49,
	0x41, 0x5f, 0x41, 0x4c, 0x4d, 0x41, 0x4e, 0x41, 0x58, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x10, 0xf4, 0x03, 0x12, 0x20, 0x0a, 0x1b, 0x45, 0x4e, 0x43, 0x59, 0x43, 0x4c, 0x4f, 0x50,
	0x45, 0x44, 0x49, 0x41, 0x5f, 0x41, 0x4c, 0x4d, 0x41, 0x4e, 0x41, 0x58, 0x5f, 0x41, 0x4e, 0x53,
	0x57, 0x45, 0x52, 0x10, 0xf5, 0x03, 0x12, 0x2a, 0x0a, 0x25, 0x45, 0x4e, 0x43, 0x59, 0x43, 0x4c,
	0x4f, 0x50, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x41, 0x4c, 0x4d, 0x41, 0x4e, 0x41, 0x58, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10,
	0xf6, 0x03, 0x12, 0x29, 0x0a, 0x24, 0x45, 0x4e, 0x43, 0x59, 0x43, 0x4c, 0x4f, 0x50, 0x45, 0x44,
	0x49, 0x41, 0x5f, 0x41, 0x4c, 0x4d, 0x41, 0x4e, 0x41, 0x58, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0xf7, 0x03, 0x12, 0x28, 0x0a,
	0x23, 0x45, 0x4e, 0x43, 0x59, 0x43, 0x4c, 0x4f, 0x50, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x41, 0x4c,
	0x4d, 0x41, 0x4e, 0x41, 0x58, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x10, 0xf8, 0x03, 0x12, 0x27, 0x0a, 0x22, 0x45, 0x4e, 0x43, 0x59, 0x43,
	0x4c, 0x4f, 0x50, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x41, 0x4c, 0x4d, 0x41, 0x4e, 0x41, 0x58, 0x5f,
	0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0xf9, 0x03,
	0x12, 0x1e, 0x0a, 0x19, 0x45, 0x4e, 0x43, 0x59, 0x43, 0x4c, 0x4f, 0x50, 0x45, 0x44, 0x49, 0x41,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xfa, 0x03,
	0x12, 0x1d, 0x0a, 0x18, 0x45, 0x4e, 0x43, 0x59, 0x43, 0x4c, 0x4f, 0x50, 0x45, 0x44, 0x49, 0x41,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0xfb, 0x03, 0x12,
	0x1e, 0x0a, 0x19, 0x45, 0x4e, 0x43, 0x59, 0x43, 0x4c, 0x4f, 0x50, 0x45, 0x44, 0x49, 0x41, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xfc, 0x03, 0x12,
	0x1d, 0x0a, 0x18, 0x45, 0x4e, 0x43, 0x59, 0x43, 0x4c, 0x4f, 0x50, 0x45, 0x44, 0x49, 0x41, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0xfd, 0x03, 0x12, 0x11,
	0x0a, 0x0c, 0x48, 0x45, 0x4c, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xd8,
	0x04, 0x12, 0x19, 0x0a, 0x14, 0x4a, 0x4f, 0x42, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x4f, 0x4f,
	0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xbc, 0x05, 0x12, 0x18, 0x0a, 0x13,
	0x4a, 0x4f, 0x42, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x41, 0x4e, 0x53,
	0x57, 0x45, 0x52, 0x10, 0xbd, 0x05, 0x12, 0x19, 0x0a, 0x14, 0x4a, 0x4f, 0x42, 0x5f, 0x47, 0x45,
	0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xbe,
	0x05, 0x12, 0x18, 0x0a, 0x13, 0x4a, 0x4f, 0x42, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0xbf, 0x05, 0x12, 0x14, 0x0a, 0x0f, 0x4a,
	0x4f, 0x42, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xc0,
	0x05, 0x12, 0x13, 0x0a, 0x0e, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x41, 0x4e, 0x53,
	0x57, 0x45, 0x52, 0x10, 0xc1, 0x05, 0x12, 0x0d, 0x0a, 0x08, 0x4e, 0x45, 0x57, 0x53, 0x5f, 0x52,
	0x53, 0x53, 0x10, 0xa0, 0x06, 0x12, 0x11, 0x0a, 0x0c, 0x4e, 0x45, 0x57, 0x53, 0x5f, 0x54, 0x57,
	0x49, 0x54, 0x54, 0x45, 0x52, 0x10, 0xa1, 0x06, 0x12, 0x1c, 0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54,
	0x41, 0x4c, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x10, 0x84, 0x07, 0x12, 0x1b, 0x0a, 0x16, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x4c,
	0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52,
	0x10, 0x85, 0x07, 0x22, 0x21, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x22, 0xc4, 0x02, 0x0a, 0x07, 0x41, 0x6c, 0x6d, 0x61, 0x6e,
	0x61, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x6d, 0x71, 0x70,
	0x2e, 0x41, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x2e, 0x54, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x07, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x1a, 0xa9, 0x01, 0x0a, 0x07, 0x54, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6d,
	0x71, 0x70, 0x2e, 0x41, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x2e, 0x54, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0x52, 0x0a, 0x04, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x42, 0x0a,
	0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x22, 0xa9, 0x01, 0x0a, 0x13, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x47, 0x65, 0x74, 0x42, 0x6f,
	0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xcf, 0x02,
	0x0a, 0x12, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x09, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x76, 0x65, 0x72, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x41, 0x6c, 0x69,
	0x67, 0x6e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e,
	0x42, 0x65, 0x6c, 0x69, 0x65, 0x76, 0x65, 0x72, 0x52, 0x09, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x1a, 0x6a, 0x0a, 0x08, 0x42, 0x65, 0x6c, 0x69, 0x65, 0x76, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22,
	0x49, 0x0a, 0x13, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0xcf, 0x01, 0x0a, 0x12, 0x41,
	0x6c, 0x69, 0x67, 0x6e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x42, 0x0a,
	0x07, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x66,
	0x73, 0x1a, 0x59, 0x0a, 0x0f, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x8d, 0x01, 0x0a,
	0x0f, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x10, 0x0a, 0x0e,
	0x41, 0x6c, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0x35,
	0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xa6, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x61, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c,
	0x6d, 0x61, 0x70, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x70, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x55, 0x52, 0x4c,
	0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x70, 0x54, 0x61, 0x63, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x55,
	0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x54, 0x61, 0x63,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x52, 0x4c, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x33,
	0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x64, 0x22, 0x86, 0x09, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61,
	0x6d, 0x71, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x55, 0x0a, 0x0f, 0x61, 0x6c, 0x6d, 0x61,
	0x6e, 0x61, 0x78, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e,
	0x41, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x0f,
	0x61, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x12,
	0x49, 0x0a, 0x0b, 0x72, 0x73, 0x73, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x2e, 0x52, 0x73, 0x73, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x0b, 0x72,
	0x73, 0x73, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x52, 0x0a, 0x0e, 0x74, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x2e, 0x54, 0x77, 0x69, 0x74, 0x63, 0x68, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x0e,
	0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x55,
	0x0a, 0x0f, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x0f, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x55, 0x0a, 0x0f, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x59, 0x6f, 0x75,
	0x74, 0x75, 0x62, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x0f, 0x79, 0x6f, 0x75,
	0x74, 0x75, 0x62, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x1a, 0x49, 0x0a, 0x0d,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x4c, 0x0a, 0x0e, 0x41, 0x6c, 0x6d, 0x61, 0x6e,
	0x61, 0x78, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x1a, 0x60, 0x0a, 0x0a, 0x52, 0x73, 0x73, 0x57, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x65, 0x65, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x65, 0x65, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x1a, 0x6b, 0x0a, 0x0d, 0x54, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x49, 0x64, 0x1a, 0x6a, 0x0a, 0x0e, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x64,
	0x1a, 0x6a, 0x0a, 0x0e, 0x59, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x61, 0x73, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x61, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x22, 0x73, 0x0a, 0x1d,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x22, 0xbb, 0x01, 0x0a, 0x25, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22,
	0xcf, 0x01, 0x0a, 0x21, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x52, 0x73, 0x73, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x65, 0x65, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x65, 0x65, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x22, 0xda, 0x01, 0x0a, 0x24, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x54, 0x77, 0x69, 0x74, 0x63, 0x68, 0x57, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xd9,
	0x01, 0x0a, 0x25, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xd9, 0x01, 0x0a, 0x25, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x59,
	0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x76, 0x69, 0x64, 0x65, 0x61, 0x73, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x76, 0x69, 0x64, 0x65, 0x61, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x5c, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x22, 0x4c, 0x0a, 0x1a, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70,
	0x65, 0x64, 0x69, 0x61, 0x41, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x22, 0x6a, 0x0a, 0x19, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64,
	0x69, 0x61, 0x41, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12,
	0x27, 0x0a, 0x07, 0x61, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x41, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x52,
	0x07, 0x61, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x80,
	0x02, 0x0a, 0x20, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x41,
	0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45,
	0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x41, 0x6c, 0x6d, 0x61, 0x6e,
	0x61, 0x78, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x22, 0x0a,
	0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x45, 0x10,
	0x01, 0x22, 0xca, 0x01, 0x0a, 0x1f, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64,
	0x69, 0x61, 0x41, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x09, 0x61,
	0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x41, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x52, 0x09, 0x61,
	0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x40,
	0x0a, 0x22, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x41, 0x6c,
	0x6d, 0x61, 0x6e, 0x61, 0x78, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xa1, 0x02, 0x0a, 0x21, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69,
	0x61, 0x41, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x08, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e,
	0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x41, 0x6c, 0x6d, 0x61,
	0x6e, 0x61, 0x78, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x2e, 0x54, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x08, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x24, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x6d, 0x0a, 0x07, 0x54, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x08,
	0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x22, 0xa3, 0x01, 0x0a, 0x17, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f,
	0x70, 0x65, 0x64, 0x69, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45, 0x6e, 0x63, 0x79,
	0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x53, 0x45, 0x54, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c, 0x4d, 0x41, 0x4e, 0x41,
	0x58, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x03, 0x22, 0x7d, 0x0a, 0x16, 0x45, 0x6e,
	0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45, 0x6e, 0x63, 0x79, 0x63,
	0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x2a, 0x0a,
	0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x67, 0x0a, 0x17, 0x45, 0x6e, 0x63,
	0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x61,
	0x6d, 0x71, 0x70, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xcf, 0x13, 0x0a, 0x16, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65,
	0x64, 0x69, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x22, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x61, 0x6d,
	0x71, 0x70, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x44, 0x0a, 0x09, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45, 0x6e, 0x63, 0x79,
	0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45, 0x6e, 0x63, 0x79,
	0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x6d,
	0x71, 0x70, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x1a, 0xb7, 0x08, 0x0a, 0x09, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45, 0x6e, 0x63, 0x79, 0x63,
	0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x70, 0x6f, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f,
	0x70, 0x65, 0x64, 0x69, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x60, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f,
	0x70, 0x65, 0x64, 0x69, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x77, 0x65,
	0x61, 0x70, 0x6f, 0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f,
	0x70, 0x65, 0x64, 0x69, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x0d, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45, 0x6e,
	0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x07, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e,
	0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x49, 0x74, 0x65, 0x6d,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x0a,
	0x06, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69,
	0x61, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x52, 0x06, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x1a, 0xe5, 0x01, 0x0a, 0x0f, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x61, 0x78, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x6d, 0x61, 0x78, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61,
	0x78, 0x43, 0x61, 0x73, 0x74, 0x50, 0x65, 0x72, 0x54, 0x75, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x61, 0x73, 0x74, 0x50, 0x65, 0x72, 0x54, 0x75,
	0x72, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x72, 0x65, 0x61, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x61, 0x72, 0x65,
	0x61, 0x73, 0x1a, 0x95, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x69,
	0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x61, 0x6d, 0x71, 0x70, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x69,
	0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0d, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x1a, 0x2f, 0x0a, 0x09, 0x53, 0x65,
	0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xd9, 0x03, 0x0a, 0x03,
	0x53, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x73, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x73, 0x6d, 0x65, 0x74, 0x69,
	0x63, 0x12, 0x4a, 0x0a, 0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45, 0x6e, 0x63,
	0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x40, 0x0a,
	0x07, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64,
	0x69, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74,
	0x2e, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x07, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x65, 0x73, 0x1a,
	0x6e, 0x0a, 0x09, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x1a,
	0x66, 0x0a, 0x05, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x74,
	0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x07, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6d, 0x71, 0x70,
	0x2e, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x49, 0x74, 0x65,
	0x6d, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x07,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x1a, 0x2e, 0x0a, 0x06, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x1a, 0xdb, 0x03, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e,
	0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x49, 0x74, 0x65, 0x6d,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45, 0x6e,
	0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x4f, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61,
	0x6d, 0x71, 0x70, 0x2e, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61,
	0x49, 0x74, 0x65, 0x6d, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xc1, 0x01, 0x0a, 0x09, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x53, 0x0a, 0x07, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x61, 0x6d,
	0x71, 0x70, 0x2e, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x49,
	0x74, 0x65, 0x6d, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a,
	0x2d, 0x0a, 0x07, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x25,
	0x0a, 0x08, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x06, 0x0a,
	0x02, 0x4f, 0x52, 0x10, 0x02, 0x1a, 0xcc, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x12, 0x50, 0x0a, 0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45, 0x6e, 0x63,
	0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x1a, 0x70, 0x0a, 0x0a, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x22, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x11, 0x4a, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x42,
	0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x22, 0xff, 0x01, 0x0a, 0x10, 0x4a, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f,
	0x6b, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3e, 0x0a, 0x09, 0x63, 0x72, 0x61,
	0x66, 0x74, 0x73, 0x6d, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61,
	0x6d, 0x71, 0x70, 0x2e, 0x4a, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x61, 0x66, 0x74, 0x73, 0x6d, 0x61, 0x6e, 0x52, 0x09,
	0x63, 0x72, 0x61, 0x66, 0x74, 0x73, 0x6d, 0x65, 0x6e, 0x1a, 0x39, 0x0a, 0x09, 0x43, 0x72, 0x61,
	0x66, 0x74, 0x73, 0x6d, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x22, 0x47, 0x0a, 0x11, 0x4a, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa5, 0x01,
	0x0a, 0x10, 0x4a, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x6d, 0x71, 0x70, 0x2e, 0x4a, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x4a, 0x6f, 0x62, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x6f, 0x0a, 0x0d, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x0e, 0x0a, 0x0c, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0xde, 0x01, 0x0a, 0x12, 0x4e, 0x65, 0x77, 0x73, 0x41,
	0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a,
	0x09, 0x61, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x41, 0x6c, 0x6d, 0x61,
	0x6e, 0x61, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x31, 0x38, 0x6e, 0x41,
	0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x52, 0x09, 0x61, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x65,
	0x73, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x5e, 0x0a, 0x0b, 0x49, 0x31, 0x38, 0x6e, 0x41,
	0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x12, 0x27, 0x0a, 0x07, 0x61, 0x6c, 0x6d, 0x61, 0x6e, 0x61,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x41,
	0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x52, 0x07, 0x61, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x12,
	0x26, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52,
	0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x22, 0x56, 0x0a, 0x12, 0x4e, 0x65, 0x77, 0x73, 0x54,
	0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22,
	0xb6, 0x01, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x53, 0x53, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x63,
	0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f,
	0x6e, 0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x2b, 0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x73,
	0x47, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x28, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x73, 0x53, 0x65, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0x55, 0x0a, 0x15, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x8a, 0x07, 0x0a, 0x14, 0x50, 0x6f, 0x72, 0x74, 0x61,
	0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12,
	0x47, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xa8, 0x06, 0x0a, 0x0e, 0x50, 0x6f, 0x72,
	0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x73, 0x12,
	0x4e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x24, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x8b, 0x03, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78,
	0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x73, 0x49, 0x6e, 0x43, 0x61, 0x6e, 0x6f, 0x70, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x49, 0x6e, 0x43, 0x61, 0x6e, 0x6f, 0x70, 0x79, 0x12, 0x5a,
	0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x70, 0x0a, 0x14, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x75, 0x0a, 0x09,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x65,
	0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x01, 0x79, 0x2a, 0x46, 0x0a, 0x04, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x41,
	0x4e, 0x59, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x4f, 0x46,
	0x55, 0x53, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x4f, 0x46,
	0x55, 0x53, 0x5f, 0x54, 0x4f, 0x55, 0x43, 0x48, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x4f,
	0x46, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x4f, 0x10, 0x03, 0x2a, 0x33, 0x0a, 0x08, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0x00,
	0x12, 0x06, 0x0a, 0x02, 0x46, 0x52, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x4e, 0x10, 0x02,
	0x12, 0x06, 0x0a, 0x02, 0x45, 0x53, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x44, 0x45, 0x10, 0x04,
	0x2a, 0xa5, 0x03, 0x0a, 0x0d, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x41, 0x4d, 0x55, 0x4c, 0x45, 0x54, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x58, 0x45, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x45, 0x4c, 0x54, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x42,
	0x4f, 0x4f, 0x54, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x09,
	0x0a, 0x05, 0x43, 0x4c, 0x4f, 0x41, 0x4b, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x41, 0x47,
	0x47, 0x45, 0x52, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x4f, 0x46, 0x55, 0x53, 0x10, 0x08,
	0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x52, 0x41, 0x47, 0x4f, 0x54, 0x55, 0x52, 0x4b, 0x45, 0x59, 0x10,
	0x09, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x41, 0x4d, 0x4d, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x07, 0x0a,
	0x03, 0x48, 0x41, 0x54, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x10,
	0x0c, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x45, 0x54, 0x10, 0x0d, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x45,
	0x54, 0x53, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x0e, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x49, 0x43,
	0x4b, 0x41, 0x58, 0x45, 0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x59, 0x53, 0x4d, 0x41,
	0x52, 0x41, 0x44, 0x49, 0x54, 0x45, 0x10, 0x10, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x48, 0x49, 0x4e,
	0x45, 0x45, 0x54, 0x4c, 0x45, 0x10, 0x11, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x49, 0x4e, 0x47, 0x10,
	0x12, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x43, 0x59, 0x54, 0x48, 0x45, 0x10, 0x13, 0x12, 0x0c, 0x0a,
	0x08, 0x53, 0x45, 0x45, 0x4d, 0x59, 0x4f, 0x4f, 0x4c, 0x10, 0x14, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x48, 0x49, 0x45, 0x4c, 0x44, 0x10, 0x15, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x48, 0x4f, 0x56, 0x45,
	0x4c, 0x10, 0x16, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x41, 0x46, 0x46, 0x10, 0x17, 0x12, 0x09,
	0x0a, 0x05, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x18, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x4f, 0x4f,
	0x4c, 0x10, 0x19, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x52, 0x4f, 0x50, 0x48, 0x59, 0x10, 0x1a, 0x12,
	0x08, 0x0a, 0x04, 0x57, 0x41, 0x4e, 0x44, 0x10, 0x1b, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x53,
	0x54, 0x55, 0x4d, 0x45, 0x10, 0x1c, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x49, 0x56, 0x49, 0x4e, 0x47,
	0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x1d, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x49, 0x53,
	0x43, 0x5f, 0x43, 0x4f, 0x53, 0x4d, 0x45, 0x54, 0x49, 0x43, 0x10, 0x1e, 0x12, 0x10, 0x0a, 0x0c,
	0x53, 0x48, 0x4f, 0x55, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x44, 0x10, 0x1f, 0x12, 0x08,
	0x0a, 0x04, 0x57, 0x49, 0x4e, 0x47, 0x10, 0x20, 0x2a, 0x9f, 0x01, 0x0a, 0x08, 0x49, 0x74, 0x65,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x4e, 0x59, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4e, 0x53,
	0x55, 0x4d, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x43, 0x4f, 0x53, 0x4d, 0x45, 0x54, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08,
	0x53, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x07, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x3b,
	0x61, 0x6d, 0x71, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rabbitmq_proto_rawDescOnce sync.Once
	file_rabbitmq_proto_rawDescData = file_rabbitmq_proto_rawDesc
)

func file_rabbitmq_proto_rawDescGZIP() []byte {
	file_rabbitmq_proto_rawDescOnce.Do(func() {
		file_rabbitmq_proto_rawDescData = protoimpl.X.CompressGZIP(file_rabbitmq_proto_rawDescData)
	})
	return file_rabbitmq_proto_rawDescData
}

var file_rabbitmq_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_rabbitmq_proto_msgTypes = make([]protoimpl.MessageInfo, 74)
var file_rabbitmq_proto_goTypes = []interface{}{
	(Game)(0),                   // 0: amqp.Game
	(Language)(0),               // 1: amqp.Language
	(EquipmentType)(0),          // 2: amqp.EquipmentType
	(ItemType)(0),               // 3: amqp.ItemType
	(RabbitMQMessage_Type)(0),   // 4: amqp.RabbitMQMessage.Type
	(RabbitMQMessage_Status)(0), // 5: amqp.RabbitMQMessage.Status
	(EncyclopediaAlmanaxEffectRequest_RequestType)(0),              // 6: amqp.EncyclopediaAlmanaxEffectRequest.RequestType
	(EncyclopediaListRequest_Type)(0),                              // 7: amqp.EncyclopediaListRequest.Type
	(EncyclopediaItemAnswer_Conditions_Relation)(0),                // 8: amqp.EncyclopediaItemAnswer.Conditions.Relation
	(*RabbitMQMessage)(nil),                                        // 9: amqp.RabbitMQMessage
	(*Almanax)(nil),                                                // 10: amqp.Almanax
	(*Source)(nil),                                                 // 11: amqp.Source
	(*AlignGetBookRequest)(nil),                                    // 12: amqp.AlignGetBookRequest
	(*AlignGetBookAnswer)(nil),                                     // 13: amqp.AlignGetBookAnswer
	(*AlignGetUserRequest)(nil),                                    // 14: amqp.AlignGetUserRequest
	(*AlignGetUserAnswer)(nil),                                     // 15: amqp.AlignGetUserAnswer
	(*AlignSetRequest)(nil),                                        // 16: amqp.AlignSetRequest
	(*AlignSetAnswer)(nil),                                         // 17: amqp.AlignSetAnswer
	(*CompetitionMapRequest)(nil),                                  // 18: amqp.CompetitionMapRequest
	(*CompetitionMapAnswer)(nil),                                   // 19: amqp.CompetitionMapAnswer
	(*ConfigurationGetRequest)(nil),                                // 20: amqp.ConfigurationGetRequest
	(*ConfigurationGetAnswer)(nil),                                 // 21: amqp.ConfigurationGetAnswer
	(*ConfigurationSetServerRequest)(nil),                          // 22: amqp.ConfigurationSetServerRequest
	(*ConfigurationSetAlmanaxWebhookRequest)(nil),                  // 23: amqp.ConfigurationSetAlmanaxWebhookRequest
	(*ConfigurationSetRssWebhookRequest)(nil),                      // 24: amqp.ConfigurationSetRssWebhookRequest
	(*ConfigurationSetTwitchWebhookRequest)(nil),                   // 25: amqp.ConfigurationSetTwitchWebhookRequest
	(*ConfigurationSetTwitterWebhookRequest)(nil),                  // 26: amqp.ConfigurationSetTwitterWebhookRequest
	(*ConfigurationSetYoutubeWebhookRequest)(nil),                  // 27: amqp.ConfigurationSetYoutubeWebhookRequest
	(*ConfigurationSetAnswer)(nil),                                 // 28: amqp.ConfigurationSetAnswer
	(*EncyclopediaAlmanaxRequest)(nil),                             // 29: amqp.EncyclopediaAlmanaxRequest
	(*EncyclopediaAlmanaxAnswer)(nil),                              // 30: amqp.EncyclopediaAlmanaxAnswer
	(*EncyclopediaAlmanaxEffectRequest)(nil),                       // 31: amqp.EncyclopediaAlmanaxEffectRequest
	(*EncyclopediaAlmanaxEffectAnswer)(nil),                        // 32: amqp.EncyclopediaAlmanaxEffectAnswer
	(*EncyclopediaAlmanaxResourceRequest)(nil),                     // 33: amqp.EncyclopediaAlmanaxResourceRequest
	(*EncyclopediaAlmanaxResourceAnswer)(nil),                      // 34: amqp.EncyclopediaAlmanaxResourceAnswer
	(*EncyclopediaListRequest)(nil),                                // 35: amqp.EncyclopediaListRequest
	(*EncyclopediaListAnswer)(nil),                                 // 36: amqp.EncyclopediaListAnswer
	(*EncyclopediaItemRequest)(nil),                                // 37: amqp.EncyclopediaItemRequest
	(*EncyclopediaItemAnswer)(nil),                                 // 38: amqp.EncyclopediaItemAnswer
	(*JobGetBookRequest)(nil),                                      // 39: amqp.JobGetBookRequest
	(*JobGetBookAnswer)(nil),                                       // 40: amqp.JobGetBookAnswer
	(*JobGetUserRequest)(nil),                                      // 41: amqp.JobGetUserRequest
	(*JobGetUserAnswer)(nil),                                       // 42: amqp.JobGetUserAnswer
	(*JobSetRequest)(nil),                                          // 43: amqp.JobSetRequest
	(*JobSetAnswer)(nil),                                           // 44: amqp.JobSetAnswer
	(*NewsAlmanaxMessage)(nil),                                     // 45: amqp.NewsAlmanaxMessage
	(*NewsTwitterMessage)(nil),                                     // 46: amqp.NewsTwitterMessage
	(*NewsRSSMessage)(nil),                                         // 47: amqp.NewsRSSMessage
	(*NewsGameMessage)(nil),                                        // 48: amqp.NewsGameMessage
	(*NewsSetMessage)(nil),                                         // 49: amqp.NewsSetMessage
	(*PortalPositionRequest)(nil),                                  // 50: amqp.PortalPositionRequest
	(*PortalPositionAnswer)(nil),                                   // 51: amqp.PortalPositionAnswer
	(*Almanax_Tribute)(nil),                                        // 52: amqp.Almanax.Tribute
	(*Almanax_Tribute_Item)(nil),                                   // 53: amqp.Almanax.Tribute.Item
	(*AlignGetBookAnswer_Believer)(nil),                            // 54: amqp.AlignGetBookAnswer.Believer
	(*AlignGetUserAnswer_AlignExperience)(nil),                     // 55: amqp.AlignGetUserAnswer.AlignExperience
	(*ConfigurationGetAnswer_ChannelServer)(nil),                   // 56: amqp.ConfigurationGetAnswer.ChannelServer
	(*ConfigurationGetAnswer_AlmanaxWebhook)(nil),                  // 57: amqp.ConfigurationGetAnswer.AlmanaxWebhook
	(*ConfigurationGetAnswer_RssWebhook)(nil),                      // 58: amqp.ConfigurationGetAnswer.RssWebhook
	(*ConfigurationGetAnswer_TwitchWebhook)(nil),                   // 59: amqp.ConfigurationGetAnswer.TwitchWebhook
	(*ConfigurationGetAnswer_TwitterWebhook)(nil),                  // 60: amqp.ConfigurationGetAnswer.TwitterWebhook
	(*ConfigurationGetAnswer_YoutubeWebhook)(nil),                  // 61: amqp.ConfigurationGetAnswer.YoutubeWebhook
	(*EncyclopediaAlmanaxResourceAnswer_Tribute)(nil),              // 62: amqp.EncyclopediaAlmanaxResourceAnswer.Tribute
	(*EncyclopediaListAnswer_Item)(nil),                            // 63: amqp.EncyclopediaListAnswer.Item
	(*EncyclopediaItemAnswer_Equipment)(nil),                       // 64: amqp.EncyclopediaItemAnswer.Equipment
	(*EncyclopediaItemAnswer_Set)(nil),                             // 65: amqp.EncyclopediaItemAnswer.Set
	(*EncyclopediaItemAnswer_Effect)(nil),                          // 66: amqp.EncyclopediaItemAnswer.Effect
	(*EncyclopediaItemAnswer_Conditions)(nil),                      // 67: amqp.EncyclopediaItemAnswer.Conditions
	(*EncyclopediaItemAnswer_Recipe)(nil),                          // 68: amqp.EncyclopediaItemAnswer.Recipe
	(*EncyclopediaItemAnswer_Equipment_Characteristics)(nil),       // 69: amqp.EncyclopediaItemAnswer.Equipment.Characteristics
	(*EncyclopediaItemAnswer_Equipment_Type)(nil),                  // 70: amqp.EncyclopediaItemAnswer.Equipment.Type
	(*EncyclopediaItemAnswer_Equipment_SetFamily)(nil),             // 71: amqp.EncyclopediaItemAnswer.Equipment.SetFamily
	(*EncyclopediaItemAnswer_Set_Equipment)(nil),                   // 72: amqp.EncyclopediaItemAnswer.Set.Equipment
	(*EncyclopediaItemAnswer_Set_Bonus)(nil),                       // 73: amqp.EncyclopediaItemAnswer.Set.Bonus
	(*EncyclopediaItemAnswer_Conditions_Condition)(nil),            // 74: amqp.EncyclopediaItemAnswer.Conditions.Condition
	(*EncyclopediaItemAnswer_Conditions_Condition_Element)(nil),    // 75: amqp.EncyclopediaItemAnswer.Conditions.Condition.Element
	(*EncyclopediaItemAnswer_Recipe_Ingredient)(nil),               // 76: amqp.EncyclopediaItemAnswer.Recipe.Ingredient
	(*JobGetBookAnswer_Craftsman)(nil),                             // 77: amqp.JobGetBookAnswer.Craftsman
	(*JobGetUserAnswer_JobExperience)(nil),                         // 78: amqp.JobGetUserAnswer.JobExperience
	(*NewsAlmanaxMessage_I18NAlmanax)(nil),                         // 79: amqp.NewsAlmanaxMessage.I18nAlmanax
	(*PortalPositionAnswer_PortalPosition)(nil),                    // 80: amqp.PortalPositionAnswer.PortalPosition
	(*PortalPositionAnswer_PortalPosition_Position)(nil),           // 81: amqp.PortalPositionAnswer.PortalPosition.Position
	(*PortalPositionAnswer_PortalPosition_Position_Transport)(nil), // 82: amqp.PortalPositionAnswer.PortalPosition.Position.Transport
	(*timestamp.Timestamp)(nil),                                    // 83: google.protobuf.Timestamp
}
var file_rabbitmq_proto_depIdxs = []int32{
	4,   // 0: amqp.RabbitMQMessage.type:type_name -> amqp.RabbitMQMessage.Type
	1,   // 1: amqp.RabbitMQMessage.language:type_name -> amqp.Language
	5,   // 2: amqp.RabbitMQMessage.status:type_name -> amqp.RabbitMQMessage.Status
	0,   // 3: amqp.RabbitMQMessage.game:type_name -> amqp.Game
	12,  // 4: amqp.RabbitMQMessage.alignGetBookRequest:type_name -> amqp.AlignGetBookRequest
	13,  // 5: amqp.RabbitMQMessage.alignGetBookAnswer:type_name -> amqp.AlignGetBookAnswer
	14,  // 6: amqp.RabbitMQMessage.alignGetUserRequest:type_name -> amqp.AlignGetUserRequest
	15,  // 7: amqp.RabbitMQMessage.alignGetUserAnswer:type_name -> amqp.AlignGetUserAnswer
	16,  // 8: amqp.RabbitMQMessage.alignSetRequest:type_name -> amqp.AlignSetRequest
	17,  // 9: amqp.RabbitMQMessage.alignSetAnswer:type_name -> amqp.AlignSetAnswer
	18,  // 10: amqp.RabbitMQMessage.competitionMapRequest:type_name -> amqp.CompetitionMapRequest
	19,  // 11: amqp.RabbitMQMessage.competitionMapAnswer:type_name -> amqp.CompetitionMapAnswer
	20,  // 12: amqp.RabbitMQMessage.configurationGetRequest:type_name -> amqp.ConfigurationGetRequest
	21,  // 13: amqp.RabbitMQMessage.configurationGetAnswer:type_name -> amqp.ConfigurationGetAnswer
	22,  // 14: amqp.RabbitMQMessage.configurationSetServerRequest:type_name -> amqp.ConfigurationSetServerRequest
	23,  // 15: amqp.RabbitMQMessage.configurationSetAlmanaxWebhookRequest:type_name -> amqp.ConfigurationSetAlmanaxWebhookRequest
	24,  // 16: amqp.RabbitMQMessage.configurationSetRssWebhookRequest:type_name -> amqp.ConfigurationSetRssWebhookRequest
	25,  // 17: amqp.RabbitMQMessage.configurationSetTwitchWebhookRequest:type_name -> amqp.ConfigurationSetTwitchWebhookRequest
	26,  // 18: amqp.RabbitMQMessage.configurationSetTwitterWebhookRequest:type_name -> amqp.ConfigurationSetTwitterWebhookRequest
	27,  // 19: amqp.RabbitMQMessage.configurationSetYoutubeWebhookRequest:type_name -> amqp.ConfigurationSetYoutubeWebhookRequest
	28,  // 20: amqp.RabbitMQMessage.configurationSetAnswer:type_name -> amqp.ConfigurationSetAnswer
	29,  // 21: amqp.RabbitMQMessage.encyclopediaAlmanaxRequest:type_name -> amqp.EncyclopediaAlmanaxRequest
	30,  // 22: amqp.RabbitMQMessage.encyclopediaAlmanaxAnswer:type_name -> amqp.EncyclopediaAlmanaxAnswer
	33,  // 23: amqp.RabbitMQMessage.encyclopediaAlmanaxResourceRequest:type_name -> amqp.EncyclopediaAlmanaxResourceRequest
	34,  // 24: amqp.RabbitMQMessage.encyclopediaAlmanaxResourceAnswer:type_name -> amqp.EncyclopediaAlmanaxResourceAnswer
	31,  // 25: amqp.RabbitMQMessage.encyclopediaAlmanaxEffectRequest:type_name -> amqp.EncyclopediaAlmanaxEffectRequest
	32,  // 26: amqp.RabbitMQMessage.encyclopediaAlmanaxEffectAnswer:type_name -> amqp.EncyclopediaAlmanaxEffectAnswer
	35,  // 27: amqp.RabbitMQMessage.encyclopediaListRequest:type_name -> amqp.EncyclopediaListRequest
	36,  // 28: amqp.RabbitMQMessage.encyclopediaListAnswer:type_name -> amqp.EncyclopediaListAnswer
	37,  // 29: amqp.RabbitMQMessage.encyclopediaItemRequest:type_name -> amqp.EncyclopediaItemRequest
	38,  // 30: amqp.RabbitMQMessage.encyclopediaItemAnswer:type_name -> amqp.EncyclopediaItemAnswer
	39,  // 31: amqp.RabbitMQMessage.jobGetBookRequest:type_name -> amqp.JobGetBookRequest
	40,  // 32: amqp.RabbitMQMessage.jobGetBookAnswer:type_name -> amqp.JobGetBookAnswer
	41,  // 33: amqp.RabbitMQMessage.jobGetUserRequest:type_name -> amqp.JobGetUserRequest
	42,  // 34: amqp.RabbitMQMessage.jobGetUserAnswer:type_name -> amqp.JobGetUserAnswer
	43,  // 35: amqp.RabbitMQMessage.jobSetRequest:type_name -> amqp.JobSetRequest
	44,  // 36: amqp.RabbitMQMessage.jobSetAnswer:type_name -> amqp.JobSetAnswer
	45,  // 37: amqp.RabbitMQMessage.newsAlmanaxMessage:type_name -> amqp.NewsAlmanaxMessage
	46,  // 38: amqp.RabbitMQMessage.newsTwitterMessage:type_name -> amqp.NewsTwitterMessage
	47,  // 39: amqp.RabbitMQMessage.newsRSSMessage:type_name -> amqp.NewsRSSMessage
	48,  // 40: amqp.RabbitMQMessage.newsGameMessage:type_name -> amqp.NewsGameMessage
	49,  // 41: amqp.RabbitMQMessage.newsSetMessage:type_name -> amqp.NewsSetMessage
	50,  // 42: amqp.RabbitMQMessage.portalPositionRequest:type_name -> amqp.PortalPositionRequest
	51,  // 43: amqp.RabbitMQMessage.portalPositionAnswer:type_name -> amqp.PortalPositionAnswer
	52,  // 44: amqp.Almanax.tribute:type_name -> amqp.Almanax.Tribute
	83,  // 45: amqp.Almanax.date:type_name -> google.protobuf.Timestamp
	54,  // 46: amqp.AlignGetBookAnswer.believers:type_name -> amqp.AlignGetBookAnswer.Believer
	55,  // 47: amqp.AlignGetUserAnswer.beliefs:type_name -> amqp.AlignGetUserAnswer.AlignExperience
	11,  // 48: amqp.CompetitionMapAnswer.source:type_name -> amqp.Source
	56,  // 49: amqp.ConfigurationGetAnswer.channelServers:type_name -> amqp.ConfigurationGetAnswer.ChannelServer
	57,  // 50: amqp.ConfigurationGetAnswer.almanaxWebhooks:type_name -> amqp.ConfigurationGetAnswer.AlmanaxWebhook
	58,  // 51: amqp.ConfigurationGetAnswer.rssWebhooks:type_name -> amqp.ConfigurationGetAnswer.RssWebhook
	59,  // 52: amqp.ConfigurationGetAnswer.twitchWebhooks:type_name -> amqp.ConfigurationGetAnswer.TwitchWebhook
	60,  // 53: amqp.ConfigurationGetAnswer.twitterWebhooks:type_name -> amqp.ConfigurationGetAnswer.TwitterWebhook
	61,  // 54: amqp.ConfigurationGetAnswer.youtubeWebhooks:type_name -> amqp.ConfigurationGetAnswer.YoutubeWebhook
	83,  // 55: amqp.EncyclopediaAlmanaxRequest.date:type_name -> google.protobuf.Timestamp
	10,  // 56: amqp.EncyclopediaAlmanaxAnswer.almanax:type_name -> amqp.Almanax
	11,  // 57: amqp.EncyclopediaAlmanaxAnswer.source:type_name -> amqp.Source
	83,  // 58: amqp.EncyclopediaAlmanaxEffectRequest.date:type_name -> google.protobuf.Timestamp
	6,   // 59: amqp.EncyclopediaAlmanaxEffectRequest.type:type_name -> amqp.EncyclopediaAlmanaxEffectRequest.RequestType
	10,  // 60: amqp.EncyclopediaAlmanaxEffectAnswer.almanaxes:type_name -> amqp.Almanax
	11,  // 61: amqp.EncyclopediaAlmanaxEffectAnswer.source:type_name -> amqp.Source
	62,  // 62: amqp.EncyclopediaAlmanaxResourceAnswer.tributes:type_name -> amqp.EncyclopediaAlmanaxResourceAnswer.Tribute
	11,  // 63: amqp.EncyclopediaAlmanaxResourceAnswer.source:type_name -> amqp.Source
	7,   // 64: amqp.EncyclopediaListRequest.type:type_name -> amqp.EncyclopediaListRequest.Type
	63,  // 65: amqp.EncyclopediaListAnswer.items:type_name -> amqp.EncyclopediaListAnswer.Item
	3,   // 66: amqp.EncyclopediaItemRequest.type:type_name -> amqp.ItemType
	3,   // 67: amqp.EncyclopediaItemAnswer.type:type_name -> amqp.ItemType
	64,  // 68: amqp.EncyclopediaItemAnswer.equipment:type_name -> amqp.EncyclopediaItemAnswer.Equipment
	65,  // 69: amqp.EncyclopediaItemAnswer.set:type_name -> amqp.EncyclopediaItemAnswer.Set
	11,  // 70: amqp.EncyclopediaItemAnswer.source:type_name -> amqp.Source
	77,  // 71: amqp.JobGetBookAnswer.craftsmen:type_name -> amqp.JobGetBookAnswer.Craftsman
	78,  // 72: amqp.JobGetUserAnswer.jobs:type_name -> amqp.JobGetUserAnswer.JobExperience
	79,  // 73: amqp.NewsAlmanaxMessage.almanaxes:type_name -> amqp.NewsAlmanaxMessage.I18nAlmanax
	11,  // 74: amqp.NewsAlmanaxMessage.source:type_name -> amqp.Source
	83,  // 75: amqp.NewsTwitterMessage.date:type_name -> google.protobuf.Timestamp
	83,  // 76: amqp.NewsRSSMessage.date:type_name -> google.protobuf.Timestamp
	80,  // 77: amqp.PortalPositionAnswer.positions:type_name -> amqp.PortalPositionAnswer.PortalPosition
	53,  // 78: amqp.Almanax.Tribute.item:type_name -> amqp.Almanax.Tribute.Item
	3,   // 79: amqp.Almanax.Tribute.Item.type:type_name -> amqp.ItemType
	3,   // 80: amqp.EncyclopediaAlmanaxResourceAnswer.Tribute.itemType:type_name -> amqp.ItemType
	70,  // 81: amqp.EncyclopediaItemAnswer.Equipment.type:type_name -> amqp.EncyclopediaItemAnswer.Equipment.Type
	71,  // 82: amqp.EncyclopediaItemAnswer.Equipment.set:type_name -> amqp.EncyclopediaItemAnswer.Equipment.SetFamily
	69,  // 83: amqp.EncyclopediaItemAnswer.Equipment.characteristics:type_name -> amqp.EncyclopediaItemAnswer.Equipment.Characteristics
	66,  // 84: amqp.EncyclopediaItemAnswer.Equipment.weaponEffects:type_name -> amqp.EncyclopediaItemAnswer.Effect
	66,  // 85: amqp.EncyclopediaItemAnswer.Equipment.effects:type_name -> amqp.EncyclopediaItemAnswer.Effect
	67,  // 86: amqp.EncyclopediaItemAnswer.Equipment.conditions:type_name -> amqp.EncyclopediaItemAnswer.Conditions
	68,  // 87: amqp.EncyclopediaItemAnswer.Equipment.recipe:type_name -> amqp.EncyclopediaItemAnswer.Recipe
	72,  // 88: amqp.EncyclopediaItemAnswer.Set.equipments:type_name -> amqp.EncyclopediaItemAnswer.Set.Equipment
	73,  // 89: amqp.EncyclopediaItemAnswer.Set.bonuses:type_name -> amqp.EncyclopediaItemAnswer.Set.Bonus
	8,   // 90: amqp.EncyclopediaItemAnswer.Conditions.relation:type_name -> amqp.EncyclopediaItemAnswer.Conditions.Relation
	67,  // 91: amqp.EncyclopediaItemAnswer.Conditions.children:type_name -> amqp.EncyclopediaItemAnswer.Conditions
	74,  // 92: amqp.EncyclopediaItemAnswer.Conditions.condition:type_name -> amqp.EncyclopediaItemAnswer.Conditions.Condition
	76,  // 93: amqp.EncyclopediaItemAnswer.Recipe.ingredients:type_name -> amqp.EncyclopediaItemAnswer.Recipe.Ingredient
	3,   // 94: amqp.EncyclopediaItemAnswer.Equipment.Type.itemType:type_name -> amqp.ItemType
	2,   // 95: amqp.EncyclopediaItemAnswer.Equipment.Type.equipmentType:type_name -> amqp.EquipmentType
	2,   // 96: amqp.EncyclopediaItemAnswer.Set.Equipment.type:type_name -> amqp.EquipmentType
	66,  // 97: amqp.EncyclopediaItemAnswer.Set.Bonus.effects:type_name -> amqp.EncyclopediaItemAnswer.Effect
	75,  // 98: amqp.EncyclopediaItemAnswer.Conditions.Condition.element:type_name -> amqp.EncyclopediaItemAnswer.Conditions.Condition.Element
	3,   // 99: amqp.EncyclopediaItemAnswer.Recipe.Ingredient.type:type_name -> amqp.ItemType
	10,  // 100: amqp.NewsAlmanaxMessage.I18nAlmanax.almanax:type_name -> amqp.Almanax
	1,   // 101: amqp.NewsAlmanaxMessage.I18nAlmanax.locale:type_name -> amqp.Language
	81,  // 102: amqp.PortalPositionAnswer.PortalPosition.position:type_name -> amqp.PortalPositionAnswer.PortalPosition.Position
	83,  // 103: amqp.PortalPositionAnswer.PortalPosition.createdAt:type_name -> google.protobuf.Timestamp
	83,  // 104: amqp.PortalPositionAnswer.PortalPosition.updatedAt:type_name -> google.protobuf.Timestamp
	11,  // 105: amqp.PortalPositionAnswer.PortalPosition.source:type_name -> amqp.Source
	82,  // 106: amqp.PortalPositionAnswer.PortalPosition.Position.transport:type_name -> amqp.PortalPositionAnswer.PortalPosition.Position.Transport
	82,  // 107: amqp.PortalPositionAnswer.PortalPosition.Position.conditionalTransport:type_name -> amqp.PortalPositionAnswer.PortalPosition.Position.Transport
	108, // [108:108] is the sub-list for method output_type
	108, // [108:108] is the sub-list for method input_type
	108, // [108:108] is the sub-list for extension type_name
	108, // [108:108] is the sub-list for extension extendee
	0,   // [0:108] is the sub-list for field type_name
}

func init() { file_rabbitmq_proto_init() }
func file_rabbitmq_proto_init() {
	if File_rabbitmq_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rabbitmq_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RabbitMQMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Almanax); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlignGetBookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlignGetBookAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlignGetUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlignGetUserAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlignSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlignSetAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompetitionMapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompetitionMapAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationGetAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationSetServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationSetAlmanaxWebhookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationSetRssWebhookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationSetTwitchWebhookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationSetTwitterWebhookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationSetYoutubeWebhookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationSetAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaAlmanaxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaAlmanaxAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaAlmanaxEffectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaAlmanaxEffectAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaAlmanaxResourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaAlmanaxResourceAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaListAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaItemAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobGetBookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobGetBookAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobGetUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobGetUserAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobSetAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsAlmanaxMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsTwitterMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsRSSMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsGameMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsSetMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortalPositionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortalPositionAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Almanax_Tribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Almanax_Tribute_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlignGetBookAnswer_Believer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlignGetUserAnswer_AlignExperience); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationGetAnswer_ChannelServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationGetAnswer_AlmanaxWebhook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationGetAnswer_RssWebhook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationGetAnswer_TwitchWebhook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationGetAnswer_TwitterWebhook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationGetAnswer_YoutubeWebhook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaAlmanaxResourceAnswer_Tribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaListAnswer_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaItemAnswer_Equipment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaItemAnswer_Set); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaItemAnswer_Effect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaItemAnswer_Conditions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaItemAnswer_Recipe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaItemAnswer_Equipment_Characteristics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaItemAnswer_Equipment_Type); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaItemAnswer_Equipment_SetFamily); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaItemAnswer_Set_Equipment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaItemAnswer_Set_Bonus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaItemAnswer_Conditions_Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaItemAnswer_Conditions_Condition_Element); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaItemAnswer_Recipe_Ingredient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobGetBookAnswer_Craftsman); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobGetUserAnswer_JobExperience); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsAlmanaxMessage_I18NAlmanax); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortalPositionAnswer_PortalPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortalPositionAnswer_PortalPosition_Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortalPositionAnswer_PortalPosition_Position_Transport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rabbitmq_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   74,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rabbitmq_proto_goTypes,
		DependencyIndexes: file_rabbitmq_proto_depIdxs,
		EnumInfos:         file_rabbitmq_proto_enumTypes,
		MessageInfos:      file_rabbitmq_proto_msgTypes,
	}.Build()
	File_rabbitmq_proto = out.File
	file_rabbitmq_proto_rawDesc = nil
	file_rabbitmq_proto_goTypes = nil
	file_rabbitmq_proto_depIdxs = nil
}
