// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.6.1
// source: rabbitmq.proto

package amqp

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Language int32

const (
	Language_ANY Language = 0
	Language_FR  Language = 1
	Language_EN  Language = 2
	Language_ES  Language = 3
	Language_DE  Language = 4
)

// Enum value maps for Language.
var (
	Language_name = map[int32]string{
		0: "ANY",
		1: "FR",
		2: "EN",
		3: "ES",
		4: "DE",
	}
	Language_value = map[string]int32{
		"ANY": 0,
		"FR":  1,
		"EN":  2,
		"ES":  3,
		"DE":  4,
	}
)

func (x Language) Enum() *Language {
	p := new(Language)
	*p = x
	return p
}

func (x Language) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Language) Descriptor() protoreflect.EnumDescriptor {
	return file_rabbitmq_proto_enumTypes[0].Descriptor()
}

func (Language) Type() protoreflect.EnumType {
	return &file_rabbitmq_proto_enumTypes[0]
}

func (x Language) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Language.Descriptor instead.
func (Language) EnumDescriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{0}
}

type EquipmentType int32

const (
	EquipmentType_HAT    EquipmentType = 0
	EquipmentType_CLOAK  EquipmentType = 1
	EquipmentType_AMULET EquipmentType = 2
	EquipmentType_RING   EquipmentType = 3
	EquipmentType_BELT   EquipmentType = 4
	EquipmentType_BOOT   EquipmentType = 5
	EquipmentType_WEAPON EquipmentType = 6
	EquipmentType_PET    EquipmentType = 7
	EquipmentType_DOFUS  EquipmentType = 8
)

// Enum value maps for EquipmentType.
var (
	EquipmentType_name = map[int32]string{
		0: "HAT",
		1: "CLOAK",
		2: "AMULET",
		3: "RING",
		4: "BELT",
		5: "BOOT",
		6: "WEAPON",
		7: "PET",
		8: "DOFUS",
	}
	EquipmentType_value = map[string]int32{
		"HAT":    0,
		"CLOAK":  1,
		"AMULET": 2,
		"RING":   3,
		"BELT":   4,
		"BOOT":   5,
		"WEAPON": 6,
		"PET":    7,
		"DOFUS":  8,
	}
)

func (x EquipmentType) Enum() *EquipmentType {
	p := new(EquipmentType)
	*p = x
	return p
}

func (x EquipmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EquipmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_rabbitmq_proto_enumTypes[1].Descriptor()
}

func (EquipmentType) Type() protoreflect.EnumType {
	return &file_rabbitmq_proto_enumTypes[1]
}

func (x EquipmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EquipmentType.Descriptor instead.
func (EquipmentType) EnumDescriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{1}
}

type RabbitMQMessage_Type int32

const (
	RabbitMQMessage_UNKNOWN                                   RabbitMQMessage_Type = 0
	RabbitMQMessage_ALIGN_GET_BOOK_REQUEST                    RabbitMQMessage_Type = 100
	RabbitMQMessage_ALIGN_GET_BOOK_ANSWER                     RabbitMQMessage_Type = 101
	RabbitMQMessage_ALIGN_GET_USER_REQUEST                    RabbitMQMessage_Type = 102
	RabbitMQMessage_ALIGN_GET_USER_ANSWER                     RabbitMQMessage_Type = 103
	RabbitMQMessage_ALIGN_SET_REQUEST                         RabbitMQMessage_Type = 104
	RabbitMQMessage_ALIGN_SET_ANSWER                          RabbitMQMessage_Type = 105
	RabbitMQMessage_CONFIGURATION_GET_REQUEST                 RabbitMQMessage_Type = 200
	RabbitMQMessage_CONFIGURATION_GET_ANSWER                  RabbitMQMessage_Type = 201
	RabbitMQMessage_CONFIGURATION_SET_SERVER_REQUEST          RabbitMQMessage_Type = 202
	RabbitMQMessage_CONFIGURATION_SET_ALMANAX_WEBHOOK_REQUEST RabbitMQMessage_Type = 203
	RabbitMQMessage_CONFIGURATION_SET_RSS_WEBHOOK_REQUEST     RabbitMQMessage_Type = 204
	RabbitMQMessage_CONFIGURATION_SET_TWITTER_WEBHOOK_REQUEST RabbitMQMessage_Type = 205
	RabbitMQMessage_CONFIGURATION_SET_ANSWER                  RabbitMQMessage_Type = 206
	RabbitMQMessage_ENCYCLOPEDIA_ALMANAX_REQUEST              RabbitMQMessage_Type = 300
	RabbitMQMessage_ENCYCLOPEDIA_ALMANAX_ANSWER               RabbitMQMessage_Type = 301
	RabbitMQMessage_ENCYCLOPEDIA_ITEM_LIST_REQUEST            RabbitMQMessage_Type = 302
	RabbitMQMessage_ENCYCLOPEDIA_ITEM_LIST_ANSWER             RabbitMQMessage_Type = 303
	RabbitMQMessage_ENCYCLOPEDIA_ITEM_REQUEST                 RabbitMQMessage_Type = 304
	RabbitMQMessage_ENCYCLOPEDIA_ITEM_ANSWER                  RabbitMQMessage_Type = 305
	RabbitMQMessage_ENCYCLOPEDIA_SET_LIST_REQUEST             RabbitMQMessage_Type = 306
	RabbitMQMessage_ENCYCLOPEDIA_SET_LIST_ANSWER              RabbitMQMessage_Type = 307
	RabbitMQMessage_ENCYCLOPEDIA_SET_REQUEST                  RabbitMQMessage_Type = 308
	RabbitMQMessage_ENCYCLOPEDIA_SET_ANSWER                   RabbitMQMessage_Type = 309
	RabbitMQMessage_JOB_GET_BOOK_REQUEST                      RabbitMQMessage_Type = 400
	RabbitMQMessage_JOB_GET_BOOK_ANSWER                       RabbitMQMessage_Type = 401
	RabbitMQMessage_JOB_GET_USER_REQUEST                      RabbitMQMessage_Type = 402
	RabbitMQMessage_JOB_GET_USER_ANSWER                       RabbitMQMessage_Type = 403
	RabbitMQMessage_JOB_SET_REQUEST                           RabbitMQMessage_Type = 404
	RabbitMQMessage_JOB_SET_ANSWER                            RabbitMQMessage_Type = 405
	RabbitMQMessage_NEWS_RSS                                  RabbitMQMessage_Type = 500
	RabbitMQMessage_NEWS_TWITTER                              RabbitMQMessage_Type = 501
	RabbitMQMessage_PORTAL_POSITION_REQUEST                   RabbitMQMessage_Type = 600
	RabbitMQMessage_PORTAL_POSITION_ANSWER                    RabbitMQMessage_Type = 601
)

// Enum value maps for RabbitMQMessage_Type.
var (
	RabbitMQMessage_Type_name = map[int32]string{
		0:   "UNKNOWN",
		100: "ALIGN_GET_BOOK_REQUEST",
		101: "ALIGN_GET_BOOK_ANSWER",
		102: "ALIGN_GET_USER_REQUEST",
		103: "ALIGN_GET_USER_ANSWER",
		104: "ALIGN_SET_REQUEST",
		105: "ALIGN_SET_ANSWER",
		200: "CONFIGURATION_GET_REQUEST",
		201: "CONFIGURATION_GET_ANSWER",
		202: "CONFIGURATION_SET_SERVER_REQUEST",
		203: "CONFIGURATION_SET_ALMANAX_WEBHOOK_REQUEST",
		204: "CONFIGURATION_SET_RSS_WEBHOOK_REQUEST",
		205: "CONFIGURATION_SET_TWITTER_WEBHOOK_REQUEST",
		206: "CONFIGURATION_SET_ANSWER",
		300: "ENCYCLOPEDIA_ALMANAX_REQUEST",
		301: "ENCYCLOPEDIA_ALMANAX_ANSWER",
		302: "ENCYCLOPEDIA_ITEM_LIST_REQUEST",
		303: "ENCYCLOPEDIA_ITEM_LIST_ANSWER",
		304: "ENCYCLOPEDIA_ITEM_REQUEST",
		305: "ENCYCLOPEDIA_ITEM_ANSWER",
		306: "ENCYCLOPEDIA_SET_LIST_REQUEST",
		307: "ENCYCLOPEDIA_SET_LIST_ANSWER",
		308: "ENCYCLOPEDIA_SET_REQUEST",
		309: "ENCYCLOPEDIA_SET_ANSWER",
		400: "JOB_GET_BOOK_REQUEST",
		401: "JOB_GET_BOOK_ANSWER",
		402: "JOB_GET_USER_REQUEST",
		403: "JOB_GET_USER_ANSWER",
		404: "JOB_SET_REQUEST",
		405: "JOB_SET_ANSWER",
		500: "NEWS_RSS",
		501: "NEWS_TWITTER",
		600: "PORTAL_POSITION_REQUEST",
		601: "PORTAL_POSITION_ANSWER",
	}
	RabbitMQMessage_Type_value = map[string]int32{
		"UNKNOWN":                                   0,
		"ALIGN_GET_BOOK_REQUEST":                    100,
		"ALIGN_GET_BOOK_ANSWER":                     101,
		"ALIGN_GET_USER_REQUEST":                    102,
		"ALIGN_GET_USER_ANSWER":                     103,
		"ALIGN_SET_REQUEST":                         104,
		"ALIGN_SET_ANSWER":                          105,
		"CONFIGURATION_GET_REQUEST":                 200,
		"CONFIGURATION_GET_ANSWER":                  201,
		"CONFIGURATION_SET_SERVER_REQUEST":          202,
		"CONFIGURATION_SET_ALMANAX_WEBHOOK_REQUEST": 203,
		"CONFIGURATION_SET_RSS_WEBHOOK_REQUEST":     204,
		"CONFIGURATION_SET_TWITTER_WEBHOOK_REQUEST": 205,
		"CONFIGURATION_SET_ANSWER":                  206,
		"ENCYCLOPEDIA_ALMANAX_REQUEST":              300,
		"ENCYCLOPEDIA_ALMANAX_ANSWER":               301,
		"ENCYCLOPEDIA_ITEM_LIST_REQUEST":            302,
		"ENCYCLOPEDIA_ITEM_LIST_ANSWER":             303,
		"ENCYCLOPEDIA_ITEM_REQUEST":                 304,
		"ENCYCLOPEDIA_ITEM_ANSWER":                  305,
		"ENCYCLOPEDIA_SET_LIST_REQUEST":             306,
		"ENCYCLOPEDIA_SET_LIST_ANSWER":              307,
		"ENCYCLOPEDIA_SET_REQUEST":                  308,
		"ENCYCLOPEDIA_SET_ANSWER":                   309,
		"JOB_GET_BOOK_REQUEST":                      400,
		"JOB_GET_BOOK_ANSWER":                       401,
		"JOB_GET_USER_REQUEST":                      402,
		"JOB_GET_USER_ANSWER":                       403,
		"JOB_SET_REQUEST":                           404,
		"JOB_SET_ANSWER":                            405,
		"NEWS_RSS":                                  500,
		"NEWS_TWITTER":                              501,
		"PORTAL_POSITION_REQUEST":                   600,
		"PORTAL_POSITION_ANSWER":                    601,
	}
)

func (x RabbitMQMessage_Type) Enum() *RabbitMQMessage_Type {
	p := new(RabbitMQMessage_Type)
	*p = x
	return p
}

func (x RabbitMQMessage_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RabbitMQMessage_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_rabbitmq_proto_enumTypes[2].Descriptor()
}

func (RabbitMQMessage_Type) Type() protoreflect.EnumType {
	return &file_rabbitmq_proto_enumTypes[2]
}

func (x RabbitMQMessage_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RabbitMQMessage_Type.Descriptor instead.
func (RabbitMQMessage_Type) EnumDescriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{0, 0}
}

type RabbitMQMessage_Status int32

const (
	RabbitMQMessage_SUCCESS RabbitMQMessage_Status = 0
	RabbitMQMessage_FAILED  RabbitMQMessage_Status = 1
)

// Enum value maps for RabbitMQMessage_Status.
var (
	RabbitMQMessage_Status_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILED",
	}
	RabbitMQMessage_Status_value = map[string]int32{
		"SUCCESS": 0,
		"FAILED":  1,
	}
)

func (x RabbitMQMessage_Status) Enum() *RabbitMQMessage_Status {
	p := new(RabbitMQMessage_Status)
	*p = x
	return p
}

func (x RabbitMQMessage_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RabbitMQMessage_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_rabbitmq_proto_enumTypes[3].Descriptor()
}

func (RabbitMQMessage_Status) Type() protoreflect.EnumType {
	return &file_rabbitmq_proto_enumTypes[3]
}

func (x RabbitMQMessage_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RabbitMQMessage_Status.Descriptor instead.
func (RabbitMQMessage_Status) EnumDescriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{0, 1}
}

type RabbitMQMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                                  RabbitMQMessage_Type                   `protobuf:"varint,1,opt,name=type,proto3,enum=amqp.RabbitMQMessage_Type" json:"type,omitempty"`
	Language                              Language                               `protobuf:"varint,2,opt,name=language,proto3,enum=amqp.Language" json:"language,omitempty"`
	Status                                RabbitMQMessage_Status                 `protobuf:"varint,3,opt,name=status,proto3,enum=amqp.RabbitMQMessage_Status" json:"status,omitempty"`
	AlignGetBookRequest                   *AlignGetBookRequest                   `protobuf:"bytes,100,opt,name=alignGetBookRequest,proto3" json:"alignGetBookRequest,omitempty"`
	AlignGetBookAnswer                    *AlignGetBookAnswer                    `protobuf:"bytes,101,opt,name=alignGetBookAnswer,proto3" json:"alignGetBookAnswer,omitempty"`
	AlignGetUserRequest                   *AlignGetUserRequest                   `protobuf:"bytes,102,opt,name=alignGetUserRequest,proto3" json:"alignGetUserRequest,omitempty"`
	AlignGetUserAnswer                    *AlignGetUserAnswer                    `protobuf:"bytes,103,opt,name=alignGetUserAnswer,proto3" json:"alignGetUserAnswer,omitempty"`
	AlignSetRequest                       *AlignSetRequest                       `protobuf:"bytes,104,opt,name=alignSetRequest,proto3" json:"alignSetRequest,omitempty"`
	AlignSetAnswer                        *AlignSetAnswer                        `protobuf:"bytes,105,opt,name=alignSetAnswer,proto3" json:"alignSetAnswer,omitempty"`
	ConfigurationGetRequest               *ConfigurationGetRequest               `protobuf:"bytes,200,opt,name=configurationGetRequest,proto3" json:"configurationGetRequest,omitempty"`
	ConfigurationGetAnswer                *ConfigurationGetAnswer                `protobuf:"bytes,201,opt,name=configurationGetAnswer,proto3" json:"configurationGetAnswer,omitempty"`
	ConfigurationSetServerRequest         *ConfigurationSetServerRequest         `protobuf:"bytes,202,opt,name=configurationSetServerRequest,proto3" json:"configurationSetServerRequest,omitempty"`
	ConfigurationSetAlmanaxWebhookRequest *ConfigurationSetAlmanaxWebhookRequest `protobuf:"bytes,203,opt,name=configurationSetAlmanaxWebhookRequest,proto3" json:"configurationSetAlmanaxWebhookRequest,omitempty"`
	ConfigurationSetRssWebhookRequest     *ConfigurationSetRssWebhookRequest     `protobuf:"bytes,204,opt,name=configurationSetRssWebhookRequest,proto3" json:"configurationSetRssWebhookRequest,omitempty"`
	ConfigurationSetTwitterWebhookRequest *ConfigurationSetTwitterWebhookRequest `protobuf:"bytes,205,opt,name=configurationSetTwitterWebhookRequest,proto3" json:"configurationSetTwitterWebhookRequest,omitempty"`
	ConfigurationSetAnswer                *ConfigurationSetAnswer                `protobuf:"bytes,206,opt,name=configurationSetAnswer,proto3" json:"configurationSetAnswer,omitempty"`
	EncyclopediaAlmanaxRequest            *EncyclopediaAlmanaxRequest            `protobuf:"bytes,300,opt,name=encyclopediaAlmanaxRequest,proto3" json:"encyclopediaAlmanaxRequest,omitempty"`
	EncyclopediaAlmanaxAnswer             *EncyclopediaAlmanaxAnswer             `protobuf:"bytes,301,opt,name=encyclopediaAlmanaxAnswer,proto3" json:"encyclopediaAlmanaxAnswer,omitempty"`
	EncyclopediaItemListRequest           *EncyclopediaItemListRequest           `protobuf:"bytes,302,opt,name=encyclopediaItemListRequest,proto3" json:"encyclopediaItemListRequest,omitempty"`
	EncyclopediaItemListAnswer            *EncyclopediaItemListAnswer            `protobuf:"bytes,303,opt,name=encyclopediaItemListAnswer,proto3" json:"encyclopediaItemListAnswer,omitempty"`
	EncyclopediaItemRequest               *EncyclopediaItemRequest               `protobuf:"bytes,304,opt,name=encyclopediaItemRequest,proto3" json:"encyclopediaItemRequest,omitempty"`
	EncyclopediaItemAnswer                *EncyclopediaItemAnswer                `protobuf:"bytes,305,opt,name=encyclopediaItemAnswer,proto3" json:"encyclopediaItemAnswer,omitempty"`
	EncyclopediaSetListRequest            *EncyclopediaSetListRequest            `protobuf:"bytes,306,opt,name=encyclopediaSetListRequest,proto3" json:"encyclopediaSetListRequest,omitempty"`
	EncyclopediaSetListAnswer             *EncyclopediaSetListAnswer             `protobuf:"bytes,307,opt,name=encyclopediaSetListAnswer,proto3" json:"encyclopediaSetListAnswer,omitempty"`
	EncyclopediaSetRequest                *EncyclopediaSetRequest                `protobuf:"bytes,308,opt,name=encyclopediaSetRequest,proto3" json:"encyclopediaSetRequest,omitempty"`
	EncyclopediaSetAnswer                 *EncyclopediaSetAnswer                 `protobuf:"bytes,309,opt,name=encyclopediaSetAnswer,proto3" json:"encyclopediaSetAnswer,omitempty"`
	JobGetBookRequest                     *JobGetBookRequest                     `protobuf:"bytes,400,opt,name=jobGetBookRequest,proto3" json:"jobGetBookRequest,omitempty"`
	JobGetBookAnswer                      *JobGetBookAnswer                      `protobuf:"bytes,401,opt,name=jobGetBookAnswer,proto3" json:"jobGetBookAnswer,omitempty"`
	JobGetUserRequest                     *JobGetUserRequest                     `protobuf:"bytes,402,opt,name=jobGetUserRequest,proto3" json:"jobGetUserRequest,omitempty"`
	JobGetUserAnswer                      *JobGetUserAnswer                      `protobuf:"bytes,403,opt,name=jobGetUserAnswer,proto3" json:"jobGetUserAnswer,omitempty"`
	JobSetRequest                         *JobSetRequest                         `protobuf:"bytes,404,opt,name=jobSetRequest,proto3" json:"jobSetRequest,omitempty"`
	JobSetAnswer                          *JobSetAnswer                          `protobuf:"bytes,405,opt,name=jobSetAnswer,proto3" json:"jobSetAnswer,omitempty"`
	NewsTwitterMessage                    *NewsTwitterMessage                    `protobuf:"bytes,500,opt,name=newsTwitterMessage,proto3" json:"newsTwitterMessage,omitempty"`
	NewsRSSMessage                        *NewsRSSMessage                        `protobuf:"bytes,501,opt,name=newsRSSMessage,proto3" json:"newsRSSMessage,omitempty"`
	PortalPositionRequest                 *PortalPositionRequest                 `protobuf:"bytes,600,opt,name=portalPositionRequest,proto3" json:"portalPositionRequest,omitempty"`
	PortalPositionAnswer                  *PortalPositionAnswer                  `protobuf:"bytes,601,opt,name=portalPositionAnswer,proto3" json:"portalPositionAnswer,omitempty"`
}

func (x *RabbitMQMessage) Reset() {
	*x = RabbitMQMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RabbitMQMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RabbitMQMessage) ProtoMessage() {}

func (x *RabbitMQMessage) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RabbitMQMessage.ProtoReflect.Descriptor instead.
func (*RabbitMQMessage) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{0}
}

func (x *RabbitMQMessage) GetType() RabbitMQMessage_Type {
	if x != nil {
		return x.Type
	}
	return RabbitMQMessage_UNKNOWN
}

func (x *RabbitMQMessage) GetLanguage() Language {
	if x != nil {
		return x.Language
	}
	return Language_ANY
}

func (x *RabbitMQMessage) GetStatus() RabbitMQMessage_Status {
	if x != nil {
		return x.Status
	}
	return RabbitMQMessage_SUCCESS
}

func (x *RabbitMQMessage) GetAlignGetBookRequest() *AlignGetBookRequest {
	if x != nil {
		return x.AlignGetBookRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetAlignGetBookAnswer() *AlignGetBookAnswer {
	if x != nil {
		return x.AlignGetBookAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetAlignGetUserRequest() *AlignGetUserRequest {
	if x != nil {
		return x.AlignGetUserRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetAlignGetUserAnswer() *AlignGetUserAnswer {
	if x != nil {
		return x.AlignGetUserAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetAlignSetRequest() *AlignSetRequest {
	if x != nil {
		return x.AlignSetRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetAlignSetAnswer() *AlignSetAnswer {
	if x != nil {
		return x.AlignSetAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetConfigurationGetRequest() *ConfigurationGetRequest {
	if x != nil {
		return x.ConfigurationGetRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetConfigurationGetAnswer() *ConfigurationGetAnswer {
	if x != nil {
		return x.ConfigurationGetAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetConfigurationSetServerRequest() *ConfigurationSetServerRequest {
	if x != nil {
		return x.ConfigurationSetServerRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetConfigurationSetAlmanaxWebhookRequest() *ConfigurationSetAlmanaxWebhookRequest {
	if x != nil {
		return x.ConfigurationSetAlmanaxWebhookRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetConfigurationSetRssWebhookRequest() *ConfigurationSetRssWebhookRequest {
	if x != nil {
		return x.ConfigurationSetRssWebhookRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetConfigurationSetTwitterWebhookRequest() *ConfigurationSetTwitterWebhookRequest {
	if x != nil {
		return x.ConfigurationSetTwitterWebhookRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetConfigurationSetAnswer() *ConfigurationSetAnswer {
	if x != nil {
		return x.ConfigurationSetAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetEncyclopediaAlmanaxRequest() *EncyclopediaAlmanaxRequest {
	if x != nil {
		return x.EncyclopediaAlmanaxRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetEncyclopediaAlmanaxAnswer() *EncyclopediaAlmanaxAnswer {
	if x != nil {
		return x.EncyclopediaAlmanaxAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetEncyclopediaItemListRequest() *EncyclopediaItemListRequest {
	if x != nil {
		return x.EncyclopediaItemListRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetEncyclopediaItemListAnswer() *EncyclopediaItemListAnswer {
	if x != nil {
		return x.EncyclopediaItemListAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetEncyclopediaItemRequest() *EncyclopediaItemRequest {
	if x != nil {
		return x.EncyclopediaItemRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetEncyclopediaItemAnswer() *EncyclopediaItemAnswer {
	if x != nil {
		return x.EncyclopediaItemAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetEncyclopediaSetListRequest() *EncyclopediaSetListRequest {
	if x != nil {
		return x.EncyclopediaSetListRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetEncyclopediaSetListAnswer() *EncyclopediaSetListAnswer {
	if x != nil {
		return x.EncyclopediaSetListAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetEncyclopediaSetRequest() *EncyclopediaSetRequest {
	if x != nil {
		return x.EncyclopediaSetRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetEncyclopediaSetAnswer() *EncyclopediaSetAnswer {
	if x != nil {
		return x.EncyclopediaSetAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetJobGetBookRequest() *JobGetBookRequest {
	if x != nil {
		return x.JobGetBookRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetJobGetBookAnswer() *JobGetBookAnswer {
	if x != nil {
		return x.JobGetBookAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetJobGetUserRequest() *JobGetUserRequest {
	if x != nil {
		return x.JobGetUserRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetJobGetUserAnswer() *JobGetUserAnswer {
	if x != nil {
		return x.JobGetUserAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetJobSetRequest() *JobSetRequest {
	if x != nil {
		return x.JobSetRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetJobSetAnswer() *JobSetAnswer {
	if x != nil {
		return x.JobSetAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetNewsTwitterMessage() *NewsTwitterMessage {
	if x != nil {
		return x.NewsTwitterMessage
	}
	return nil
}

func (x *RabbitMQMessage) GetNewsRSSMessage() *NewsRSSMessage {
	if x != nil {
		return x.NewsRSSMessage
	}
	return nil
}

func (x *RabbitMQMessage) GetPortalPositionRequest() *PortalPositionRequest {
	if x != nil {
		return x.PortalPositionRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetPortalPositionAnswer() *PortalPositionAnswer {
	if x != nil {
		return x.PortalPositionAnswer
	}
	return nil
}

type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Icon string `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	Url  string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Source) Reset() {
	*x = Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{1}
}

func (x *Source) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Source) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Source) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type AlignGetBookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds  []string `protobuf:"bytes,1,rep,name=userIds,proto3" json:"userIds,omitempty"`
	CityId   string   `protobuf:"bytes,2,opt,name=cityId,proto3" json:"cityId,omitempty"`
	OrderId  string   `protobuf:"bytes,3,opt,name=orderId,proto3" json:"orderId,omitempty"`
	ServerId string   `protobuf:"bytes,4,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Limit    int64    `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *AlignGetBookRequest) Reset() {
	*x = AlignGetBookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlignGetBookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlignGetBookRequest) ProtoMessage() {}

func (x *AlignGetBookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlignGetBookRequest.ProtoReflect.Descriptor instead.
func (*AlignGetBookRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{2}
}

func (x *AlignGetBookRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *AlignGetBookRequest) GetCityId() string {
	if x != nil {
		return x.CityId
	}
	return ""
}

func (x *AlignGetBookRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *AlignGetBookRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *AlignGetBookRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type AlignGetBookAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId  string                         `protobuf:"bytes,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Believers []*AlignGetBookAnswer_Believer `protobuf:"bytes,2,rep,name=believers,proto3" json:"believers,omitempty"`
}

func (x *AlignGetBookAnswer) Reset() {
	*x = AlignGetBookAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlignGetBookAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlignGetBookAnswer) ProtoMessage() {}

func (x *AlignGetBookAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlignGetBookAnswer.ProtoReflect.Descriptor instead.
func (*AlignGetBookAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{3}
}

func (x *AlignGetBookAnswer) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *AlignGetBookAnswer) GetBelievers() []*AlignGetBookAnswer_Believer {
	if x != nil {
		return x.Believers
	}
	return nil
}

type AlignGetUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	ServerId string `protobuf:"bytes,2,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *AlignGetUserRequest) Reset() {
	*x = AlignGetUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlignGetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlignGetUserRequest) ProtoMessage() {}

func (x *AlignGetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlignGetUserRequest.ProtoReflect.Descriptor instead.
func (*AlignGetUserRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{4}
}

func (x *AlignGetUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AlignGetUserRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

type AlignGetUserAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId string                                `protobuf:"bytes,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Beliefs  []*AlignGetUserAnswer_AlignExperience `protobuf:"bytes,2,rep,name=beliefs,proto3" json:"beliefs,omitempty"`
}

func (x *AlignGetUserAnswer) Reset() {
	*x = AlignGetUserAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlignGetUserAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlignGetUserAnswer) ProtoMessage() {}

func (x *AlignGetUserAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlignGetUserAnswer.ProtoReflect.Descriptor instead.
func (*AlignGetUserAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{5}
}

func (x *AlignGetUserAnswer) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *AlignGetUserAnswer) GetBeliefs() []*AlignGetUserAnswer_AlignExperience {
	if x != nil {
		return x.Beliefs
	}
	return nil
}

type AlignSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	CityId   string `protobuf:"bytes,2,opt,name=cityId,proto3" json:"cityId,omitempty"`
	OrderId  string `protobuf:"bytes,3,opt,name=orderId,proto3" json:"orderId,omitempty"`
	ServerId string `protobuf:"bytes,4,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Level    int64  `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *AlignSetRequest) Reset() {
	*x = AlignSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlignSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlignSetRequest) ProtoMessage() {}

func (x *AlignSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlignSetRequest.ProtoReflect.Descriptor instead.
func (*AlignSetRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{6}
}

func (x *AlignSetRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AlignSetRequest) GetCityId() string {
	if x != nil {
		return x.CityId
	}
	return ""
}

func (x *AlignSetRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *AlignSetRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *AlignSetRequest) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

type AlignSetAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AlignSetAnswer) Reset() {
	*x = AlignSetAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlignSetAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlignSetAnswer) ProtoMessage() {}

func (x *AlignSetAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlignSetAnswer.ProtoReflect.Descriptor instead.
func (*AlignSetAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{7}
}

type ConfigurationGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId string `protobuf:"bytes,1,opt,name=guildId,proto3" json:"guildId,omitempty"`
}

func (x *ConfigurationGetRequest) Reset() {
	*x = ConfigurationGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationGetRequest) ProtoMessage() {}

func (x *ConfigurationGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationGetRequest.ProtoReflect.Descriptor instead.
func (*ConfigurationGetRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{8}
}

func (x *ConfigurationGetRequest) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

type ConfigurationGetAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId         string                                   `protobuf:"bytes,1,opt,name=guildId,proto3" json:"guildId,omitempty"`
	ServerId        string                                   `protobuf:"bytes,2,opt,name=serverId,proto3" json:"serverId,omitempty"`
	ChannelServers  []*ConfigurationGetAnswer_ChannelServer  `protobuf:"bytes,3,rep,name=channelServers,proto3" json:"channelServers,omitempty"`
	AlmanaxWebhooks []*ConfigurationGetAnswer_AlmanaxWebhook `protobuf:"bytes,4,rep,name=almanaxWebhooks,proto3" json:"almanaxWebhooks,omitempty"`
	RssWebhooks     []*ConfigurationGetAnswer_RssWebhook     `protobuf:"bytes,5,rep,name=rssWebhooks,proto3" json:"rssWebhooks,omitempty"`
	TwitterWebhooks []*ConfigurationGetAnswer_TwitterWebhook `protobuf:"bytes,6,rep,name=twitterWebhooks,proto3" json:"twitterWebhooks,omitempty"`
}

func (x *ConfigurationGetAnswer) Reset() {
	*x = ConfigurationGetAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationGetAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationGetAnswer) ProtoMessage() {}

func (x *ConfigurationGetAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationGetAnswer.ProtoReflect.Descriptor instead.
func (*ConfigurationGetAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{9}
}

func (x *ConfigurationGetAnswer) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *ConfigurationGetAnswer) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *ConfigurationGetAnswer) GetChannelServers() []*ConfigurationGetAnswer_ChannelServer {
	if x != nil {
		return x.ChannelServers
	}
	return nil
}

func (x *ConfigurationGetAnswer) GetAlmanaxWebhooks() []*ConfigurationGetAnswer_AlmanaxWebhook {
	if x != nil {
		return x.AlmanaxWebhooks
	}
	return nil
}

func (x *ConfigurationGetAnswer) GetRssWebhooks() []*ConfigurationGetAnswer_RssWebhook {
	if x != nil {
		return x.RssWebhooks
	}
	return nil
}

func (x *ConfigurationGetAnswer) GetTwitterWebhooks() []*ConfigurationGetAnswer_TwitterWebhook {
	if x != nil {
		return x.TwitterWebhooks
	}
	return nil
}

type ConfigurationSetServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId   string `protobuf:"bytes,1,opt,name=guildId,proto3" json:"guildId,omitempty"`
	ChannelId string `protobuf:"bytes,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	ServerId  string `protobuf:"bytes,3,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *ConfigurationSetServerRequest) Reset() {
	*x = ConfigurationSetServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationSetServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationSetServerRequest) ProtoMessage() {}

func (x *ConfigurationSetServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationSetServerRequest.ProtoReflect.Descriptor instead.
func (*ConfigurationSetServerRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{10}
}

func (x *ConfigurationSetServerRequest) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *ConfigurationSetServerRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ConfigurationSetServerRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

type ConfigurationSetAlmanaxWebhookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId      string   `protobuf:"bytes,1,opt,name=guildId,proto3" json:"guildId,omitempty"`
	ChannelId    string   `protobuf:"bytes,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	WebhookId    string   `protobuf:"bytes,3,opt,name=webhookId,proto3" json:"webhookId,omitempty"`
	WebhookToken string   `protobuf:"bytes,4,opt,name=webhookToken,proto3" json:"webhookToken,omitempty"`
	Enabled      bool     `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Language     Language `protobuf:"varint,6,opt,name=language,proto3,enum=amqp.Language" json:"language,omitempty"`
}

func (x *ConfigurationSetAlmanaxWebhookRequest) Reset() {
	*x = ConfigurationSetAlmanaxWebhookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationSetAlmanaxWebhookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationSetAlmanaxWebhookRequest) ProtoMessage() {}

func (x *ConfigurationSetAlmanaxWebhookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationSetAlmanaxWebhookRequest.ProtoReflect.Descriptor instead.
func (*ConfigurationSetAlmanaxWebhookRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{11}
}

func (x *ConfigurationSetAlmanaxWebhookRequest) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *ConfigurationSetAlmanaxWebhookRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ConfigurationSetAlmanaxWebhookRequest) GetWebhookId() string {
	if x != nil {
		return x.WebhookId
	}
	return ""
}

func (x *ConfigurationSetAlmanaxWebhookRequest) GetWebhookToken() string {
	if x != nil {
		return x.WebhookToken
	}
	return ""
}

func (x *ConfigurationSetAlmanaxWebhookRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ConfigurationSetAlmanaxWebhookRequest) GetLanguage() Language {
	if x != nil {
		return x.Language
	}
	return Language_ANY
}

type ConfigurationSetRssWebhookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId      string   `protobuf:"bytes,1,opt,name=guildId,proto3" json:"guildId,omitempty"`
	ChannelId    string   `protobuf:"bytes,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	FeedId       string   `protobuf:"bytes,3,opt,name=feedId,proto3" json:"feedId,omitempty"`
	WebhookId    string   `protobuf:"bytes,4,opt,name=webhookId,proto3" json:"webhookId,omitempty"`
	WebhookToken string   `protobuf:"bytes,5,opt,name=webhookToken,proto3" json:"webhookToken,omitempty"`
	Enabled      bool     `protobuf:"varint,6,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Language     Language `protobuf:"varint,7,opt,name=language,proto3,enum=amqp.Language" json:"language,omitempty"`
}

func (x *ConfigurationSetRssWebhookRequest) Reset() {
	*x = ConfigurationSetRssWebhookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationSetRssWebhookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationSetRssWebhookRequest) ProtoMessage() {}

func (x *ConfigurationSetRssWebhookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationSetRssWebhookRequest.ProtoReflect.Descriptor instead.
func (*ConfigurationSetRssWebhookRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{12}
}

func (x *ConfigurationSetRssWebhookRequest) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *ConfigurationSetRssWebhookRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ConfigurationSetRssWebhookRequest) GetFeedId() string {
	if x != nil {
		return x.FeedId
	}
	return ""
}

func (x *ConfigurationSetRssWebhookRequest) GetWebhookId() string {
	if x != nil {
		return x.WebhookId
	}
	return ""
}

func (x *ConfigurationSetRssWebhookRequest) GetWebhookToken() string {
	if x != nil {
		return x.WebhookToken
	}
	return ""
}

func (x *ConfigurationSetRssWebhookRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ConfigurationSetRssWebhookRequest) GetLanguage() Language {
	if x != nil {
		return x.Language
	}
	return Language_ANY
}

type ConfigurationSetTwitterWebhookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId      string   `protobuf:"bytes,1,opt,name=guildId,proto3" json:"guildId,omitempty"`
	ChannelId    string   `protobuf:"bytes,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	WebhookId    string   `protobuf:"bytes,3,opt,name=webhookId,proto3" json:"webhookId,omitempty"`
	WebhookToken string   `protobuf:"bytes,4,opt,name=webhookToken,proto3" json:"webhookToken,omitempty"`
	Enabled      bool     `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Language     Language `protobuf:"varint,6,opt,name=language,proto3,enum=amqp.Language" json:"language,omitempty"`
}

func (x *ConfigurationSetTwitterWebhookRequest) Reset() {
	*x = ConfigurationSetTwitterWebhookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationSetTwitterWebhookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationSetTwitterWebhookRequest) ProtoMessage() {}

func (x *ConfigurationSetTwitterWebhookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationSetTwitterWebhookRequest.ProtoReflect.Descriptor instead.
func (*ConfigurationSetTwitterWebhookRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{13}
}

func (x *ConfigurationSetTwitterWebhookRequest) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *ConfigurationSetTwitterWebhookRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ConfigurationSetTwitterWebhookRequest) GetWebhookId() string {
	if x != nil {
		return x.WebhookId
	}
	return ""
}

func (x *ConfigurationSetTwitterWebhookRequest) GetWebhookToken() string {
	if x != nil {
		return x.WebhookToken
	}
	return ""
}

func (x *ConfigurationSetTwitterWebhookRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ConfigurationSetTwitterWebhookRequest) GetLanguage() Language {
	if x != nil {
		return x.Language
	}
	return Language_ANY
}

type ConfigurationSetAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebhookId     string `protobuf:"bytes,1,opt,name=webhookId,proto3" json:"webhookId,omitempty"`
	RemoveWebhook bool   `protobuf:"varint,2,opt,name=removeWebhook,proto3" json:"removeWebhook,omitempty"`
}

func (x *ConfigurationSetAnswer) Reset() {
	*x = ConfigurationSetAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationSetAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationSetAnswer) ProtoMessage() {}

func (x *ConfigurationSetAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationSetAnswer.ProtoReflect.Descriptor instead.
func (*ConfigurationSetAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{14}
}

func (x *ConfigurationSetAnswer) GetWebhookId() string {
	if x != nil {
		return x.WebhookId
	}
	return ""
}

func (x *ConfigurationSetAnswer) GetRemoveWebhook() bool {
	if x != nil {
		return x.RemoveWebhook
	}
	return false
}

type EncyclopediaAlmanaxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EncyclopediaAlmanaxRequest) Reset() {
	*x = EncyclopediaAlmanaxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaAlmanaxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaAlmanaxRequest) ProtoMessage() {}

func (x *EncyclopediaAlmanaxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaAlmanaxRequest.ProtoReflect.Descriptor instead.
func (*EncyclopediaAlmanaxRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{15}
}

type EncyclopediaAlmanaxAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EncyclopediaAlmanaxAnswer) Reset() {
	*x = EncyclopediaAlmanaxAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaAlmanaxAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaAlmanaxAnswer) ProtoMessage() {}

func (x *EncyclopediaAlmanaxAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaAlmanaxAnswer.ProtoReflect.Descriptor instead.
func (*EncyclopediaAlmanaxAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{16}
}

type EncyclopediaItemListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *EncyclopediaItemListRequest) Reset() {
	*x = EncyclopediaItemListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaItemListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaItemListRequest) ProtoMessage() {}

func (x *EncyclopediaItemListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaItemListRequest.ProtoReflect.Descriptor instead.
func (*EncyclopediaItemListRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{17}
}

func (x *EncyclopediaItemListRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type EncyclopediaItemListAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*EncyclopediaItemListAnswer_Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *EncyclopediaItemListAnswer) Reset() {
	*x = EncyclopediaItemListAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaItemListAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaItemListAnswer) ProtoMessage() {}

func (x *EncyclopediaItemListAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaItemListAnswer.ProtoReflect.Descriptor instead.
func (*EncyclopediaItemListAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{18}
}

func (x *EncyclopediaItemListAnswer) GetItems() []*EncyclopediaItemListAnswer_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type EncyclopediaItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *EncyclopediaItemRequest) Reset() {
	*x = EncyclopediaItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaItemRequest) ProtoMessage() {}

func (x *EncyclopediaItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaItemRequest.ProtoReflect.Descriptor instead.
func (*EncyclopediaItemRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{19}
}

func (x *EncyclopediaItemRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type EncyclopediaItemAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                           `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	LabelType     string                           `protobuf:"bytes,4,opt,name=labelType,proto3" json:"labelType,omitempty"`
	Level         int64                            `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`
	Pods          int64                            `protobuf:"varint,6,opt,name=pods,proto3" json:"pods,omitempty"`
	EquipmentType EquipmentType                    `protobuf:"varint,7,opt,name=equipmentType,proto3,enum=amqp.EquipmentType" json:"equipmentType,omitempty"`
	Set           *EncyclopediaItemAnswer_Set      `protobuf:"bytes,8,opt,name=set,proto3" json:"set,omitempty"`
	Effects       []*EncyclopediaItemAnswer_Effect `protobuf:"bytes,9,rep,name=effects,proto3" json:"effects,omitempty"`
	Source        *Source                          `protobuf:"bytes,10,opt,name=source,proto3" json:"source,omitempty"` // TODO Damage, Recipe, conditions, Misc (two hands, ap cost, etc)
}

func (x *EncyclopediaItemAnswer) Reset() {
	*x = EncyclopediaItemAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaItemAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaItemAnswer) ProtoMessage() {}

func (x *EncyclopediaItemAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaItemAnswer.ProtoReflect.Descriptor instead.
func (*EncyclopediaItemAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{20}
}

func (x *EncyclopediaItemAnswer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EncyclopediaItemAnswer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EncyclopediaItemAnswer) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EncyclopediaItemAnswer) GetLabelType() string {
	if x != nil {
		return x.LabelType
	}
	return ""
}

func (x *EncyclopediaItemAnswer) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *EncyclopediaItemAnswer) GetPods() int64 {
	if x != nil {
		return x.Pods
	}
	return 0
}

func (x *EncyclopediaItemAnswer) GetEquipmentType() EquipmentType {
	if x != nil {
		return x.EquipmentType
	}
	return EquipmentType_HAT
}

func (x *EncyclopediaItemAnswer) GetSet() *EncyclopediaItemAnswer_Set {
	if x != nil {
		return x.Set
	}
	return nil
}

func (x *EncyclopediaItemAnswer) GetEffects() []*EncyclopediaItemAnswer_Effect {
	if x != nil {
		return x.Effects
	}
	return nil
}

func (x *EncyclopediaItemAnswer) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

type EncyclopediaSetListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *EncyclopediaSetListRequest) Reset() {
	*x = EncyclopediaSetListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaSetListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaSetListRequest) ProtoMessage() {}

func (x *EncyclopediaSetListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaSetListRequest.ProtoReflect.Descriptor instead.
func (*EncyclopediaSetListRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{21}
}

func (x *EncyclopediaSetListRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type EncyclopediaSetListAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sets []*EncyclopediaSetListAnswer_Set `protobuf:"bytes,1,rep,name=sets,proto3" json:"sets,omitempty"`
}

func (x *EncyclopediaSetListAnswer) Reset() {
	*x = EncyclopediaSetListAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaSetListAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaSetListAnswer) ProtoMessage() {}

func (x *EncyclopediaSetListAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaSetListAnswer.ProtoReflect.Descriptor instead.
func (*EncyclopediaSetListAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{22}
}

func (x *EncyclopediaSetListAnswer) GetSets() []*EncyclopediaSetListAnswer_Set {
	if x != nil {
		return x.Sets
	}
	return nil
}

type EncyclopediaSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *EncyclopediaSetRequest) Reset() {
	*x = EncyclopediaSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaSetRequest) ProtoMessage() {}

func (x *EncyclopediaSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaSetRequest.ProtoReflect.Descriptor instead.
func (*EncyclopediaSetRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{23}
}

func (x *EncyclopediaSetRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type EncyclopediaSetAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string                             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Level      int64                              `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	Equipments []*EncyclopediaSetAnswer_Equipment `protobuf:"bytes,4,rep,name=equipments,proto3" json:"equipments,omitempty"`
	Bonuses    []*EncyclopediaSetAnswer_Bonus     `protobuf:"bytes,5,rep,name=bonuses,proto3" json:"bonuses,omitempty"`
	Source     *Source                            `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *EncyclopediaSetAnswer) Reset() {
	*x = EncyclopediaSetAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaSetAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaSetAnswer) ProtoMessage() {}

func (x *EncyclopediaSetAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaSetAnswer.ProtoReflect.Descriptor instead.
func (*EncyclopediaSetAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{24}
}

func (x *EncyclopediaSetAnswer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EncyclopediaSetAnswer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EncyclopediaSetAnswer) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *EncyclopediaSetAnswer) GetEquipments() []*EncyclopediaSetAnswer_Equipment {
	if x != nil {
		return x.Equipments
	}
	return nil
}

func (x *EncyclopediaSetAnswer) GetBonuses() []*EncyclopediaSetAnswer_Bonus {
	if x != nil {
		return x.Bonuses
	}
	return nil
}

func (x *EncyclopediaSetAnswer) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

type JobGetBookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds  []string `protobuf:"bytes,1,rep,name=userIds,proto3" json:"userIds,omitempty"`
	JobId    string   `protobuf:"bytes,2,opt,name=jobId,proto3" json:"jobId,omitempty"`
	ServerId string   `protobuf:"bytes,3,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Limit    int64    `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *JobGetBookRequest) Reset() {
	*x = JobGetBookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobGetBookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobGetBookRequest) ProtoMessage() {}

func (x *JobGetBookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobGetBookRequest.ProtoReflect.Descriptor instead.
func (*JobGetBookRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{25}
}

func (x *JobGetBookRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *JobGetBookRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobGetBookRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *JobGetBookRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type JobGetBookAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId     string                        `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	ServerId  string                        `protobuf:"bytes,2,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Craftsmen []*JobGetBookAnswer_Craftsman `protobuf:"bytes,3,rep,name=craftsmen,proto3" json:"craftsmen,omitempty"`
}

func (x *JobGetBookAnswer) Reset() {
	*x = JobGetBookAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobGetBookAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobGetBookAnswer) ProtoMessage() {}

func (x *JobGetBookAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobGetBookAnswer.ProtoReflect.Descriptor instead.
func (*JobGetBookAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{26}
}

func (x *JobGetBookAnswer) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobGetBookAnswer) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *JobGetBookAnswer) GetCraftsmen() []*JobGetBookAnswer_Craftsman {
	if x != nil {
		return x.Craftsmen
	}
	return nil
}

type JobGetUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	ServerId string `protobuf:"bytes,2,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *JobGetUserRequest) Reset() {
	*x = JobGetUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobGetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobGetUserRequest) ProtoMessage() {}

func (x *JobGetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobGetUserRequest.ProtoReflect.Descriptor instead.
func (*JobGetUserRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{27}
}

func (x *JobGetUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *JobGetUserRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

type JobGetUserAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId string                            `protobuf:"bytes,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Jobs     []*JobGetUserAnswer_JobExperience `protobuf:"bytes,2,rep,name=jobs,proto3" json:"jobs,omitempty"`
}

func (x *JobGetUserAnswer) Reset() {
	*x = JobGetUserAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobGetUserAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobGetUserAnswer) ProtoMessage() {}

func (x *JobGetUserAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobGetUserAnswer.ProtoReflect.Descriptor instead.
func (*JobGetUserAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{28}
}

func (x *JobGetUserAnswer) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *JobGetUserAnswer) GetJobs() []*JobGetUserAnswer_JobExperience {
	if x != nil {
		return x.Jobs
	}
	return nil
}

type JobSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	JobId    string `protobuf:"bytes,2,opt,name=jobId,proto3" json:"jobId,omitempty"`
	ServerId string `protobuf:"bytes,3,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Level    int64  `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *JobSetRequest) Reset() {
	*x = JobSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSetRequest) ProtoMessage() {}

func (x *JobSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSetRequest.ProtoReflect.Descriptor instead.
func (*JobSetRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{29}
}

func (x *JobSetRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *JobSetRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobSetRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *JobSetRequest) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

type JobSetAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *JobSetAnswer) Reset() {
	*x = JobSetAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobSetAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSetAnswer) ProtoMessage() {}

func (x *JobSetAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSetAnswer.ProtoReflect.Descriptor instead.
func (*JobSetAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{30}
}

type NewsTwitterMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url  string               `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Date *timestamp.Timestamp `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *NewsTwitterMessage) Reset() {
	*x = NewsTwitterMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsTwitterMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsTwitterMessage) ProtoMessage() {}

func (x *NewsTwitterMessage) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsTwitterMessage.ProtoReflect.Descriptor instead.
func (*NewsTwitterMessage) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{31}
}

func (x *NewsTwitterMessage) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *NewsTwitterMessage) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type NewsRSSMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title      string               `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	AuthorName string               `protobuf:"bytes,2,opt,name=authorName,proto3" json:"authorName,omitempty"`
	Url        string               `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	IconUrl    string               `protobuf:"bytes,4,opt,name=iconUrl,proto3" json:"iconUrl,omitempty"`
	Date       *timestamp.Timestamp `protobuf:"bytes,5,opt,name=date,proto3" json:"date,omitempty"`
	Type       string               `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *NewsRSSMessage) Reset() {
	*x = NewsRSSMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsRSSMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsRSSMessage) ProtoMessage() {}

func (x *NewsRSSMessage) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsRSSMessage.ProtoReflect.Descriptor instead.
func (*NewsRSSMessage) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{32}
}

func (x *NewsRSSMessage) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NewsRSSMessage) GetAuthorName() string {
	if x != nil {
		return x.AuthorName
	}
	return ""
}

func (x *NewsRSSMessage) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *NewsRSSMessage) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *NewsRSSMessage) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *NewsRSSMessage) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type PortalPositionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId    string `protobuf:"bytes,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	DimensionId string `protobuf:"bytes,2,opt,name=dimensionId,proto3" json:"dimensionId,omitempty"`
}

func (x *PortalPositionRequest) Reset() {
	*x = PortalPositionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortalPositionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalPositionRequest) ProtoMessage() {}

func (x *PortalPositionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalPositionRequest.ProtoReflect.Descriptor instead.
func (*PortalPositionRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{33}
}

func (x *PortalPositionRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *PortalPositionRequest) GetDimensionId() string {
	if x != nil {
		return x.DimensionId
	}
	return ""
}

type PortalPositionAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Positions []*PortalPositionAnswer_PortalPosition `protobuf:"bytes,1,rep,name=positions,proto3" json:"positions,omitempty"`
}

func (x *PortalPositionAnswer) Reset() {
	*x = PortalPositionAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortalPositionAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalPositionAnswer) ProtoMessage() {}

func (x *PortalPositionAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalPositionAnswer.ProtoReflect.Descriptor instead.
func (*PortalPositionAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{34}
}

func (x *PortalPositionAnswer) GetPositions() []*PortalPositionAnswer_PortalPosition {
	if x != nil {
		return x.Positions
	}
	return nil
}

type AlignGetBookAnswer_Believer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CityId  string `protobuf:"bytes,1,opt,name=cityId,proto3" json:"cityId,omitempty"`
	OrderId string `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`
	UserId  string `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"`
	Level   int64  `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *AlignGetBookAnswer_Believer) Reset() {
	*x = AlignGetBookAnswer_Believer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlignGetBookAnswer_Believer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlignGetBookAnswer_Believer) ProtoMessage() {}

func (x *AlignGetBookAnswer_Believer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlignGetBookAnswer_Believer.ProtoReflect.Descriptor instead.
func (*AlignGetBookAnswer_Believer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{3, 0}
}

func (x *AlignGetBookAnswer_Believer) GetCityId() string {
	if x != nil {
		return x.CityId
	}
	return ""
}

func (x *AlignGetBookAnswer_Believer) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *AlignGetBookAnswer_Believer) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AlignGetBookAnswer_Believer) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

type AlignGetUserAnswer_AlignExperience struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CityId  string `protobuf:"bytes,1,opt,name=cityId,proto3" json:"cityId,omitempty"`
	OrderId string `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`
	Level   int64  `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *AlignGetUserAnswer_AlignExperience) Reset() {
	*x = AlignGetUserAnswer_AlignExperience{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlignGetUserAnswer_AlignExperience) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlignGetUserAnswer_AlignExperience) ProtoMessage() {}

func (x *AlignGetUserAnswer_AlignExperience) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlignGetUserAnswer_AlignExperience.ProtoReflect.Descriptor instead.
func (*AlignGetUserAnswer_AlignExperience) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{5, 0}
}

func (x *AlignGetUserAnswer_AlignExperience) GetCityId() string {
	if x != nil {
		return x.CityId
	}
	return ""
}

func (x *AlignGetUserAnswer_AlignExperience) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *AlignGetUserAnswer_AlignExperience) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

type ConfigurationGetAnswer_ChannelServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string `protobuf:"bytes,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	ServerId  string `protobuf:"bytes,2,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *ConfigurationGetAnswer_ChannelServer) Reset() {
	*x = ConfigurationGetAnswer_ChannelServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationGetAnswer_ChannelServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationGetAnswer_ChannelServer) ProtoMessage() {}

func (x *ConfigurationGetAnswer_ChannelServer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationGetAnswer_ChannelServer.ProtoReflect.Descriptor instead.
func (*ConfigurationGetAnswer_ChannelServer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{9, 0}
}

func (x *ConfigurationGetAnswer_ChannelServer) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ConfigurationGetAnswer_ChannelServer) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

type ConfigurationGetAnswer_AlmanaxWebhook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string   `protobuf:"bytes,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	WebhookId string   `protobuf:"bytes,2,opt,name=webhookId,proto3" json:"webhookId,omitempty"`
	Language  Language `protobuf:"varint,3,opt,name=language,proto3,enum=amqp.Language" json:"language,omitempty"`
}

func (x *ConfigurationGetAnswer_AlmanaxWebhook) Reset() {
	*x = ConfigurationGetAnswer_AlmanaxWebhook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationGetAnswer_AlmanaxWebhook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationGetAnswer_AlmanaxWebhook) ProtoMessage() {}

func (x *ConfigurationGetAnswer_AlmanaxWebhook) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationGetAnswer_AlmanaxWebhook.ProtoReflect.Descriptor instead.
func (*ConfigurationGetAnswer_AlmanaxWebhook) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{9, 1}
}

func (x *ConfigurationGetAnswer_AlmanaxWebhook) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ConfigurationGetAnswer_AlmanaxWebhook) GetWebhookId() string {
	if x != nil {
		return x.WebhookId
	}
	return ""
}

func (x *ConfigurationGetAnswer_AlmanaxWebhook) GetLanguage() Language {
	if x != nil {
		return x.Language
	}
	return Language_ANY
}

type ConfigurationGetAnswer_RssWebhook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string   `protobuf:"bytes,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	FeedId    string   `protobuf:"bytes,2,opt,name=feedId,proto3" json:"feedId,omitempty"`
	WebhookId string   `protobuf:"bytes,3,opt,name=webhookId,proto3" json:"webhookId,omitempty"`
	Language  Language `protobuf:"varint,4,opt,name=language,proto3,enum=amqp.Language" json:"language,omitempty"`
}

func (x *ConfigurationGetAnswer_RssWebhook) Reset() {
	*x = ConfigurationGetAnswer_RssWebhook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationGetAnswer_RssWebhook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationGetAnswer_RssWebhook) ProtoMessage() {}

func (x *ConfigurationGetAnswer_RssWebhook) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationGetAnswer_RssWebhook.ProtoReflect.Descriptor instead.
func (*ConfigurationGetAnswer_RssWebhook) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{9, 2}
}

func (x *ConfigurationGetAnswer_RssWebhook) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ConfigurationGetAnswer_RssWebhook) GetFeedId() string {
	if x != nil {
		return x.FeedId
	}
	return ""
}

func (x *ConfigurationGetAnswer_RssWebhook) GetWebhookId() string {
	if x != nil {
		return x.WebhookId
	}
	return ""
}

func (x *ConfigurationGetAnswer_RssWebhook) GetLanguage() Language {
	if x != nil {
		return x.Language
	}
	return Language_ANY
}

type ConfigurationGetAnswer_TwitterWebhook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string   `protobuf:"bytes,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Name      string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	WebhookId string   `protobuf:"bytes,3,opt,name=webhookId,proto3" json:"webhookId,omitempty"`
	Language  Language `protobuf:"varint,4,opt,name=language,proto3,enum=amqp.Language" json:"language,omitempty"`
}

func (x *ConfigurationGetAnswer_TwitterWebhook) Reset() {
	*x = ConfigurationGetAnswer_TwitterWebhook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationGetAnswer_TwitterWebhook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationGetAnswer_TwitterWebhook) ProtoMessage() {}

func (x *ConfigurationGetAnswer_TwitterWebhook) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationGetAnswer_TwitterWebhook.ProtoReflect.Descriptor instead.
func (*ConfigurationGetAnswer_TwitterWebhook) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{9, 3}
}

func (x *ConfigurationGetAnswer_TwitterWebhook) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ConfigurationGetAnswer_TwitterWebhook) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConfigurationGetAnswer_TwitterWebhook) GetWebhookId() string {
	if x != nil {
		return x.WebhookId
	}
	return ""
}

func (x *ConfigurationGetAnswer_TwitterWebhook) GetLanguage() Language {
	if x != nil {
		return x.Language
	}
	return Language_ANY
}

type EncyclopediaItemListAnswer_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *EncyclopediaItemListAnswer_Item) Reset() {
	*x = EncyclopediaItemListAnswer_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaItemListAnswer_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaItemListAnswer_Item) ProtoMessage() {}

func (x *EncyclopediaItemListAnswer_Item) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaItemListAnswer_Item.ProtoReflect.Descriptor instead.
func (*EncyclopediaItemListAnswer_Item) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{18, 0}
}

func (x *EncyclopediaItemListAnswer_Item) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EncyclopediaItemListAnswer_Item) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type EncyclopediaItemAnswer_Effect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *EncyclopediaItemAnswer_Effect) Reset() {
	*x = EncyclopediaItemAnswer_Effect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaItemAnswer_Effect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaItemAnswer_Effect) ProtoMessage() {}

func (x *EncyclopediaItemAnswer_Effect) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaItemAnswer_Effect.ProtoReflect.Descriptor instead.
func (*EncyclopediaItemAnswer_Effect) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{20, 0}
}

func (x *EncyclopediaItemAnswer_Effect) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EncyclopediaItemAnswer_Effect) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type EncyclopediaItemAnswer_Set struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *EncyclopediaItemAnswer_Set) Reset() {
	*x = EncyclopediaItemAnswer_Set{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaItemAnswer_Set) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaItemAnswer_Set) ProtoMessage() {}

func (x *EncyclopediaItemAnswer_Set) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaItemAnswer_Set.ProtoReflect.Descriptor instead.
func (*EncyclopediaItemAnswer_Set) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{20, 1}
}

func (x *EncyclopediaItemAnswer_Set) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EncyclopediaItemAnswer_Set) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type EncyclopediaSetListAnswer_Set struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *EncyclopediaSetListAnswer_Set) Reset() {
	*x = EncyclopediaSetListAnswer_Set{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaSetListAnswer_Set) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaSetListAnswer_Set) ProtoMessage() {}

func (x *EncyclopediaSetListAnswer_Set) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaSetListAnswer_Set.ProtoReflect.Descriptor instead.
func (*EncyclopediaSetListAnswer_Set) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{22, 0}
}

func (x *EncyclopediaSetListAnswer_Set) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EncyclopediaSetListAnswer_Set) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type EncyclopediaSetAnswer_Equipment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type EquipmentType `protobuf:"varint,3,opt,name=type,proto3,enum=amqp.EquipmentType" json:"type,omitempty"`
}

func (x *EncyclopediaSetAnswer_Equipment) Reset() {
	*x = EncyclopediaSetAnswer_Equipment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaSetAnswer_Equipment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaSetAnswer_Equipment) ProtoMessage() {}

func (x *EncyclopediaSetAnswer_Equipment) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaSetAnswer_Equipment.ProtoReflect.Descriptor instead.
func (*EncyclopediaSetAnswer_Equipment) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{24, 0}
}

func (x *EncyclopediaSetAnswer_Equipment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EncyclopediaSetAnswer_Equipment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EncyclopediaSetAnswer_Equipment) GetType() EquipmentType {
	if x != nil {
		return x.Type
	}
	return EquipmentType_HAT
}

type EncyclopediaSetAnswer_Bonus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemNumber int64                           `protobuf:"varint,1,opt,name=itemNumber,proto3" json:"itemNumber,omitempty"`
	Effects    []*EncyclopediaSetAnswer_Effect `protobuf:"bytes,2,rep,name=effects,proto3" json:"effects,omitempty"`
}

func (x *EncyclopediaSetAnswer_Bonus) Reset() {
	*x = EncyclopediaSetAnswer_Bonus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaSetAnswer_Bonus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaSetAnswer_Bonus) ProtoMessage() {}

func (x *EncyclopediaSetAnswer_Bonus) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaSetAnswer_Bonus.ProtoReflect.Descriptor instead.
func (*EncyclopediaSetAnswer_Bonus) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{24, 1}
}

func (x *EncyclopediaSetAnswer_Bonus) GetItemNumber() int64 {
	if x != nil {
		return x.ItemNumber
	}
	return 0
}

func (x *EncyclopediaSetAnswer_Bonus) GetEffects() []*EncyclopediaSetAnswer_Effect {
	if x != nil {
		return x.Effects
	}
	return nil
}

type EncyclopediaSetAnswer_Effect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *EncyclopediaSetAnswer_Effect) Reset() {
	*x = EncyclopediaSetAnswer_Effect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncyclopediaSetAnswer_Effect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaSetAnswer_Effect) ProtoMessage() {}

func (x *EncyclopediaSetAnswer_Effect) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaSetAnswer_Effect.ProtoReflect.Descriptor instead.
func (*EncyclopediaSetAnswer_Effect) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{24, 2}
}

func (x *EncyclopediaSetAnswer_Effect) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EncyclopediaSetAnswer_Effect) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type JobGetBookAnswer_Craftsman struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Level  int64  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *JobGetBookAnswer_Craftsman) Reset() {
	*x = JobGetBookAnswer_Craftsman{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobGetBookAnswer_Craftsman) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobGetBookAnswer_Craftsman) ProtoMessage() {}

func (x *JobGetBookAnswer_Craftsman) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobGetBookAnswer_Craftsman.ProtoReflect.Descriptor instead.
func (*JobGetBookAnswer_Craftsman) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{26, 0}
}

func (x *JobGetBookAnswer_Craftsman) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *JobGetBookAnswer_Craftsman) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

type JobGetUserAnswer_JobExperience struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId string `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	Level int64  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *JobGetUserAnswer_JobExperience) Reset() {
	*x = JobGetUserAnswer_JobExperience{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobGetUserAnswer_JobExperience) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobGetUserAnswer_JobExperience) ProtoMessage() {}

func (x *JobGetUserAnswer_JobExperience) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobGetUserAnswer_JobExperience.ProtoReflect.Descriptor instead.
func (*JobGetUserAnswer_JobExperience) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{28, 0}
}

func (x *JobGetUserAnswer_JobExperience) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobGetUserAnswer_JobExperience) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

type PortalPositionAnswer_PortalPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId      string                                        `protobuf:"bytes,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	DimensionId   string                                        `protobuf:"bytes,2,opt,name=dimensionId,proto3" json:"dimensionId,omitempty"`
	RemainingUses int32                                         `protobuf:"varint,3,opt,name=remainingUses,proto3" json:"remainingUses,omitempty"`
	Position      *PortalPositionAnswer_PortalPosition_Position `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
	CreatedBy     string                                        `protobuf:"bytes,5,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	UpdatedBy     string                                        `protobuf:"bytes,6,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
	CreatedAt     *timestamp.Timestamp                          `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt     *timestamp.Timestamp                          `protobuf:"bytes,8,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Source        *Source                                       `protobuf:"bytes,9,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *PortalPositionAnswer_PortalPosition) Reset() {
	*x = PortalPositionAnswer_PortalPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortalPositionAnswer_PortalPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalPositionAnswer_PortalPosition) ProtoMessage() {}

func (x *PortalPositionAnswer_PortalPosition) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalPositionAnswer_PortalPosition.ProtoReflect.Descriptor instead.
func (*PortalPositionAnswer_PortalPosition) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{34, 0}
}

func (x *PortalPositionAnswer_PortalPosition) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition) GetDimensionId() string {
	if x != nil {
		return x.DimensionId
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition) GetRemainingUses() int32 {
	if x != nil {
		return x.RemainingUses
	}
	return 0
}

func (x *PortalPositionAnswer_PortalPosition) GetPosition() *PortalPositionAnswer_PortalPosition_Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *PortalPositionAnswer_PortalPosition) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PortalPositionAnswer_PortalPosition) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PortalPositionAnswer_PortalPosition) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

type PortalPositionAnswer_PortalPosition_Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X                    int32                                                   `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y                    int32                                                   `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	IsInCanopy           bool                                                    `protobuf:"varint,3,opt,name=isInCanopy,proto3" json:"isInCanopy,omitempty"`
	Transport            *PortalPositionAnswer_PortalPosition_Position_Transport `protobuf:"bytes,4,opt,name=transport,proto3" json:"transport,omitempty"`
	ConditionalTransport *PortalPositionAnswer_PortalPosition_Position_Transport `protobuf:"bytes,5,opt,name=conditionalTransport,proto3" json:"conditionalTransport,omitempty"`
}

func (x *PortalPositionAnswer_PortalPosition_Position) Reset() {
	*x = PortalPositionAnswer_PortalPosition_Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortalPositionAnswer_PortalPosition_Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalPositionAnswer_PortalPosition_Position) ProtoMessage() {}

func (x *PortalPositionAnswer_PortalPosition_Position) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalPositionAnswer_PortalPosition_Position.ProtoReflect.Descriptor instead.
func (*PortalPositionAnswer_PortalPosition_Position) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{34, 0, 0}
}

func (x *PortalPositionAnswer_PortalPosition_Position) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *PortalPositionAnswer_PortalPosition_Position) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *PortalPositionAnswer_PortalPosition_Position) GetIsInCanopy() bool {
	if x != nil {
		return x.IsInCanopy
	}
	return false
}

func (x *PortalPositionAnswer_PortalPosition_Position) GetTransport() *PortalPositionAnswer_PortalPosition_Position_Transport {
	if x != nil {
		return x.Transport
	}
	return nil
}

func (x *PortalPositionAnswer_PortalPosition_Position) GetConditionalTransport() *PortalPositionAnswer_PortalPosition_Position_Transport {
	if x != nil {
		return x.ConditionalTransport
	}
	return nil
}

type PortalPositionAnswer_PortalPosition_Position_Transport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaId    string `protobuf:"bytes,1,opt,name=areaId,proto3" json:"areaId,omitempty"`
	SubAreaId string `protobuf:"bytes,2,opt,name=subAreaId,proto3" json:"subAreaId,omitempty"`
	TypeId    string `protobuf:"bytes,3,opt,name=typeId,proto3" json:"typeId,omitempty"`
	X         int32  `protobuf:"varint,4,opt,name=x,proto3" json:"x,omitempty"`
	Y         int32  `protobuf:"varint,5,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) Reset() {
	*x = PortalPositionAnswer_PortalPosition_Position_Transport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalPositionAnswer_PortalPosition_Position_Transport) ProtoMessage() {}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalPositionAnswer_PortalPosition_Position_Transport.ProtoReflect.Descriptor instead.
func (*PortalPositionAnswer_PortalPosition_Position_Transport) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{34, 0, 0, 0}
}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) GetAreaId() string {
	if x != nil {
		return x.AreaId
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) GetSubAreaId() string {
	if x != nil {
		return x.SubAreaId
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) GetTypeId() string {
	if x != nil {
		return x.TypeId
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

var File_rabbitmq_proto protoreflect.FileDescriptor

var file_rabbitmq_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x6d, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x04, 0x61, 0x6d, 0x71, 0x70, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd7, 0x1f, 0x0a, 0x0f, 0x52, 0x61, 0x62, 0x62,
	0x69, 0x74, 0x4d, 0x51, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x6d, 0x71, 0x70,
	0x2e, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x4d, 0x51, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x61, 0x6d, 0x71, 0x70, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x52,
	0x61, 0x62, 0x62, 0x69, 0x74, 0x4d, 0x51, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a,
	0x13, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6d, 0x71,
	0x70, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x13, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x47, 0x65, 0x74, 0x42,
	0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x12, 0x61, 0x6c,
	0x69, 0x67, 0x6e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x41, 0x6c,
	0x69, 0x67, 0x6e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x52, 0x12, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x13, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x13, 0x61, 0x6c,
	0x69, 0x67, 0x6e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x48, 0x0a, 0x12, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x61, 0x6d, 0x71, 0x70, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x12, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0f, 0x61,
	0x6c, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x68,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x41, 0x6c, 0x69, 0x67,
	0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x61, 0x6c, 0x69,
	0x67, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0e,
	0x61, 0x6c, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x69,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x41, 0x6c, 0x69, 0x67,
	0x6e, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x0e, 0x61, 0x6c, 0x69, 0x67,
	0x6e, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x17, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61,
	0x6d, 0x71, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x17, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0xc9,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x6a, 0x0a, 0x1d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xca, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x25, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x6d, 0x61,
	0x6e, 0x61, 0x78, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x41, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x25, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x76, 0x0a, 0x21,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x52, 0x73, 0x73, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x52, 0x73, 0x73, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x21, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x52, 0x73, 0x73, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x25, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xcd,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x54, 0x77, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x25, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x16, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x18, 0xce, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6d, 0x71,
	0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x12, 0x61, 0x0a, 0x1a, 0x65, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61,
	0x41, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xac,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45, 0x6e, 0x63,
	0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x41, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1a, 0x65, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f,
	0x70, 0x65, 0x64, 0x69, 0x61, 0x41, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x19, 0x65, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65,
	0x64, 0x69, 0x61, 0x41, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x18, 0xad, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45,
	0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x41, 0x6c, 0x6d, 0x61, 0x6e,
	0x61, 0x78, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x19, 0x65, 0x6e, 0x63, 0x79, 0x63, 0x6c,
	0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x41, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x12, 0x64, 0x0a, 0x1b, 0x65, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65,
	0x64, 0x69, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0xae, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6d, 0x71, 0x70,
	0x2e, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x49, 0x74, 0x65,
	0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1b, 0x65, 0x6e,
	0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x61, 0x0a, 0x1a, 0x65, 0x6e, 0x63,
	0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0xaf, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64,
	0x69, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x52, 0x1a, 0x65, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x49, 0x74,
	0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x17,
	0x65, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xb0, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64,
	0x69, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x17, 0x65,
	0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x16, 0x65, 0x6e, 0x63, 0x79, 0x63, 0x6c,
	0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x18, 0xb1, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45,
	0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x16, 0x65, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65,
	0x64, 0x69, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x61, 0x0a,
	0x1a, 0x65, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x53, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xb2, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c,
	0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x1a, 0x65, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64,
	0x69, 0x61, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x5e, 0x0a, 0x19, 0x65, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61,
	0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0xb3, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45, 0x6e, 0x63, 0x79,
	0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x19, 0x65, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65,
	0x64, 0x69, 0x61, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x12, 0x55, 0x0a, 0x16, 0x65, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xb4, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f,
	0x70, 0x65, 0x64, 0x69, 0x61, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x16, 0x65, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x15, 0x65, 0x6e, 0x63, 0x79, 0x63,
	0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x18, 0xb5, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45,
	0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x53, 0x65, 0x74, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x52, 0x15, 0x65, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64,
	0x69, 0x61, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x11, 0x6a,
	0x6f, 0x62, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x4a,
	0x6f, 0x62, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x11, 0x6a, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x10, 0x6a, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f,
	0x6b, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x91, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x4a, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x10, 0x6a, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x42, 0x6f,
	0x6f, 0x6b, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x11, 0x6a, 0x6f, 0x62, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x92, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x4a, 0x6f, 0x62, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x6a,
	0x6f, 0x62, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x43, 0x0a, 0x10, 0x6a, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x18, 0x93, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x6d,
	0x71, 0x70, 0x2e, 0x4a, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x52, 0x10, 0x6a, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0d, 0x6a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x94, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x61, 0x6d, 0x71, 0x70, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0d, 0x6a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x37, 0x0a, 0x0c, 0x6a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x18, 0x95, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e,
	0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x0c, 0x6a, 0x6f,
	0x62, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x12, 0x6e, 0x65,
	0x77, 0x73, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0xf4, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x4e,
	0x65, 0x77, 0x73, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x12, 0x6e, 0x65, 0x77, 0x73, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x73, 0x52, 0x53, 0x53,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xf5, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x53, 0x53, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x73, 0x52, 0x53, 0x53, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x52, 0x0a, 0x15, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xd8, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x15, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x14, 0x70, 0x6f, 0x72, 0x74,
	0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x18, 0xd9, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x52, 0x14, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0x82, 0x08, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x1a, 0x0a, 0x16, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x4f, 0x4f,
	0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x64, 0x12, 0x19, 0x0a, 0x15, 0x41,
	0x4c, 0x49, 0x47, 0x4e, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x41, 0x4e,
	0x53, 0x57, 0x45, 0x52, 0x10, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x5f,
	0x47, 0x45, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0x66, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x5f, 0x47, 0x45, 0x54, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0x67, 0x12, 0x15, 0x0a,
	0x11, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x10, 0x68, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x5f, 0x53, 0x45,
	0x54, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0x69, 0x12, 0x1e, 0x0a, 0x19, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x45, 0x54, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xc8, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x45, 0x54, 0x5f,
	0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0xc9, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xca, 0x01,
	0x12, 0x2e, 0x0a, 0x29, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x41, 0x4c, 0x4d, 0x41, 0x4e, 0x41, 0x58, 0x5f, 0x57, 0x45,
	0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xcb, 0x01,
	0x12, 0x2a, 0x0a, 0x25, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x53, 0x53, 0x5f, 0x57, 0x45, 0x42, 0x48, 0x4f, 0x4f,
	0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xcc, 0x01, 0x12, 0x2e, 0x0a, 0x29,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45,
	0x54, 0x5f, 0x54, 0x57, 0x49, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x57, 0x45, 0x42, 0x48, 0x4f, 0x4f,
	0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xcd, 0x01, 0x12, 0x1d, 0x0a, 0x18,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45,
	0x54, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0xce, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x45,
	0x4e, 0x43, 0x59, 0x43, 0x4c, 0x4f, 0x50, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x41, 0x4c, 0x4d, 0x41,
	0x4e, 0x41, 0x58, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xac, 0x02, 0x12, 0x20,
	0x0a, 0x1b, 0x45, 0x4e, 0x43, 0x59, 0x43, 0x4c, 0x4f, 0x50, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x41,
	0x4c, 0x4d, 0x41, 0x4e, 0x41, 0x58, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0xad, 0x02,
	0x12, 0x23, 0x0a, 0x1e, 0x45, 0x4e, 0x43, 0x59, 0x43, 0x4c, 0x4f, 0x50, 0x45, 0x44, 0x49, 0x41,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x10, 0xae, 0x02, 0x12, 0x22, 0x0a, 0x1d, 0x45, 0x4e, 0x43, 0x59, 0x43, 0x4c, 0x4f,
	0x50, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0xaf, 0x02, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x4e, 0x43,
	0x59, 0x43, 0x4c, 0x4f, 0x50, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xb0, 0x02, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x4e, 0x43,
	0x59, 0x43, 0x4c, 0x4f, 0x50, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x41,
	0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0xb1, 0x02, 0x12, 0x22, 0x0a, 0x1d, 0x45, 0x4e, 0x43, 0x59,
	0x43, 0x4c, 0x4f, 0x50, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xb2, 0x02, 0x12, 0x21, 0x0a, 0x1c,
	0x45, 0x4e, 0x43, 0x59, 0x43, 0x4c, 0x4f, 0x50, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x53, 0x45, 0x54,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0xb3, 0x02, 0x12,
	0x1d, 0x0a, 0x18, 0x45, 0x4e, 0x43, 0x59, 0x43, 0x4c, 0x4f, 0x50, 0x45, 0x44, 0x49, 0x41, 0x5f,
	0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xb4, 0x02, 0x12, 0x1c,
	0x0a, 0x17, 0x45, 0x4e, 0x43, 0x59, 0x43, 0x4c, 0x4f, 0x50, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x53,
	0x45, 0x54, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0xb5, 0x02, 0x12, 0x19, 0x0a, 0x14,
	0x4a, 0x4f, 0x42, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x10, 0x90, 0x03, 0x12, 0x18, 0x0a, 0x13, 0x4a, 0x4f, 0x42, 0x5f, 0x47,
	0x45, 0x54, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0x91,
	0x03, 0x12, 0x19, 0x0a, 0x14, 0x4a, 0x4f, 0x42, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x92, 0x03, 0x12, 0x18, 0x0a, 0x13,
	0x4a, 0x4f, 0x42, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x4e, 0x53,
	0x57, 0x45, 0x52, 0x10, 0x93, 0x03, 0x12, 0x14, 0x0a, 0x0f, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x45,
	0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x94, 0x03, 0x12, 0x13, 0x0a, 0x0e,
	0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0x95,
	0x03, 0x12, 0x0d, 0x0a, 0x08, 0x4e, 0x45, 0x57, 0x53, 0x5f, 0x52, 0x53, 0x53, 0x10, 0xf4, 0x03,
	0x12, 0x11, 0x0a, 0x0c, 0x4e, 0x45, 0x57, 0x53, 0x5f, 0x54, 0x57, 0x49, 0x54, 0x54, 0x45, 0x52,
	0x10, 0xf5, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x4c, 0x5f, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xd8,
	0x04, 0x12, 0x1b, 0x0a, 0x16, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x4c, 0x5f, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0xd9, 0x04, 0x22, 0x21,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x01, 0x22, 0x42, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x93, 0x01, 0x0a, 0x13, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x47,
	0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xdd, 0x01, 0x0a, 0x12,
	0x41, 0x6c, 0x69, 0x67, 0x6e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3f,
	0x0a, 0x09, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x76, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x47, 0x65,
	0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x42, 0x65, 0x6c, 0x69,
	0x65, 0x76, 0x65, 0x72, 0x52, 0x09, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x76, 0x65, 0x72, 0x73, 0x1a,
	0x6a, 0x0a, 0x08, 0x42, 0x65, 0x6c, 0x69, 0x65, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x49, 0x0a, 0x13, 0x41,
	0x6c, 0x69, 0x67, 0x6e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0xcf, 0x01, 0x0a, 0x12, 0x41, 0x6c, 0x69, 0x67, 0x6e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x07, 0x62, 0x65, 0x6c,
	0x69, 0x65, 0x66, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6d, 0x71,
	0x70, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x73, 0x1a, 0x59, 0x0a,
	0x0f, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x8d, 0x01, 0x0a, 0x0f, 0x41, 0x6c, 0x69,
	0x67, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x10, 0x0a, 0x0e, 0x41, 0x6c, 0x69, 0x67,
	0x6e, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0x33, 0x0a, 0x17, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x22,
	0xfe, 0x06, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x52, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x12, 0x55, 0x0a, 0x0f, 0x61, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x61, 0x6d, 0x71, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x6d, 0x61,
	0x6e, 0x61, 0x78, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x0f, 0x61, 0x6c, 0x6d, 0x61,
	0x6e, 0x61, 0x78, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x49, 0x0a, 0x0b, 0x72,
	0x73, 0x73, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x52,
	0x73, 0x73, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x0b, 0x72, 0x73, 0x73, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x55, 0x0a, 0x0f, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x54, 0x77,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x0f, 0x74, 0x77,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x1a, 0x49, 0x0a,
	0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x78, 0x0a, 0x0e, 0x41, 0x6c, 0x6d, 0x61,
	0x6e, 0x61, 0x78, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x1a, 0x8c, 0x01, 0x0a, 0x0a, 0x52, 0x73, 0x73, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x65, 0x65, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x65, 0x65, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x1a, 0x8c, 0x01, 0x0a, 0x0e, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x22, 0x73, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0xe7, 0x01, 0x0a, 0x25, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x6d, 0x61, 0x6e, 0x61,
	0x78, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22,
	0xfb, 0x01, 0x0a, 0x21, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x52, 0x73, 0x73, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x65, 0x65, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x65, 0x65, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x2a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0xe7, 0x01,
	0x0a, 0x25, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x61, 0x6d, 0x71, 0x70, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x5c, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x22, 0x1c, 0x0a, 0x1a, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f,
	0x70, 0x65, 0x64, 0x69, 0x61, 0x41, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65,
	0x64, 0x69, 0x61, 0x41, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x78, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x22, 0x33, 0x0a, 0x1b, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61,
	0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x85, 0x01, 0x0a, 0x1a, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c,
	0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45, 0x6e, 0x63, 0x79, 0x63,
	0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x1a, 0x2a, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2f, 0x0a,
	0x17, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0xd5,
	0x03, 0x0a, 0x16, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x49,
	0x74, 0x65, 0x6d, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x0d, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0d, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x32, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65,
	0x64, 0x69, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x74, 0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45,
	0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x07, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x2e, 0x0a, 0x06, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x1a, 0x29, 0x0a, 0x03, 0x53,
	0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x32, 0x0a, 0x1a, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c,
	0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x7f, 0x0a, 0x19, 0x45, 0x6e,
	0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x04, 0x73, 0x65, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45, 0x6e, 0x63,
	0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x04, 0x73, 0x65, 0x74, 0x73,
	0x1a, 0x29, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2e, 0x0a, 0x16, 0x45,
	0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0xec, 0x03, 0x0a, 0x15,
	0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x53, 0x65, 0x74, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x45, 0x0a, 0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45, 0x6e, 0x63, 0x79, 0x63,
	0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45,
	0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x53, 0x65, 0x74, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x07, 0x62, 0x6f, 0x6e, 0x75,
	0x73, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x58, 0x0a, 0x09, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x1a, 0x65, 0x0a, 0x05, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x07,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x6d, 0x71, 0x70, 0x2e, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69,
	0x61, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x52, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x1a, 0x2e, 0x0a, 0x06, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x75, 0x0a, 0x11, 0x4a, 0x6f,
	0x62, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0xbf, 0x01, 0x0a, 0x10, 0x4a, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x09, 0x63, 0x72, 0x61, 0x66,
	0x74, 0x73, 0x6d, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6d,
	0x71, 0x70, 0x2e, 0x4a, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x61, 0x66, 0x74, 0x73, 0x6d, 0x61, 0x6e, 0x52, 0x09, 0x63,
	0x72, 0x61, 0x66, 0x74, 0x73, 0x6d, 0x65, 0x6e, 0x1a, 0x39, 0x0a, 0x09, 0x43, 0x72, 0x61, 0x66,
	0x74, 0x73, 0x6d, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x22, 0x47, 0x0a, 0x11, 0x4a, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa5, 0x01, 0x0a,
	0x10, 0x4a, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a,
	0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6d,
	0x71, 0x70, 0x2e, 0x4a, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x4a, 0x6f, 0x62, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x22, 0x6f, 0x0a, 0x0d, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f,
	0x62, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x0e, 0x0a, 0x0c, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0x56, 0x0a, 0x12, 0x4e, 0x65, 0x77, 0x73, 0x54, 0x77, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x2e, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0xb6, 0x01,
	0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x53, 0x53, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x63, 0x6f, 0x6e,
	0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55,
	0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x55, 0x0a, 0x15, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x8a, 0x07,
	0x0a, 0x14, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6d, 0x71, 0x70,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0xa8, 0x06, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x55, 0x73, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x8b, 0x03, 0x0a,
	0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x01, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x49, 0x6e, 0x43, 0x61, 0x6e,
	0x6f, 0x70, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x49, 0x6e, 0x43,
	0x61, 0x6e, 0x6f, 0x70, 0x79, 0x12, 0x5a, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x70, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x14, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x1a, 0x75, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x41,
	0x72, 0x65, 0x61, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62,
	0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x0c,
	0x0a, 0x01, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x2a, 0x33, 0x0a, 0x08, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0x00, 0x12,
	0x06, 0x0a, 0x02, 0x46, 0x52, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x4e, 0x10, 0x02, 0x12,
	0x06, 0x0a, 0x02, 0x45, 0x53, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x44, 0x45, 0x10, 0x04, 0x2a,
	0x6d, 0x0a, 0x0d, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x07, 0x0a, 0x03, 0x48, 0x41, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4c, 0x4f,
	0x41, 0x4b, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4d, 0x55, 0x4c, 0x45, 0x54, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x45,
	0x4c, 0x54, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x54, 0x10, 0x05, 0x12, 0x0a,
	0x0a, 0x06, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x45,
	0x54, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x4f, 0x46, 0x55, 0x53, 0x10, 0x08, 0x42, 0x08,
	0x5a, 0x06, 0x2e, 0x3b, 0x61, 0x6d, 0x71, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rabbitmq_proto_rawDescOnce sync.Once
	file_rabbitmq_proto_rawDescData = file_rabbitmq_proto_rawDesc
)

func file_rabbitmq_proto_rawDescGZIP() []byte {
	file_rabbitmq_proto_rawDescOnce.Do(func() {
		file_rabbitmq_proto_rawDescData = protoimpl.X.CompressGZIP(file_rabbitmq_proto_rawDescData)
	})
	return file_rabbitmq_proto_rawDescData
}

var file_rabbitmq_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_rabbitmq_proto_msgTypes = make([]protoimpl.MessageInfo, 53)
var file_rabbitmq_proto_goTypes = []interface{}{
	(Language)(0),                                                  // 0: amqp.Language
	(EquipmentType)(0),                                             // 1: amqp.EquipmentType
	(RabbitMQMessage_Type)(0),                                      // 2: amqp.RabbitMQMessage.Type
	(RabbitMQMessage_Status)(0),                                    // 3: amqp.RabbitMQMessage.Status
	(*RabbitMQMessage)(nil),                                        // 4: amqp.RabbitMQMessage
	(*Source)(nil),                                                 // 5: amqp.Source
	(*AlignGetBookRequest)(nil),                                    // 6: amqp.AlignGetBookRequest
	(*AlignGetBookAnswer)(nil),                                     // 7: amqp.AlignGetBookAnswer
	(*AlignGetUserRequest)(nil),                                    // 8: amqp.AlignGetUserRequest
	(*AlignGetUserAnswer)(nil),                                     // 9: amqp.AlignGetUserAnswer
	(*AlignSetRequest)(nil),                                        // 10: amqp.AlignSetRequest
	(*AlignSetAnswer)(nil),                                         // 11: amqp.AlignSetAnswer
	(*ConfigurationGetRequest)(nil),                                // 12: amqp.ConfigurationGetRequest
	(*ConfigurationGetAnswer)(nil),                                 // 13: amqp.ConfigurationGetAnswer
	(*ConfigurationSetServerRequest)(nil),                          // 14: amqp.ConfigurationSetServerRequest
	(*ConfigurationSetAlmanaxWebhookRequest)(nil),                  // 15: amqp.ConfigurationSetAlmanaxWebhookRequest
	(*ConfigurationSetRssWebhookRequest)(nil),                      // 16: amqp.ConfigurationSetRssWebhookRequest
	(*ConfigurationSetTwitterWebhookRequest)(nil),                  // 17: amqp.ConfigurationSetTwitterWebhookRequest
	(*ConfigurationSetAnswer)(nil),                                 // 18: amqp.ConfigurationSetAnswer
	(*EncyclopediaAlmanaxRequest)(nil),                             // 19: amqp.EncyclopediaAlmanaxRequest
	(*EncyclopediaAlmanaxAnswer)(nil),                              // 20: amqp.EncyclopediaAlmanaxAnswer
	(*EncyclopediaItemListRequest)(nil),                            // 21: amqp.EncyclopediaItemListRequest
	(*EncyclopediaItemListAnswer)(nil),                             // 22: amqp.EncyclopediaItemListAnswer
	(*EncyclopediaItemRequest)(nil),                                // 23: amqp.EncyclopediaItemRequest
	(*EncyclopediaItemAnswer)(nil),                                 // 24: amqp.EncyclopediaItemAnswer
	(*EncyclopediaSetListRequest)(nil),                             // 25: amqp.EncyclopediaSetListRequest
	(*EncyclopediaSetListAnswer)(nil),                              // 26: amqp.EncyclopediaSetListAnswer
	(*EncyclopediaSetRequest)(nil),                                 // 27: amqp.EncyclopediaSetRequest
	(*EncyclopediaSetAnswer)(nil),                                  // 28: amqp.EncyclopediaSetAnswer
	(*JobGetBookRequest)(nil),                                      // 29: amqp.JobGetBookRequest
	(*JobGetBookAnswer)(nil),                                       // 30: amqp.JobGetBookAnswer
	(*JobGetUserRequest)(nil),                                      // 31: amqp.JobGetUserRequest
	(*JobGetUserAnswer)(nil),                                       // 32: amqp.JobGetUserAnswer
	(*JobSetRequest)(nil),                                          // 33: amqp.JobSetRequest
	(*JobSetAnswer)(nil),                                           // 34: amqp.JobSetAnswer
	(*NewsTwitterMessage)(nil),                                     // 35: amqp.NewsTwitterMessage
	(*NewsRSSMessage)(nil),                                         // 36: amqp.NewsRSSMessage
	(*PortalPositionRequest)(nil),                                  // 37: amqp.PortalPositionRequest
	(*PortalPositionAnswer)(nil),                                   // 38: amqp.PortalPositionAnswer
	(*AlignGetBookAnswer_Believer)(nil),                            // 39: amqp.AlignGetBookAnswer.Believer
	(*AlignGetUserAnswer_AlignExperience)(nil),                     // 40: amqp.AlignGetUserAnswer.AlignExperience
	(*ConfigurationGetAnswer_ChannelServer)(nil),                   // 41: amqp.ConfigurationGetAnswer.ChannelServer
	(*ConfigurationGetAnswer_AlmanaxWebhook)(nil),                  // 42: amqp.ConfigurationGetAnswer.AlmanaxWebhook
	(*ConfigurationGetAnswer_RssWebhook)(nil),                      // 43: amqp.ConfigurationGetAnswer.RssWebhook
	(*ConfigurationGetAnswer_TwitterWebhook)(nil),                  // 44: amqp.ConfigurationGetAnswer.TwitterWebhook
	(*EncyclopediaItemListAnswer_Item)(nil),                        // 45: amqp.EncyclopediaItemListAnswer.Item
	(*EncyclopediaItemAnswer_Effect)(nil),                          // 46: amqp.EncyclopediaItemAnswer.Effect
	(*EncyclopediaItemAnswer_Set)(nil),                             // 47: amqp.EncyclopediaItemAnswer.Set
	(*EncyclopediaSetListAnswer_Set)(nil),                          // 48: amqp.EncyclopediaSetListAnswer.Set
	(*EncyclopediaSetAnswer_Equipment)(nil),                        // 49: amqp.EncyclopediaSetAnswer.Equipment
	(*EncyclopediaSetAnswer_Bonus)(nil),                            // 50: amqp.EncyclopediaSetAnswer.Bonus
	(*EncyclopediaSetAnswer_Effect)(nil),                           // 51: amqp.EncyclopediaSetAnswer.Effect
	(*JobGetBookAnswer_Craftsman)(nil),                             // 52: amqp.JobGetBookAnswer.Craftsman
	(*JobGetUserAnswer_JobExperience)(nil),                         // 53: amqp.JobGetUserAnswer.JobExperience
	(*PortalPositionAnswer_PortalPosition)(nil),                    // 54: amqp.PortalPositionAnswer.PortalPosition
	(*PortalPositionAnswer_PortalPosition_Position)(nil),           // 55: amqp.PortalPositionAnswer.PortalPosition.Position
	(*PortalPositionAnswer_PortalPosition_Position_Transport)(nil), // 56: amqp.PortalPositionAnswer.PortalPosition.Position.Transport
	(*timestamp.Timestamp)(nil),                                    // 57: google.protobuf.Timestamp
}
var file_rabbitmq_proto_depIdxs = []int32{
	2,  // 0: amqp.RabbitMQMessage.type:type_name -> amqp.RabbitMQMessage.Type
	0,  // 1: amqp.RabbitMQMessage.language:type_name -> amqp.Language
	3,  // 2: amqp.RabbitMQMessage.status:type_name -> amqp.RabbitMQMessage.Status
	6,  // 3: amqp.RabbitMQMessage.alignGetBookRequest:type_name -> amqp.AlignGetBookRequest
	7,  // 4: amqp.RabbitMQMessage.alignGetBookAnswer:type_name -> amqp.AlignGetBookAnswer
	8,  // 5: amqp.RabbitMQMessage.alignGetUserRequest:type_name -> amqp.AlignGetUserRequest
	9,  // 6: amqp.RabbitMQMessage.alignGetUserAnswer:type_name -> amqp.AlignGetUserAnswer
	10, // 7: amqp.RabbitMQMessage.alignSetRequest:type_name -> amqp.AlignSetRequest
	11, // 8: amqp.RabbitMQMessage.alignSetAnswer:type_name -> amqp.AlignSetAnswer
	12, // 9: amqp.RabbitMQMessage.configurationGetRequest:type_name -> amqp.ConfigurationGetRequest
	13, // 10: amqp.RabbitMQMessage.configurationGetAnswer:type_name -> amqp.ConfigurationGetAnswer
	14, // 11: amqp.RabbitMQMessage.configurationSetServerRequest:type_name -> amqp.ConfigurationSetServerRequest
	15, // 12: amqp.RabbitMQMessage.configurationSetAlmanaxWebhookRequest:type_name -> amqp.ConfigurationSetAlmanaxWebhookRequest
	16, // 13: amqp.RabbitMQMessage.configurationSetRssWebhookRequest:type_name -> amqp.ConfigurationSetRssWebhookRequest
	17, // 14: amqp.RabbitMQMessage.configurationSetTwitterWebhookRequest:type_name -> amqp.ConfigurationSetTwitterWebhookRequest
	18, // 15: amqp.RabbitMQMessage.configurationSetAnswer:type_name -> amqp.ConfigurationSetAnswer
	19, // 16: amqp.RabbitMQMessage.encyclopediaAlmanaxRequest:type_name -> amqp.EncyclopediaAlmanaxRequest
	20, // 17: amqp.RabbitMQMessage.encyclopediaAlmanaxAnswer:type_name -> amqp.EncyclopediaAlmanaxAnswer
	21, // 18: amqp.RabbitMQMessage.encyclopediaItemListRequest:type_name -> amqp.EncyclopediaItemListRequest
	22, // 19: amqp.RabbitMQMessage.encyclopediaItemListAnswer:type_name -> amqp.EncyclopediaItemListAnswer
	23, // 20: amqp.RabbitMQMessage.encyclopediaItemRequest:type_name -> amqp.EncyclopediaItemRequest
	24, // 21: amqp.RabbitMQMessage.encyclopediaItemAnswer:type_name -> amqp.EncyclopediaItemAnswer
	25, // 22: amqp.RabbitMQMessage.encyclopediaSetListRequest:type_name -> amqp.EncyclopediaSetListRequest
	26, // 23: amqp.RabbitMQMessage.encyclopediaSetListAnswer:type_name -> amqp.EncyclopediaSetListAnswer
	27, // 24: amqp.RabbitMQMessage.encyclopediaSetRequest:type_name -> amqp.EncyclopediaSetRequest
	28, // 25: amqp.RabbitMQMessage.encyclopediaSetAnswer:type_name -> amqp.EncyclopediaSetAnswer
	29, // 26: amqp.RabbitMQMessage.jobGetBookRequest:type_name -> amqp.JobGetBookRequest
	30, // 27: amqp.RabbitMQMessage.jobGetBookAnswer:type_name -> amqp.JobGetBookAnswer
	31, // 28: amqp.RabbitMQMessage.jobGetUserRequest:type_name -> amqp.JobGetUserRequest
	32, // 29: amqp.RabbitMQMessage.jobGetUserAnswer:type_name -> amqp.JobGetUserAnswer
	33, // 30: amqp.RabbitMQMessage.jobSetRequest:type_name -> amqp.JobSetRequest
	34, // 31: amqp.RabbitMQMessage.jobSetAnswer:type_name -> amqp.JobSetAnswer
	35, // 32: amqp.RabbitMQMessage.newsTwitterMessage:type_name -> amqp.NewsTwitterMessage
	36, // 33: amqp.RabbitMQMessage.newsRSSMessage:type_name -> amqp.NewsRSSMessage
	37, // 34: amqp.RabbitMQMessage.portalPositionRequest:type_name -> amqp.PortalPositionRequest
	38, // 35: amqp.RabbitMQMessage.portalPositionAnswer:type_name -> amqp.PortalPositionAnswer
	39, // 36: amqp.AlignGetBookAnswer.believers:type_name -> amqp.AlignGetBookAnswer.Believer
	40, // 37: amqp.AlignGetUserAnswer.beliefs:type_name -> amqp.AlignGetUserAnswer.AlignExperience
	41, // 38: amqp.ConfigurationGetAnswer.channelServers:type_name -> amqp.ConfigurationGetAnswer.ChannelServer
	42, // 39: amqp.ConfigurationGetAnswer.almanaxWebhooks:type_name -> amqp.ConfigurationGetAnswer.AlmanaxWebhook
	43, // 40: amqp.ConfigurationGetAnswer.rssWebhooks:type_name -> amqp.ConfigurationGetAnswer.RssWebhook
	44, // 41: amqp.ConfigurationGetAnswer.twitterWebhooks:type_name -> amqp.ConfigurationGetAnswer.TwitterWebhook
	0,  // 42: amqp.ConfigurationSetAlmanaxWebhookRequest.language:type_name -> amqp.Language
	0,  // 43: amqp.ConfigurationSetRssWebhookRequest.language:type_name -> amqp.Language
	0,  // 44: amqp.ConfigurationSetTwitterWebhookRequest.language:type_name -> amqp.Language
	45, // 45: amqp.EncyclopediaItemListAnswer.items:type_name -> amqp.EncyclopediaItemListAnswer.Item
	1,  // 46: amqp.EncyclopediaItemAnswer.equipmentType:type_name -> amqp.EquipmentType
	47, // 47: amqp.EncyclopediaItemAnswer.set:type_name -> amqp.EncyclopediaItemAnswer.Set
	46, // 48: amqp.EncyclopediaItemAnswer.effects:type_name -> amqp.EncyclopediaItemAnswer.Effect
	5,  // 49: amqp.EncyclopediaItemAnswer.source:type_name -> amqp.Source
	48, // 50: amqp.EncyclopediaSetListAnswer.sets:type_name -> amqp.EncyclopediaSetListAnswer.Set
	49, // 51: amqp.EncyclopediaSetAnswer.equipments:type_name -> amqp.EncyclopediaSetAnswer.Equipment
	50, // 52: amqp.EncyclopediaSetAnswer.bonuses:type_name -> amqp.EncyclopediaSetAnswer.Bonus
	5,  // 53: amqp.EncyclopediaSetAnswer.source:type_name -> amqp.Source
	52, // 54: amqp.JobGetBookAnswer.craftsmen:type_name -> amqp.JobGetBookAnswer.Craftsman
	53, // 55: amqp.JobGetUserAnswer.jobs:type_name -> amqp.JobGetUserAnswer.JobExperience
	57, // 56: amqp.NewsTwitterMessage.date:type_name -> google.protobuf.Timestamp
	57, // 57: amqp.NewsRSSMessage.date:type_name -> google.protobuf.Timestamp
	54, // 58: amqp.PortalPositionAnswer.positions:type_name -> amqp.PortalPositionAnswer.PortalPosition
	0,  // 59: amqp.ConfigurationGetAnswer.AlmanaxWebhook.language:type_name -> amqp.Language
	0,  // 60: amqp.ConfigurationGetAnswer.RssWebhook.language:type_name -> amqp.Language
	0,  // 61: amqp.ConfigurationGetAnswer.TwitterWebhook.language:type_name -> amqp.Language
	1,  // 62: amqp.EncyclopediaSetAnswer.Equipment.type:type_name -> amqp.EquipmentType
	51, // 63: amqp.EncyclopediaSetAnswer.Bonus.effects:type_name -> amqp.EncyclopediaSetAnswer.Effect
	55, // 64: amqp.PortalPositionAnswer.PortalPosition.position:type_name -> amqp.PortalPositionAnswer.PortalPosition.Position
	57, // 65: amqp.PortalPositionAnswer.PortalPosition.createdAt:type_name -> google.protobuf.Timestamp
	57, // 66: amqp.PortalPositionAnswer.PortalPosition.updatedAt:type_name -> google.protobuf.Timestamp
	5,  // 67: amqp.PortalPositionAnswer.PortalPosition.source:type_name -> amqp.Source
	56, // 68: amqp.PortalPositionAnswer.PortalPosition.Position.transport:type_name -> amqp.PortalPositionAnswer.PortalPosition.Position.Transport
	56, // 69: amqp.PortalPositionAnswer.PortalPosition.Position.conditionalTransport:type_name -> amqp.PortalPositionAnswer.PortalPosition.Position.Transport
	70, // [70:70] is the sub-list for method output_type
	70, // [70:70] is the sub-list for method input_type
	70, // [70:70] is the sub-list for extension type_name
	70, // [70:70] is the sub-list for extension extendee
	0,  // [0:70] is the sub-list for field type_name
}

func init() { file_rabbitmq_proto_init() }
func file_rabbitmq_proto_init() {
	if File_rabbitmq_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rabbitmq_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RabbitMQMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlignGetBookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlignGetBookAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlignGetUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlignGetUserAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlignSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlignSetAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationGetAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationSetServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationSetAlmanaxWebhookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationSetRssWebhookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationSetTwitterWebhookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationSetAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaAlmanaxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaAlmanaxAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaItemListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaItemListAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaItemAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaSetListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaSetListAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaSetAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobGetBookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobGetBookAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobGetUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobGetUserAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobSetAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsTwitterMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsRSSMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortalPositionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortalPositionAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlignGetBookAnswer_Believer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlignGetUserAnswer_AlignExperience); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationGetAnswer_ChannelServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationGetAnswer_AlmanaxWebhook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationGetAnswer_RssWebhook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationGetAnswer_TwitterWebhook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaItemListAnswer_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaItemAnswer_Effect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaItemAnswer_Set); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaSetListAnswer_Set); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaSetAnswer_Equipment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaSetAnswer_Bonus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncyclopediaSetAnswer_Effect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobGetBookAnswer_Craftsman); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobGetUserAnswer_JobExperience); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortalPositionAnswer_PortalPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortalPositionAnswer_PortalPosition_Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortalPositionAnswer_PortalPosition_Position_Transport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rabbitmq_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   53,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rabbitmq_proto_goTypes,
		DependencyIndexes: file_rabbitmq_proto_depIdxs,
		EnumInfos:         file_rabbitmq_proto_enumTypes,
		MessageInfos:      file_rabbitmq_proto_msgTypes,
	}.Build()
	File_rabbitmq_proto = out.File
	file_rabbitmq_proto_rawDesc = nil
	file_rabbitmq_proto_goTypes = nil
	file_rabbitmq_proto_depIdxs = nil
}
