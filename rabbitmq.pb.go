// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.6.1
// source: rabbitmq.proto

package amqp

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Language int32

const (
	Language_ANY Language = 0
	Language_FR  Language = 1
	Language_EN  Language = 2
	Language_ES  Language = 3
)

// Enum value maps for Language.
var (
	Language_name = map[int32]string{
		0: "ANY",
		1: "FR",
		2: "EN",
		3: "ES",
	}
	Language_value = map[string]int32{
		"ANY": 0,
		"FR":  1,
		"EN":  2,
		"ES":  3,
	}
)

func (x Language) Enum() *Language {
	p := new(Language)
	*p = x
	return p
}

func (x Language) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Language) Descriptor() protoreflect.EnumDescriptor {
	return file_rabbitmq_proto_enumTypes[0].Descriptor()
}

func (Language) Type() protoreflect.EnumType {
	return &file_rabbitmq_proto_enumTypes[0]
}

func (x Language) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Language.Descriptor instead.
func (Language) EnumDescriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{0}
}

type RabbitMQMessage_Type int32

const (
	RabbitMQMessage_UNKNOWN                   RabbitMQMessage_Type = 0
	RabbitMQMessage_NEWS_RSS                  RabbitMQMessage_Type = 1
	RabbitMQMessage_NEWS_TWITTER              RabbitMQMessage_Type = 2
	RabbitMQMessage_PORTAL_POSITION_REQUEST   RabbitMQMessage_Type = 3
	RabbitMQMessage_PORTAL_POSITION_ANSWER    RabbitMQMessage_Type = 4
	RabbitMQMessage_CONFIGURATION_GET_REQUEST RabbitMQMessage_Type = 5
	RabbitMQMessage_CONFIGURATION_GET_ANSWER  RabbitMQMessage_Type = 6
	RabbitMQMessage_CONFIGURATION_SET_REQUEST RabbitMQMessage_Type = 7
	RabbitMQMessage_CONFIGURATION_SET_ANSWER  RabbitMQMessage_Type = 8
	RabbitMQMessage_JOB_GET_BOOK_REQUEST      RabbitMQMessage_Type = 9
	RabbitMQMessage_JOB_GET_BOOK_ANSWER       RabbitMQMessage_Type = 10
	RabbitMQMessage_JOB_GET_USER_REQUEST      RabbitMQMessage_Type = 11
	RabbitMQMessage_JOB_GET_USER_ANSWER       RabbitMQMessage_Type = 12
	RabbitMQMessage_JOB_SET_REQUEST           RabbitMQMessage_Type = 13
	RabbitMQMessage_JOB_SET_ANSWER            RabbitMQMessage_Type = 14
)

// Enum value maps for RabbitMQMessage_Type.
var (
	RabbitMQMessage_Type_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "NEWS_RSS",
		2:  "NEWS_TWITTER",
		3:  "PORTAL_POSITION_REQUEST",
		4:  "PORTAL_POSITION_ANSWER",
		5:  "CONFIGURATION_GET_REQUEST",
		6:  "CONFIGURATION_GET_ANSWER",
		7:  "CONFIGURATION_SET_REQUEST",
		8:  "CONFIGURATION_SET_ANSWER",
		9:  "JOB_GET_BOOK_REQUEST",
		10: "JOB_GET_BOOK_ANSWER",
		11: "JOB_GET_USER_REQUEST",
		12: "JOB_GET_USER_ANSWER",
		13: "JOB_SET_REQUEST",
		14: "JOB_SET_ANSWER",
	}
	RabbitMQMessage_Type_value = map[string]int32{
		"UNKNOWN":                   0,
		"NEWS_RSS":                  1,
		"NEWS_TWITTER":              2,
		"PORTAL_POSITION_REQUEST":   3,
		"PORTAL_POSITION_ANSWER":    4,
		"CONFIGURATION_GET_REQUEST": 5,
		"CONFIGURATION_GET_ANSWER":  6,
		"CONFIGURATION_SET_REQUEST": 7,
		"CONFIGURATION_SET_ANSWER":  8,
		"JOB_GET_BOOK_REQUEST":      9,
		"JOB_GET_BOOK_ANSWER":       10,
		"JOB_GET_USER_REQUEST":      11,
		"JOB_GET_USER_ANSWER":       12,
		"JOB_SET_REQUEST":           13,
		"JOB_SET_ANSWER":            14,
	}
)

func (x RabbitMQMessage_Type) Enum() *RabbitMQMessage_Type {
	p := new(RabbitMQMessage_Type)
	*p = x
	return p
}

func (x RabbitMQMessage_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RabbitMQMessage_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_rabbitmq_proto_enumTypes[1].Descriptor()
}

func (RabbitMQMessage_Type) Type() protoreflect.EnumType {
	return &file_rabbitmq_proto_enumTypes[1]
}

func (x RabbitMQMessage_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RabbitMQMessage_Type.Descriptor instead.
func (RabbitMQMessage_Type) EnumDescriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{0, 0}
}

type RabbitMQMessage_Status int32

const (
	RabbitMQMessage_SUCCESS RabbitMQMessage_Status = 0
	RabbitMQMessage_FAILED  RabbitMQMessage_Status = 1
)

// Enum value maps for RabbitMQMessage_Status.
var (
	RabbitMQMessage_Status_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILED",
	}
	RabbitMQMessage_Status_value = map[string]int32{
		"SUCCESS": 0,
		"FAILED":  1,
	}
)

func (x RabbitMQMessage_Status) Enum() *RabbitMQMessage_Status {
	p := new(RabbitMQMessage_Status)
	*p = x
	return p
}

func (x RabbitMQMessage_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RabbitMQMessage_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_rabbitmq_proto_enumTypes[2].Descriptor()
}

func (RabbitMQMessage_Status) Type() protoreflect.EnumType {
	return &file_rabbitmq_proto_enumTypes[2]
}

func (x RabbitMQMessage_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RabbitMQMessage_Status.Descriptor instead.
func (RabbitMQMessage_Status) EnumDescriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{0, 1}
}

type ConfigurationGetAnswer_ChannelWebhook_Provider int32

const (
	ConfigurationGetAnswer_ChannelWebhook_ALMANAX ConfigurationGetAnswer_ChannelWebhook_Provider = 0
	ConfigurationGetAnswer_ChannelWebhook_RSS     ConfigurationGetAnswer_ChannelWebhook_Provider = 1
	ConfigurationGetAnswer_ChannelWebhook_TWITTER ConfigurationGetAnswer_ChannelWebhook_Provider = 2
)

// Enum value maps for ConfigurationGetAnswer_ChannelWebhook_Provider.
var (
	ConfigurationGetAnswer_ChannelWebhook_Provider_name = map[int32]string{
		0: "ALMANAX",
		1: "RSS",
		2: "TWITTER",
	}
	ConfigurationGetAnswer_ChannelWebhook_Provider_value = map[string]int32{
		"ALMANAX": 0,
		"RSS":     1,
		"TWITTER": 2,
	}
)

func (x ConfigurationGetAnswer_ChannelWebhook_Provider) Enum() *ConfigurationGetAnswer_ChannelWebhook_Provider {
	p := new(ConfigurationGetAnswer_ChannelWebhook_Provider)
	*p = x
	return p
}

func (x ConfigurationGetAnswer_ChannelWebhook_Provider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigurationGetAnswer_ChannelWebhook_Provider) Descriptor() protoreflect.EnumDescriptor {
	return file_rabbitmq_proto_enumTypes[3].Descriptor()
}

func (ConfigurationGetAnswer_ChannelWebhook_Provider) Type() protoreflect.EnumType {
	return &file_rabbitmq_proto_enumTypes[3]
}

func (x ConfigurationGetAnswer_ChannelWebhook_Provider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigurationGetAnswer_ChannelWebhook_Provider.Descriptor instead.
func (ConfigurationGetAnswer_ChannelWebhook_Provider) EnumDescriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{6, 1, 0}
}

type ConfigurationSetRequest_Field int32

const (
	ConfigurationSetRequest_SERVER  ConfigurationSetRequest_Field = 0
	ConfigurationSetRequest_WEBHOOK ConfigurationSetRequest_Field = 1
)

// Enum value maps for ConfigurationSetRequest_Field.
var (
	ConfigurationSetRequest_Field_name = map[int32]string{
		0: "SERVER",
		1: "WEBHOOK",
	}
	ConfigurationSetRequest_Field_value = map[string]int32{
		"SERVER":  0,
		"WEBHOOK": 1,
	}
)

func (x ConfigurationSetRequest_Field) Enum() *ConfigurationSetRequest_Field {
	p := new(ConfigurationSetRequest_Field)
	*p = x
	return p
}

func (x ConfigurationSetRequest_Field) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigurationSetRequest_Field) Descriptor() protoreflect.EnumDescriptor {
	return file_rabbitmq_proto_enumTypes[4].Descriptor()
}

func (ConfigurationSetRequest_Field) Type() protoreflect.EnumType {
	return &file_rabbitmq_proto_enumTypes[4]
}

func (x ConfigurationSetRequest_Field) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigurationSetRequest_Field.Descriptor instead.
func (ConfigurationSetRequest_Field) EnumDescriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{7, 0}
}

type ConfigurationSetRequest_WebhookField_Provider int32

const (
	ConfigurationSetRequest_WebhookField_ALMANAX ConfigurationSetRequest_WebhookField_Provider = 0
	ConfigurationSetRequest_WebhookField_RSS     ConfigurationSetRequest_WebhookField_Provider = 1
	ConfigurationSetRequest_WebhookField_TWITTER ConfigurationSetRequest_WebhookField_Provider = 2
)

// Enum value maps for ConfigurationSetRequest_WebhookField_Provider.
var (
	ConfigurationSetRequest_WebhookField_Provider_name = map[int32]string{
		0: "ALMANAX",
		1: "RSS",
		2: "TWITTER",
	}
	ConfigurationSetRequest_WebhookField_Provider_value = map[string]int32{
		"ALMANAX": 0,
		"RSS":     1,
		"TWITTER": 2,
	}
)

func (x ConfigurationSetRequest_WebhookField_Provider) Enum() *ConfigurationSetRequest_WebhookField_Provider {
	p := new(ConfigurationSetRequest_WebhookField_Provider)
	*p = x
	return p
}

func (x ConfigurationSetRequest_WebhookField_Provider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigurationSetRequest_WebhookField_Provider) Descriptor() protoreflect.EnumDescriptor {
	return file_rabbitmq_proto_enumTypes[5].Descriptor()
}

func (ConfigurationSetRequest_WebhookField_Provider) Type() protoreflect.EnumType {
	return &file_rabbitmq_proto_enumTypes[5]
}

func (x ConfigurationSetRequest_WebhookField_Provider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigurationSetRequest_WebhookField_Provider.Descriptor instead.
func (ConfigurationSetRequest_WebhookField_Provider) EnumDescriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{7, 1, 0}
}

type RabbitMQMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                    RabbitMQMessage_Type     `protobuf:"varint,1,opt,name=type,proto3,enum=amqp.RabbitMQMessage_Type" json:"type,omitempty"`
	Language                Language                 `protobuf:"varint,2,opt,name=language,proto3,enum=amqp.Language" json:"language,omitempty"`
	Status                  RabbitMQMessage_Status   `protobuf:"varint,3,opt,name=status,proto3,enum=amqp.RabbitMQMessage_Status" json:"status,omitempty"`
	NewsTwitterMessage      *NewsTwitterMessage      `protobuf:"bytes,10,opt,name=newsTwitterMessage,proto3" json:"newsTwitterMessage,omitempty"`
	NewsRSSMessage          *NewsRSSMessage          `protobuf:"bytes,11,opt,name=newsRSSMessage,proto3" json:"newsRSSMessage,omitempty"`
	PortalPositionRequest   *PortalPositionRequest   `protobuf:"bytes,12,opt,name=portalPositionRequest,proto3" json:"portalPositionRequest,omitempty"`
	PortalPositionAnswer    *PortalPositionAnswer    `protobuf:"bytes,13,opt,name=portalPositionAnswer,proto3" json:"portalPositionAnswer,omitempty"`
	ConfigurationGetRequest *ConfigurationGetRequest `protobuf:"bytes,14,opt,name=configurationGetRequest,proto3" json:"configurationGetRequest,omitempty"`
	ConfigurationGetAnswer  *ConfigurationGetAnswer  `protobuf:"bytes,15,opt,name=configurationGetAnswer,proto3" json:"configurationGetAnswer,omitempty"`
	ConfigurationSetRequest *ConfigurationSetRequest `protobuf:"bytes,16,opt,name=configurationSetRequest,proto3" json:"configurationSetRequest,omitempty"`
	ConfigurationSetAnswer  *ConfigurationSetAnswer  `protobuf:"bytes,17,opt,name=configurationSetAnswer,proto3" json:"configurationSetAnswer,omitempty"`
	JobGetBookRequest       *JobGetBookRequest       `protobuf:"bytes,18,opt,name=jobGetBookRequest,proto3" json:"jobGetBookRequest,omitempty"`
	JobGetBookAnswer        *JobGetBookAnswer        `protobuf:"bytes,19,opt,name=jobGetBookAnswer,proto3" json:"jobGetBookAnswer,omitempty"`
	JobGetUserRequest       *JobGetUserRequest       `protobuf:"bytes,20,opt,name=jobGetUserRequest,proto3" json:"jobGetUserRequest,omitempty"`
	JobGetUserAnswer        *JobGetUserAnswer        `protobuf:"bytes,21,opt,name=jobGetUserAnswer,proto3" json:"jobGetUserAnswer,omitempty"`
	JobSetRequest           *JobSetRequest           `protobuf:"bytes,22,opt,name=jobSetRequest,proto3" json:"jobSetRequest,omitempty"`
	JobSetAnswer            *JobSetAnswer            `protobuf:"bytes,23,opt,name=jobSetAnswer,proto3" json:"jobSetAnswer,omitempty"`
}

func (x *RabbitMQMessage) Reset() {
	*x = RabbitMQMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RabbitMQMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RabbitMQMessage) ProtoMessage() {}

func (x *RabbitMQMessage) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RabbitMQMessage.ProtoReflect.Descriptor instead.
func (*RabbitMQMessage) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{0}
}

func (x *RabbitMQMessage) GetType() RabbitMQMessage_Type {
	if x != nil {
		return x.Type
	}
	return RabbitMQMessage_UNKNOWN
}

func (x *RabbitMQMessage) GetLanguage() Language {
	if x != nil {
		return x.Language
	}
	return Language_ANY
}

func (x *RabbitMQMessage) GetStatus() RabbitMQMessage_Status {
	if x != nil {
		return x.Status
	}
	return RabbitMQMessage_SUCCESS
}

func (x *RabbitMQMessage) GetNewsTwitterMessage() *NewsTwitterMessage {
	if x != nil {
		return x.NewsTwitterMessage
	}
	return nil
}

func (x *RabbitMQMessage) GetNewsRSSMessage() *NewsRSSMessage {
	if x != nil {
		return x.NewsRSSMessage
	}
	return nil
}

func (x *RabbitMQMessage) GetPortalPositionRequest() *PortalPositionRequest {
	if x != nil {
		return x.PortalPositionRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetPortalPositionAnswer() *PortalPositionAnswer {
	if x != nil {
		return x.PortalPositionAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetConfigurationGetRequest() *ConfigurationGetRequest {
	if x != nil {
		return x.ConfigurationGetRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetConfigurationGetAnswer() *ConfigurationGetAnswer {
	if x != nil {
		return x.ConfigurationGetAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetConfigurationSetRequest() *ConfigurationSetRequest {
	if x != nil {
		return x.ConfigurationSetRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetConfigurationSetAnswer() *ConfigurationSetAnswer {
	if x != nil {
		return x.ConfigurationSetAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetJobGetBookRequest() *JobGetBookRequest {
	if x != nil {
		return x.JobGetBookRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetJobGetBookAnswer() *JobGetBookAnswer {
	if x != nil {
		return x.JobGetBookAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetJobGetUserRequest() *JobGetUserRequest {
	if x != nil {
		return x.JobGetUserRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetJobGetUserAnswer() *JobGetUserAnswer {
	if x != nil {
		return x.JobGetUserAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetJobSetRequest() *JobSetRequest {
	if x != nil {
		return x.JobSetRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetJobSetAnswer() *JobSetAnswer {
	if x != nil {
		return x.JobSetAnswer
	}
	return nil
}

type NewsTwitterMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title         string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	AuthorName    string `protobuf:"bytes,2,opt,name=authorName,proto3" json:"authorName,omitempty"`
	AuthorUrl     string `protobuf:"bytes,3,opt,name=authorUrl,proto3" json:"authorUrl,omitempty"`
	AuthorIconUrl string `protobuf:"bytes,4,opt,name=authorIconUrl,proto3" json:"authorIconUrl,omitempty"`
	Url           string `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	IconUrl       string `protobuf:"bytes,6,opt,name=iconUrl,proto3" json:"iconUrl,omitempty"`
	Content       string `protobuf:"bytes,7,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *NewsTwitterMessage) Reset() {
	*x = NewsTwitterMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsTwitterMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsTwitterMessage) ProtoMessage() {}

func (x *NewsTwitterMessage) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsTwitterMessage.ProtoReflect.Descriptor instead.
func (*NewsTwitterMessage) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{1}
}

func (x *NewsTwitterMessage) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NewsTwitterMessage) GetAuthorName() string {
	if x != nil {
		return x.AuthorName
	}
	return ""
}

func (x *NewsTwitterMessage) GetAuthorUrl() string {
	if x != nil {
		return x.AuthorUrl
	}
	return ""
}

func (x *NewsTwitterMessage) GetAuthorIconUrl() string {
	if x != nil {
		return x.AuthorIconUrl
	}
	return ""
}

func (x *NewsTwitterMessage) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *NewsTwitterMessage) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *NewsTwitterMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type NewsRSSMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title      string               `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	AuthorName string               `protobuf:"bytes,2,opt,name=authorName,proto3" json:"authorName,omitempty"`
	Url        string               `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	IconUrl    string               `protobuf:"bytes,4,opt,name=iconUrl,proto3" json:"iconUrl,omitempty"`
	Date       *timestamp.Timestamp `protobuf:"bytes,5,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *NewsRSSMessage) Reset() {
	*x = NewsRSSMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsRSSMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsRSSMessage) ProtoMessage() {}

func (x *NewsRSSMessage) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsRSSMessage.ProtoReflect.Descriptor instead.
func (*NewsRSSMessage) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{2}
}

func (x *NewsRSSMessage) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NewsRSSMessage) GetAuthorName() string {
	if x != nil {
		return x.AuthorName
	}
	return ""
}

func (x *NewsRSSMessage) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *NewsRSSMessage) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *NewsRSSMessage) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type PortalPositionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId    string `protobuf:"bytes,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	DimensionId string `protobuf:"bytes,2,opt,name=dimensionId,proto3" json:"dimensionId,omitempty"`
}

func (x *PortalPositionRequest) Reset() {
	*x = PortalPositionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortalPositionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalPositionRequest) ProtoMessage() {}

func (x *PortalPositionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalPositionRequest.ProtoReflect.Descriptor instead.
func (*PortalPositionRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{3}
}

func (x *PortalPositionRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *PortalPositionRequest) GetDimensionId() string {
	if x != nil {
		return x.DimensionId
	}
	return ""
}

type PortalPositionAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Positions []*PortalPositionAnswer_PortalPosition `protobuf:"bytes,1,rep,name=positions,proto3" json:"positions,omitempty"`
}

func (x *PortalPositionAnswer) Reset() {
	*x = PortalPositionAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortalPositionAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalPositionAnswer) ProtoMessage() {}

func (x *PortalPositionAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalPositionAnswer.ProtoReflect.Descriptor instead.
func (*PortalPositionAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{4}
}

func (x *PortalPositionAnswer) GetPositions() []*PortalPositionAnswer_PortalPosition {
	if x != nil {
		return x.Positions
	}
	return nil
}

type ConfigurationGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId string `protobuf:"bytes,1,opt,name=guildId,proto3" json:"guildId,omitempty"`
}

func (x *ConfigurationGetRequest) Reset() {
	*x = ConfigurationGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationGetRequest) ProtoMessage() {}

func (x *ConfigurationGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationGetRequest.ProtoReflect.Descriptor instead.
func (*ConfigurationGetRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{5}
}

func (x *ConfigurationGetRequest) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

type ConfigurationGetAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId         string                                   `protobuf:"bytes,1,opt,name=guildId,proto3" json:"guildId,omitempty"`
	ServerId        string                                   `protobuf:"bytes,2,opt,name=serverId,proto3" json:"serverId,omitempty"`
	ChannelServers  []*ConfigurationGetAnswer_ChannelServer  `protobuf:"bytes,3,rep,name=channelServers,proto3" json:"channelServers,omitempty"`
	ChannelWebhooks []*ConfigurationGetAnswer_ChannelWebhook `protobuf:"bytes,4,rep,name=channelWebhooks,proto3" json:"channelWebhooks,omitempty"`
}

func (x *ConfigurationGetAnswer) Reset() {
	*x = ConfigurationGetAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationGetAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationGetAnswer) ProtoMessage() {}

func (x *ConfigurationGetAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationGetAnswer.ProtoReflect.Descriptor instead.
func (*ConfigurationGetAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{6}
}

func (x *ConfigurationGetAnswer) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *ConfigurationGetAnswer) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *ConfigurationGetAnswer) GetChannelServers() []*ConfigurationGetAnswer_ChannelServer {
	if x != nil {
		return x.ChannelServers
	}
	return nil
}

func (x *ConfigurationGetAnswer) GetChannelWebhooks() []*ConfigurationGetAnswer_ChannelWebhook {
	if x != nil {
		return x.ChannelWebhooks
	}
	return nil
}

type ConfigurationSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId      string                                `protobuf:"bytes,1,opt,name=guildId,proto3" json:"guildId,omitempty"`
	ChannelId    string                                `protobuf:"bytes,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Field        ConfigurationSetRequest_Field         `protobuf:"varint,3,opt,name=field,proto3,enum=amqp.ConfigurationSetRequest_Field" json:"field,omitempty"`
	ServerField  *ConfigurationSetRequest_ServerField  `protobuf:"bytes,4,opt,name=serverField,proto3" json:"serverField,omitempty"`
	WebhookField *ConfigurationSetRequest_WebhookField `protobuf:"bytes,5,opt,name=webhookField,proto3" json:"webhookField,omitempty"`
}

func (x *ConfigurationSetRequest) Reset() {
	*x = ConfigurationSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationSetRequest) ProtoMessage() {}

func (x *ConfigurationSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationSetRequest.ProtoReflect.Descriptor instead.
func (*ConfigurationSetRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{7}
}

func (x *ConfigurationSetRequest) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *ConfigurationSetRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ConfigurationSetRequest) GetField() ConfigurationSetRequest_Field {
	if x != nil {
		return x.Field
	}
	return ConfigurationSetRequest_SERVER
}

func (x *ConfigurationSetRequest) GetServerField() *ConfigurationSetRequest_ServerField {
	if x != nil {
		return x.ServerField
	}
	return nil
}

func (x *ConfigurationSetRequest) GetWebhookField() *ConfigurationSetRequest_WebhookField {
	if x != nil {
		return x.WebhookField
	}
	return nil
}

type ConfigurationSetAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfigurationSetAnswer) Reset() {
	*x = ConfigurationSetAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationSetAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationSetAnswer) ProtoMessage() {}

func (x *ConfigurationSetAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationSetAnswer.ProtoReflect.Descriptor instead.
func (*ConfigurationSetAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{8}
}

type JobGetBookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds  []string `protobuf:"bytes,1,rep,name=userIds,proto3" json:"userIds,omitempty"`
	JobId    string   `protobuf:"bytes,2,opt,name=jobId,proto3" json:"jobId,omitempty"`
	ServerId string   `protobuf:"bytes,3,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Limit    int64    `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *JobGetBookRequest) Reset() {
	*x = JobGetBookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobGetBookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobGetBookRequest) ProtoMessage() {}

func (x *JobGetBookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobGetBookRequest.ProtoReflect.Descriptor instead.
func (*JobGetBookRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{9}
}

func (x *JobGetBookRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *JobGetBookRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobGetBookRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *JobGetBookRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type JobGetBookAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId     string                        `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	ServerId  string                        `protobuf:"bytes,2,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Craftsmen []*JobGetBookAnswer_Craftsman `protobuf:"bytes,3,rep,name=craftsmen,proto3" json:"craftsmen,omitempty"`
}

func (x *JobGetBookAnswer) Reset() {
	*x = JobGetBookAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobGetBookAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobGetBookAnswer) ProtoMessage() {}

func (x *JobGetBookAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobGetBookAnswer.ProtoReflect.Descriptor instead.
func (*JobGetBookAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{10}
}

func (x *JobGetBookAnswer) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobGetBookAnswer) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *JobGetBookAnswer) GetCraftsmen() []*JobGetBookAnswer_Craftsman {
	if x != nil {
		return x.Craftsmen
	}
	return nil
}

type JobGetUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	ServerId string `protobuf:"bytes,2,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *JobGetUserRequest) Reset() {
	*x = JobGetUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobGetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobGetUserRequest) ProtoMessage() {}

func (x *JobGetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobGetUserRequest.ProtoReflect.Descriptor instead.
func (*JobGetUserRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{11}
}

func (x *JobGetUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *JobGetUserRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

type JobGetUserAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId string                            `protobuf:"bytes,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Jobs     []*JobGetUserAnswer_JobExperience `protobuf:"bytes,2,rep,name=jobs,proto3" json:"jobs,omitempty"`
}

func (x *JobGetUserAnswer) Reset() {
	*x = JobGetUserAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobGetUserAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobGetUserAnswer) ProtoMessage() {}

func (x *JobGetUserAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobGetUserAnswer.ProtoReflect.Descriptor instead.
func (*JobGetUserAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{12}
}

func (x *JobGetUserAnswer) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *JobGetUserAnswer) GetJobs() []*JobGetUserAnswer_JobExperience {
	if x != nil {
		return x.Jobs
	}
	return nil
}

type JobSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	JobId    string `protobuf:"bytes,2,opt,name=jobId,proto3" json:"jobId,omitempty"`
	ServerId string `protobuf:"bytes,3,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Level    int64  `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *JobSetRequest) Reset() {
	*x = JobSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSetRequest) ProtoMessage() {}

func (x *JobSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSetRequest.ProtoReflect.Descriptor instead.
func (*JobSetRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{13}
}

func (x *JobSetRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *JobSetRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobSetRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *JobSetRequest) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

type JobSetAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *JobSetAnswer) Reset() {
	*x = JobSetAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobSetAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSetAnswer) ProtoMessage() {}

func (x *JobSetAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSetAnswer.ProtoReflect.Descriptor instead.
func (*JobSetAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{14}
}

type PortalPositionAnswer_PortalPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId      string                                        `protobuf:"bytes,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	DimensionId   string                                        `protobuf:"bytes,2,opt,name=dimensionId,proto3" json:"dimensionId,omitempty"`
	RemainingUses int32                                         `protobuf:"varint,3,opt,name=remainingUses,proto3" json:"remainingUses,omitempty"`
	Position      *PortalPositionAnswer_PortalPosition_Position `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
	CreatedBy     string                                        `protobuf:"bytes,5,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	UpdatedBy     string                                        `protobuf:"bytes,6,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
	CreatedAt     *timestamp.Timestamp                          `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt     *timestamp.Timestamp                          `protobuf:"bytes,8,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Source        *PortalPositionAnswer_PortalPosition_Source   `protobuf:"bytes,9,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *PortalPositionAnswer_PortalPosition) Reset() {
	*x = PortalPositionAnswer_PortalPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortalPositionAnswer_PortalPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalPositionAnswer_PortalPosition) ProtoMessage() {}

func (x *PortalPositionAnswer_PortalPosition) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalPositionAnswer_PortalPosition.ProtoReflect.Descriptor instead.
func (*PortalPositionAnswer_PortalPosition) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{4, 0}
}

func (x *PortalPositionAnswer_PortalPosition) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition) GetDimensionId() string {
	if x != nil {
		return x.DimensionId
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition) GetRemainingUses() int32 {
	if x != nil {
		return x.RemainingUses
	}
	return 0
}

func (x *PortalPositionAnswer_PortalPosition) GetPosition() *PortalPositionAnswer_PortalPosition_Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *PortalPositionAnswer_PortalPosition) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PortalPositionAnswer_PortalPosition) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PortalPositionAnswer_PortalPosition) GetSource() *PortalPositionAnswer_PortalPosition_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

type PortalPositionAnswer_PortalPosition_Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X                    int32                                                   `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y                    int32                                                   `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	IsInCanopy           bool                                                    `protobuf:"varint,3,opt,name=isInCanopy,proto3" json:"isInCanopy,omitempty"`
	Transport            *PortalPositionAnswer_PortalPosition_Position_Transport `protobuf:"bytes,4,opt,name=transport,proto3" json:"transport,omitempty"`
	ConditionalTransport *PortalPositionAnswer_PortalPosition_Position_Transport `protobuf:"bytes,5,opt,name=conditionalTransport,proto3" json:"conditionalTransport,omitempty"`
}

func (x *PortalPositionAnswer_PortalPosition_Position) Reset() {
	*x = PortalPositionAnswer_PortalPosition_Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortalPositionAnswer_PortalPosition_Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalPositionAnswer_PortalPosition_Position) ProtoMessage() {}

func (x *PortalPositionAnswer_PortalPosition_Position) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalPositionAnswer_PortalPosition_Position.ProtoReflect.Descriptor instead.
func (*PortalPositionAnswer_PortalPosition_Position) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{4, 0, 0}
}

func (x *PortalPositionAnswer_PortalPosition_Position) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *PortalPositionAnswer_PortalPosition_Position) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *PortalPositionAnswer_PortalPosition_Position) GetIsInCanopy() bool {
	if x != nil {
		return x.IsInCanopy
	}
	return false
}

func (x *PortalPositionAnswer_PortalPosition_Position) GetTransport() *PortalPositionAnswer_PortalPosition_Position_Transport {
	if x != nil {
		return x.Transport
	}
	return nil
}

func (x *PortalPositionAnswer_PortalPosition_Position) GetConditionalTransport() *PortalPositionAnswer_PortalPosition_Position_Transport {
	if x != nil {
		return x.ConditionalTransport
	}
	return nil
}

type PortalPositionAnswer_PortalPosition_Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Icon string `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	Url  string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *PortalPositionAnswer_PortalPosition_Source) Reset() {
	*x = PortalPositionAnswer_PortalPosition_Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortalPositionAnswer_PortalPosition_Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalPositionAnswer_PortalPosition_Source) ProtoMessage() {}

func (x *PortalPositionAnswer_PortalPosition_Source) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalPositionAnswer_PortalPosition_Source.ProtoReflect.Descriptor instead.
func (*PortalPositionAnswer_PortalPosition_Source) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{4, 0, 1}
}

func (x *PortalPositionAnswer_PortalPosition_Source) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition_Source) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition_Source) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type PortalPositionAnswer_PortalPosition_Position_Transport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaId    string `protobuf:"bytes,1,opt,name=areaId,proto3" json:"areaId,omitempty"`
	SubAreaId string `protobuf:"bytes,2,opt,name=subAreaId,proto3" json:"subAreaId,omitempty"`
	TypeId    string `protobuf:"bytes,3,opt,name=typeId,proto3" json:"typeId,omitempty"`
	X         int32  `protobuf:"varint,4,opt,name=x,proto3" json:"x,omitempty"`
	Y         int32  `protobuf:"varint,5,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) Reset() {
	*x = PortalPositionAnswer_PortalPosition_Position_Transport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalPositionAnswer_PortalPosition_Position_Transport) ProtoMessage() {}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalPositionAnswer_PortalPosition_Position_Transport.ProtoReflect.Descriptor instead.
func (*PortalPositionAnswer_PortalPosition_Position_Transport) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{4, 0, 0, 0}
}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) GetAreaId() string {
	if x != nil {
		return x.AreaId
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) GetSubAreaId() string {
	if x != nil {
		return x.SubAreaId
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) GetTypeId() string {
	if x != nil {
		return x.TypeId
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type ConfigurationGetAnswer_ChannelServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string `protobuf:"bytes,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	ServerId  string `protobuf:"bytes,2,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *ConfigurationGetAnswer_ChannelServer) Reset() {
	*x = ConfigurationGetAnswer_ChannelServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationGetAnswer_ChannelServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationGetAnswer_ChannelServer) ProtoMessage() {}

func (x *ConfigurationGetAnswer_ChannelServer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationGetAnswer_ChannelServer.ProtoReflect.Descriptor instead.
func (*ConfigurationGetAnswer_ChannelServer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{6, 0}
}

func (x *ConfigurationGetAnswer_ChannelServer) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ConfigurationGetAnswer_ChannelServer) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

type ConfigurationGetAnswer_ChannelWebhook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string                                         `protobuf:"bytes,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Provider  ConfigurationGetAnswer_ChannelWebhook_Provider `protobuf:"varint,2,opt,name=provider,proto3,enum=amqp.ConfigurationGetAnswer_ChannelWebhook_Provider" json:"provider,omitempty"`
	Language  Language                                       `protobuf:"varint,3,opt,name=language,proto3,enum=amqp.Language" json:"language,omitempty"`
}

func (x *ConfigurationGetAnswer_ChannelWebhook) Reset() {
	*x = ConfigurationGetAnswer_ChannelWebhook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationGetAnswer_ChannelWebhook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationGetAnswer_ChannelWebhook) ProtoMessage() {}

func (x *ConfigurationGetAnswer_ChannelWebhook) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationGetAnswer_ChannelWebhook.ProtoReflect.Descriptor instead.
func (*ConfigurationGetAnswer_ChannelWebhook) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{6, 1}
}

func (x *ConfigurationGetAnswer_ChannelWebhook) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ConfigurationGetAnswer_ChannelWebhook) GetProvider() ConfigurationGetAnswer_ChannelWebhook_Provider {
	if x != nil {
		return x.Provider
	}
	return ConfigurationGetAnswer_ChannelWebhook_ALMANAX
}

func (x *ConfigurationGetAnswer_ChannelWebhook) GetLanguage() Language {
	if x != nil {
		return x.Language
	}
	return Language_ANY
}

type ConfigurationSetRequest_ServerField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId string `protobuf:"bytes,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *ConfigurationSetRequest_ServerField) Reset() {
	*x = ConfigurationSetRequest_ServerField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationSetRequest_ServerField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationSetRequest_ServerField) ProtoMessage() {}

func (x *ConfigurationSetRequest_ServerField) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationSetRequest_ServerField.ProtoReflect.Descriptor instead.
func (*ConfigurationSetRequest_ServerField) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ConfigurationSetRequest_ServerField) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

type ConfigurationSetRequest_WebhookField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebhookId    string                                        `protobuf:"bytes,1,opt,name=webhookId,proto3" json:"webhookId,omitempty"`
	WebhookToken string                                        `protobuf:"bytes,2,opt,name=webhookToken,proto3" json:"webhookToken,omitempty"`
	Enabled      bool                                          `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Provider     ConfigurationSetRequest_WebhookField_Provider `protobuf:"varint,4,opt,name=provider,proto3,enum=amqp.ConfigurationSetRequest_WebhookField_Provider" json:"provider,omitempty"`
}

func (x *ConfigurationSetRequest_WebhookField) Reset() {
	*x = ConfigurationSetRequest_WebhookField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationSetRequest_WebhookField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationSetRequest_WebhookField) ProtoMessage() {}

func (x *ConfigurationSetRequest_WebhookField) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationSetRequest_WebhookField.ProtoReflect.Descriptor instead.
func (*ConfigurationSetRequest_WebhookField) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{7, 1}
}

func (x *ConfigurationSetRequest_WebhookField) GetWebhookId() string {
	if x != nil {
		return x.WebhookId
	}
	return ""
}

func (x *ConfigurationSetRequest_WebhookField) GetWebhookToken() string {
	if x != nil {
		return x.WebhookToken
	}
	return ""
}

func (x *ConfigurationSetRequest_WebhookField) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ConfigurationSetRequest_WebhookField) GetProvider() ConfigurationSetRequest_WebhookField_Provider {
	if x != nil {
		return x.Provider
	}
	return ConfigurationSetRequest_WebhookField_ALMANAX
}

type JobGetBookAnswer_Craftsman struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Level  int64  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *JobGetBookAnswer_Craftsman) Reset() {
	*x = JobGetBookAnswer_Craftsman{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobGetBookAnswer_Craftsman) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobGetBookAnswer_Craftsman) ProtoMessage() {}

func (x *JobGetBookAnswer_Craftsman) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobGetBookAnswer_Craftsman.ProtoReflect.Descriptor instead.
func (*JobGetBookAnswer_Craftsman) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{10, 0}
}

func (x *JobGetBookAnswer_Craftsman) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *JobGetBookAnswer_Craftsman) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

type JobGetUserAnswer_JobExperience struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId string `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	Level int64  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *JobGetUserAnswer_JobExperience) Reset() {
	*x = JobGetUserAnswer_JobExperience{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitmq_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobGetUserAnswer_JobExperience) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobGetUserAnswer_JobExperience) ProtoMessage() {}

func (x *JobGetUserAnswer_JobExperience) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobGetUserAnswer_JobExperience.ProtoReflect.Descriptor instead.
func (*JobGetUserAnswer_JobExperience) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{12, 0}
}

func (x *JobGetUserAnswer_JobExperience) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobGetUserAnswer_JobExperience) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

var File_rabbitmq_proto protoreflect.FileDescriptor

var file_rabbitmq_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x6d, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x04, 0x61, 0x6d, 0x71, 0x70, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd0, 0x0c, 0x0a, 0x0f, 0x52, 0x61, 0x62, 0x62,
	0x69, 0x74, 0x4d, 0x51, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x6d, 0x71, 0x70,
	0x2e, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x4d, 0x51, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x61, 0x6d, 0x71, 0x70, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x52,
	0x61, 0x62, 0x62, 0x69, 0x74, 0x4d, 0x51, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a,
	0x12, 0x6e, 0x65, 0x77, 0x73, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6d, 0x71, 0x70,
	0x2e, 0x4e, 0x65, 0x77, 0x73, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x12, 0x6e, 0x65, 0x77, 0x73, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x73, 0x52,
	0x53, 0x53, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x53, 0x53, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x73, 0x52, 0x53, 0x53, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x15, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x15, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x14, 0x70, 0x6f, 0x72, 0x74,
	0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x52, 0x14, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6d, 0x71, 0x70,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x54, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52,
	0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65,
	0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x54, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x16,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x11, 0x6a, 0x6f, 0x62, 0x47, 0x65, 0x74,
	0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x4a, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x42,
	0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x6a, 0x6f, 0x62, 0x47,
	0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a,
	0x10, 0x6a, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x4a,
	0x6f, 0x62, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52,
	0x10, 0x6a, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x12, 0x45, 0x0a, 0x11, 0x6a, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61,
	0x6d, 0x71, 0x70, 0x2e, 0x4a, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x6a, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x10, 0x6a, 0x6f, 0x62, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x4a, 0x6f, 0x62, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x10, 0x6a, 0x6f, 0x62, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0d,
	0x6a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x6a, 0x6f, 0x62, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0c, 0x6a, 0x6f, 0x62, 0x53, 0x65,
	0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x61, 0x6d, 0x71, 0x70, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x52, 0x0c, 0x6a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22,
	0xf5, 0x02, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x45, 0x57, 0x53, 0x5f, 0x52, 0x53,
	0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x45, 0x57, 0x53, 0x5f, 0x54, 0x57, 0x49, 0x54,
	0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x4c, 0x5f,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x4c, 0x5f, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0x04, 0x12, 0x1d,
	0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x05, 0x12, 0x1c, 0x0a,
	0x18, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47,
	0x45, 0x54, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x5f,
	0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x4a, 0x4f, 0x42, 0x5f,
	0x47, 0x45, 0x54, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x4a, 0x4f, 0x42, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x4f,
	0x4f, 0x4b, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x4a,
	0x4f, 0x42, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x4a, 0x4f, 0x42, 0x5f, 0x47, 0x45, 0x54,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0x0c, 0x12, 0x13,
	0x0a, 0x0f, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x10, 0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x41,
	0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0x0e, 0x22, 0x21, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x22, 0xd4, 0x01, 0x0a, 0x12, 0x4e,
	0x65, 0x77, 0x73, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49,
	0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0xa2, 0x01, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x53, 0x53, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69,
	0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x55, 0x0a, 0x15, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xf2, 0x07,
	0x0a, 0x14, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6d, 0x71, 0x70,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x90, 0x07, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x55, 0x73, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x1a, 0x8b, 0x03, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a,
	0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x49,
	0x6e, 0x43, 0x61, 0x6e, 0x6f, 0x70, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x49, 0x6e, 0x43, 0x61, 0x6e, 0x6f, 0x70, 0x79, 0x12, 0x5a, 0x0a, 0x09, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61,
	0x6d, 0x71, 0x70, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x70, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61,
	0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x75, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x75, 0x62, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x75, 0x62, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78,
	0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x1a, 0x42,
	0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x22, 0x33, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x22, 0xa2, 0x04, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x0e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x55, 0x0a, 0x0f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x73, 0x1a, 0x49, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x1a, 0xdb,
	0x01, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x50, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x34, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x2e, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x2a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x2d, 0x0a,
	0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4c, 0x4d,
	0x41, 0x4e, 0x41, 0x58, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x53, 0x53, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x54, 0x57, 0x49, 0x54, 0x54, 0x45, 0x52, 0x10, 0x02, 0x22, 0xe3, 0x04, 0x0a,
	0x17, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x39, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x4b, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x4e, 0x0a, 0x0c, 0x77, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0c, 0x77, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x29, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x1a, 0xea, 0x01, 0x0a, 0x0c, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x4f, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x33, 0x2e, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x22, 0x2d, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x0b, 0x0a,
	0x07, 0x41, 0x4c, 0x4d, 0x41, 0x4e, 0x41, 0x58, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x53,
	0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x57, 0x49, 0x54, 0x54, 0x45, 0x52, 0x10, 0x02,
	0x22, 0x20, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b,
	0x10, 0x01, 0x22, 0x18, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0x75, 0x0a, 0x11,
	0x4a, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0xbf, 0x01, 0x0a, 0x10, 0x4a, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x42, 0x6f,
	0x6f, 0x6b, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x09, 0x63, 0x72,
	0x61, 0x66, 0x74, 0x73, 0x6d, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x61, 0x6d, 0x71, 0x70, 0x2e, 0x4a, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x61, 0x66, 0x74, 0x73, 0x6d, 0x61, 0x6e, 0x52,
	0x09, 0x63, 0x72, 0x61, 0x66, 0x74, 0x73, 0x6d, 0x65, 0x6e, 0x1a, 0x39, 0x0a, 0x09, 0x43, 0x72,
	0x61, 0x66, 0x74, 0x73, 0x6d, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x47, 0x0a, 0x11, 0x4a, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa5,
	0x01, 0x0a, 0x10, 0x4a, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x38, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x61, 0x6d, 0x71, 0x70, 0x2e, 0x4a, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x4a, 0x6f, 0x62,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f,
	0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x6f, 0x0a, 0x0d, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x0e, 0x0a, 0x0c, 0x4a, 0x6f, 0x62, 0x53, 0x65,
	0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2a, 0x2b, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02,
	0x46, 0x52, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02,
	0x45, 0x53, 0x10, 0x03, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x3b, 0x61, 0x6d, 0x71, 0x70, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rabbitmq_proto_rawDescOnce sync.Once
	file_rabbitmq_proto_rawDescData = file_rabbitmq_proto_rawDesc
)

func file_rabbitmq_proto_rawDescGZIP() []byte {
	file_rabbitmq_proto_rawDescOnce.Do(func() {
		file_rabbitmq_proto_rawDescData = protoimpl.X.CompressGZIP(file_rabbitmq_proto_rawDescData)
	})
	return file_rabbitmq_proto_rawDescData
}

var file_rabbitmq_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_rabbitmq_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_rabbitmq_proto_goTypes = []interface{}{
	(Language)(0),                                                  // 0: amqp.Language
	(RabbitMQMessage_Type)(0),                                      // 1: amqp.RabbitMQMessage.Type
	(RabbitMQMessage_Status)(0),                                    // 2: amqp.RabbitMQMessage.Status
	(ConfigurationGetAnswer_ChannelWebhook_Provider)(0),            // 3: amqp.ConfigurationGetAnswer.ChannelWebhook.Provider
	(ConfigurationSetRequest_Field)(0),                             // 4: amqp.ConfigurationSetRequest.Field
	(ConfigurationSetRequest_WebhookField_Provider)(0),             // 5: amqp.ConfigurationSetRequest.WebhookField.Provider
	(*RabbitMQMessage)(nil),                                        // 6: amqp.RabbitMQMessage
	(*NewsTwitterMessage)(nil),                                     // 7: amqp.NewsTwitterMessage
	(*NewsRSSMessage)(nil),                                         // 8: amqp.NewsRSSMessage
	(*PortalPositionRequest)(nil),                                  // 9: amqp.PortalPositionRequest
	(*PortalPositionAnswer)(nil),                                   // 10: amqp.PortalPositionAnswer
	(*ConfigurationGetRequest)(nil),                                // 11: amqp.ConfigurationGetRequest
	(*ConfigurationGetAnswer)(nil),                                 // 12: amqp.ConfigurationGetAnswer
	(*ConfigurationSetRequest)(nil),                                // 13: amqp.ConfigurationSetRequest
	(*ConfigurationSetAnswer)(nil),                                 // 14: amqp.ConfigurationSetAnswer
	(*JobGetBookRequest)(nil),                                      // 15: amqp.JobGetBookRequest
	(*JobGetBookAnswer)(nil),                                       // 16: amqp.JobGetBookAnswer
	(*JobGetUserRequest)(nil),                                      // 17: amqp.JobGetUserRequest
	(*JobGetUserAnswer)(nil),                                       // 18: amqp.JobGetUserAnswer
	(*JobSetRequest)(nil),                                          // 19: amqp.JobSetRequest
	(*JobSetAnswer)(nil),                                           // 20: amqp.JobSetAnswer
	(*PortalPositionAnswer_PortalPosition)(nil),                    // 21: amqp.PortalPositionAnswer.PortalPosition
	(*PortalPositionAnswer_PortalPosition_Position)(nil),           // 22: amqp.PortalPositionAnswer.PortalPosition.Position
	(*PortalPositionAnswer_PortalPosition_Source)(nil),             // 23: amqp.PortalPositionAnswer.PortalPosition.Source
	(*PortalPositionAnswer_PortalPosition_Position_Transport)(nil), // 24: amqp.PortalPositionAnswer.PortalPosition.Position.Transport
	(*ConfigurationGetAnswer_ChannelServer)(nil),                   // 25: amqp.ConfigurationGetAnswer.ChannelServer
	(*ConfigurationGetAnswer_ChannelWebhook)(nil),                  // 26: amqp.ConfigurationGetAnswer.ChannelWebhook
	(*ConfigurationSetRequest_ServerField)(nil),                    // 27: amqp.ConfigurationSetRequest.ServerField
	(*ConfigurationSetRequest_WebhookField)(nil),                   // 28: amqp.ConfigurationSetRequest.WebhookField
	(*JobGetBookAnswer_Craftsman)(nil),                             // 29: amqp.JobGetBookAnswer.Craftsman
	(*JobGetUserAnswer_JobExperience)(nil),                         // 30: amqp.JobGetUserAnswer.JobExperience
	(*timestamp.Timestamp)(nil),                                    // 31: google.protobuf.Timestamp
}
var file_rabbitmq_proto_depIdxs = []int32{
	1,  // 0: amqp.RabbitMQMessage.type:type_name -> amqp.RabbitMQMessage.Type
	0,  // 1: amqp.RabbitMQMessage.language:type_name -> amqp.Language
	2,  // 2: amqp.RabbitMQMessage.status:type_name -> amqp.RabbitMQMessage.Status
	7,  // 3: amqp.RabbitMQMessage.newsTwitterMessage:type_name -> amqp.NewsTwitterMessage
	8,  // 4: amqp.RabbitMQMessage.newsRSSMessage:type_name -> amqp.NewsRSSMessage
	9,  // 5: amqp.RabbitMQMessage.portalPositionRequest:type_name -> amqp.PortalPositionRequest
	10, // 6: amqp.RabbitMQMessage.portalPositionAnswer:type_name -> amqp.PortalPositionAnswer
	11, // 7: amqp.RabbitMQMessage.configurationGetRequest:type_name -> amqp.ConfigurationGetRequest
	12, // 8: amqp.RabbitMQMessage.configurationGetAnswer:type_name -> amqp.ConfigurationGetAnswer
	13, // 9: amqp.RabbitMQMessage.configurationSetRequest:type_name -> amqp.ConfigurationSetRequest
	14, // 10: amqp.RabbitMQMessage.configurationSetAnswer:type_name -> amqp.ConfigurationSetAnswer
	15, // 11: amqp.RabbitMQMessage.jobGetBookRequest:type_name -> amqp.JobGetBookRequest
	16, // 12: amqp.RabbitMQMessage.jobGetBookAnswer:type_name -> amqp.JobGetBookAnswer
	17, // 13: amqp.RabbitMQMessage.jobGetUserRequest:type_name -> amqp.JobGetUserRequest
	18, // 14: amqp.RabbitMQMessage.jobGetUserAnswer:type_name -> amqp.JobGetUserAnswer
	19, // 15: amqp.RabbitMQMessage.jobSetRequest:type_name -> amqp.JobSetRequest
	20, // 16: amqp.RabbitMQMessage.jobSetAnswer:type_name -> amqp.JobSetAnswer
	31, // 17: amqp.NewsRSSMessage.date:type_name -> google.protobuf.Timestamp
	21, // 18: amqp.PortalPositionAnswer.positions:type_name -> amqp.PortalPositionAnswer.PortalPosition
	25, // 19: amqp.ConfigurationGetAnswer.channelServers:type_name -> amqp.ConfigurationGetAnswer.ChannelServer
	26, // 20: amqp.ConfigurationGetAnswer.channelWebhooks:type_name -> amqp.ConfigurationGetAnswer.ChannelWebhook
	4,  // 21: amqp.ConfigurationSetRequest.field:type_name -> amqp.ConfigurationSetRequest.Field
	27, // 22: amqp.ConfigurationSetRequest.serverField:type_name -> amqp.ConfigurationSetRequest.ServerField
	28, // 23: amqp.ConfigurationSetRequest.webhookField:type_name -> amqp.ConfigurationSetRequest.WebhookField
	29, // 24: amqp.JobGetBookAnswer.craftsmen:type_name -> amqp.JobGetBookAnswer.Craftsman
	30, // 25: amqp.JobGetUserAnswer.jobs:type_name -> amqp.JobGetUserAnswer.JobExperience
	22, // 26: amqp.PortalPositionAnswer.PortalPosition.position:type_name -> amqp.PortalPositionAnswer.PortalPosition.Position
	31, // 27: amqp.PortalPositionAnswer.PortalPosition.createdAt:type_name -> google.protobuf.Timestamp
	31, // 28: amqp.PortalPositionAnswer.PortalPosition.updatedAt:type_name -> google.protobuf.Timestamp
	23, // 29: amqp.PortalPositionAnswer.PortalPosition.source:type_name -> amqp.PortalPositionAnswer.PortalPosition.Source
	24, // 30: amqp.PortalPositionAnswer.PortalPosition.Position.transport:type_name -> amqp.PortalPositionAnswer.PortalPosition.Position.Transport
	24, // 31: amqp.PortalPositionAnswer.PortalPosition.Position.conditionalTransport:type_name -> amqp.PortalPositionAnswer.PortalPosition.Position.Transport
	3,  // 32: amqp.ConfigurationGetAnswer.ChannelWebhook.provider:type_name -> amqp.ConfigurationGetAnswer.ChannelWebhook.Provider
	0,  // 33: amqp.ConfigurationGetAnswer.ChannelWebhook.language:type_name -> amqp.Language
	5,  // 34: amqp.ConfigurationSetRequest.WebhookField.provider:type_name -> amqp.ConfigurationSetRequest.WebhookField.Provider
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_rabbitmq_proto_init() }
func file_rabbitmq_proto_init() {
	if File_rabbitmq_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rabbitmq_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RabbitMQMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsTwitterMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsRSSMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortalPositionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortalPositionAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationGetAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationSetAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobGetBookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobGetBookAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobGetUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobGetUserAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobSetAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortalPositionAnswer_PortalPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortalPositionAnswer_PortalPosition_Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortalPositionAnswer_PortalPosition_Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortalPositionAnswer_PortalPosition_Position_Transport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationGetAnswer_ChannelServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationGetAnswer_ChannelWebhook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationSetRequest_ServerField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationSetRequest_WebhookField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobGetBookAnswer_Craftsman); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitmq_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobGetUserAnswer_JobExperience); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rabbitmq_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rabbitmq_proto_goTypes,
		DependencyIndexes: file_rabbitmq_proto_depIdxs,
		EnumInfos:         file_rabbitmq_proto_enumTypes,
		MessageInfos:      file_rabbitmq_proto_msgTypes,
	}.Build()
	File_rabbitmq_proto = out.File
	file_rabbitmq_proto_rawDesc = nil
	file_rabbitmq_proto_goTypes = nil
	file_rabbitmq_proto_depIdxs = nil
}
